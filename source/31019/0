(*
Source: https://edabit.com/challenge/wWWgAAqtGvZvujsb7
This challenge is based on the game Minesweeper.

Create a function that takes a grid of # and -, 
where each hash (#) represents a mine and each dash 
(-) represents a mine-free spot. Return an array where
 each dash is replaced by a digit indicating the number 
 of mines immediately adjacent to the spot (horizontally, vertically, and diagonally).

Examples
numGrid([
  ["-", "-", "-", "-", "-"],
  ["-", "-", "-", "-", "-"],
  ["-", "-", "#", "-", "-"],
  ["-", "-", "-", "-", "-"],
  ["-", "-", "-", "-", "-"]
]) ➞ [
  ["0", "0", "0", "0", "0"],
  ["0", "1", "1", "1", "0"],
  ["0", "1", "#", "1", "0"],
  ["0", "1", "1", "1", "0"],
  ["0", "0", "0", "0", "0"],
]

numGrid([
  ["-", "-", "-", "-", "#"],
  ["-", "-", "-", "-", "-"],
  ["-", "-", "#", "-", "-"],
  ["-", "-", "-", "-", "-"],
  ["#", "-", "-", "-", "-"]
]) ➞ [
  ["0", "0", "0", "1", "#"],
  ["0", "1", "1", "2", "1"],
  ["0", "1", "#", "1", "0"],
  ["1", "2", "1", "1", "0"],
  ["#", "1", "0", "0", "0"]
]

numGrid([
  ["-", "-", "-", "#", "#"],
  ["-", "#", "-", "-", "-"],
  ["-", "-", "#", "-", "-"],
  ["-", "#", "#", "-", "-"],
  ["-", "-", "-", "-", "-"]
]) ➞ [
  ["1", "1", "2", "#", "#"],
  ["1", "#", "3", "3", "2"],
  ["2", "4", "#", "2", "0"],
  ["1", "#", "#", "2", "0"],
  ["1", "2", "2", "1", "0"],
]
*)

let numGrid grid =
    let lengths =
        let yLength = Array.length grid

        let xLength =
            if yLength > 0 then
                grid |> Array.item 0 |> Array.length
            else
                failwith "Expected the grid not to be empty"

        xLength, yLength

    let cell (x, y) = grid |> Array.item y |> Array.item x

    let isMine coordinate =
        coordinate |> cell |> (fun value -> value = "#")

    let neighbourCount coordinate =
        let top (x, y) = x, y + 1
        let right (x, y) = x + 1, y
        let bottom (x, y) = x, y - 1
        let left (x, y) = x - 1, y

        let isPositive (x, y) = x >= 0 && y >= 0
        let isInBound (xLength, yLength) (x, y) = x < xLength && y < yLength

        let isNeighbouringMine lengths coordinate =
            isInBound lengths coordinate
            && isPositive coordinate
            && isMine coordinate

        [| top
           right
           bottom
           left
           top >> right
           bottom >> right
           bottom >> left
           top >> left |]
        |> Array.map (fun neighbour -> neighbour coordinate)
        |> Array.filter (isNeighbouringMine lengths)
        |> Array.length

    let dashToCount coordinate value =
        match value with
        | "-" -> coordinate |> neighbourCount |> string
        | "#" -> "#"
        | _ -> failwith "Expected either dash or hash"

    grid // Is there a more efficient way of getting 
    |> Array.mapi (fun y row -> Array.mapi (fun x value -> dashToCount (x, y) value) row)

// Application to the provided examples

[| [| "-"; "-"; "-"; "-"; "-" |]
   [| "-"; "-"; "-"; "-"; "-" |]
   [| "-"; "-"; "#"; "-"; "-" |]
   [| "-"; "-"; "-"; "-"; "-" |]
   [| "-"; "-"; "-"; "-"; "-" |] |]
|> numGrid
|> Array.iter (printfn "%A")

printfn ""

[| [| "-"; "-"; "-"; "-"; "#" |]
   [| "-"; "-"; "-"; "-"; "-" |]
   [| "-"; "-"; "#"; "-"; "-" |]
   [| "-"; "-"; "-"; "-"; "-" |]
   [| "#"; "-"; "-"; "-"; "-" |] |]
|> numGrid
|> Array.iter (printfn "%A")

printfn ""

[| [| "-"; "-"; "-"; "#"; "#" |]
   [| "-"; "#"; "-"; "-"; "-" |]
   [| "-"; "-"; "#"; "-"; "-" |]
   [| "-"; "#"; "#"; "-"; "-" |]
   [| "-"; "-"; "-"; "-"; "-" |] |]
|> numGrid
|> Array.iter (printfn "%A")

printfn ""
