// A constraint is a pair ID, function 
// The ID is the identifier of the word described by the constraint
// The function is a predicate that takes all previously discovered words 
// in the map, plus a word to test, and returns true if the word satisfies
// the constraint (is a possible candidate to fill the ID).
type Constraint = {
    Id: int;
    Length: int;
    IsCandidate: Map<int,string> -> string -> bool
}

let rec solve (words: Set<string>) (constraints: Constraint list) (solution: Map<int, string>) =
    match constraints with 
    | [] -> [solution]
    | c::rem -> 
        words 
        |> Set.toList
        |> List.filter (fun w -> w.Length = c.Length && (c.IsCandidate solution w))
        |> List.collect (fun w -> 
            let newWords = Set.remove w words
            let newSolution = Map.add c.Id w solution
            solve newWords rem newSolution)

// Hack: if an ID is for both down and across, add 100 for across, 200 for down
let constraints: Constraint list = 
    [
        (38, 5, (fun (_: Map<int, string>) (_: string) -> true));
        (28, 6, (fun m s-> s.[5] = m.[38].[0]));
        (30, 5, (fun m s -> s.[4] = m.[38].[2]));
        (31, 5, (fun m s -> s.[4] = m.[38].[4]));
        (33, 5, (fun m s -> s.[2] = m.[28].[2] && s.[4] = m.[30].[1]));
        (27, 6, (fun m s -> s.[5] = m.[28].[0]));
        (23, 6, (fun m s -> s.[2] = m.[27].[0]));
        (32, 6, (fun m s -> s.[4] = m.[23].[4]));
        (29, 5, (fun m s -> s.[1] = m.[32].[2]));
        (26, 6, (fun m s -> s.[2] = m.[32].[0]));
        (37, 5, (fun m s -> s.[0] = m.[26].[5] && s.[2] = m.[29].[4]));
        (22, 5, (fun m s -> s.[4] = m.[23].[0]));
        (215, 6, (fun m s -> s.[4] = m.[22].[1]));
        (18, 5, (fun m s -> s.[1] = m.[215].[2]));
        (115, 6, (fun m s -> s.[0] = m.[215].[0]));
        (10, 6, (fun m s -> s.[3] = m.[115].[3] && s.[5] = m.[18].[4]));
        (11, 5, (fun m s -> s.[1] = m.[10].[1]));
        (9, 5, (fun m s -> s.[4] = m.[10].[0]));
        (2, 5, (fun m s -> s.[3] = m.[9].[3] && s.[4] = m.[11].[0]));
        (101, 5, (fun m s -> s.[3] = m.[2].[0]));
        (201, 6, (fun m s -> s.[0] = m.[101].[0] && s.[3] = m.[9].[0]));
        (203, 5, (fun m s -> s.[4] = m.[11].[3]));
        (103, 6, (fun m s -> s.[0] = m.[203].[0]));
        (7, 6, (fun m s -> s.[1] = m.[203].[2]));
        (4, 5, (fun m s -> s.[2] = m.[7].[5] && s.[0] = m.[103].[4]));
        (12, 6, (fun m s -> s.[0] = m.[4].[4]));
        (205, 5, (fun m s -> s.[4] = m.[12].[3]));
        (105, 5, (fun m s -> s.[0] = m.[205].[0]));
        (8, 5, (fun m s -> s.[0] = m.[205].[2]));
        (6, 6, (fun m s -> s.[0] = m.[105].[4] && s.[2] = m.[8].[4]));
        (13, 5, (fun m s -> s.[0] = m.[12].[4]));
        (116, 6, (fun m s -> s.[4] = m.[13].[2]));
        (216, 6, (fun m s -> s.[0] = m.[116].[0]));
        (120, 6, (fun m s -> s.[2] = m.[13].[4]));
        (21, 6, (fun m s -> s.[5] = m.[216].[3]));
        (14, 6, (fun m s -> s.[4] = m.[21].[3]));
        (19, 6, (fun m s -> s.[1] = m.[21].[1] && s.[4] = m.[27].[2]));
        (35, 5, (fun m s -> s.[4] = m.[28].[4]));
        (34, 5, (fun m s -> s.[0] = m.[31].[1]));
        (36, 5, (fun m s -> s.[0] = m.[31].[3]));
        (24, 5, (fun m s -> s.[4] = m.[34].[2]));
        (25, 6, (fun m s -> s.[3] = m.[24].[1]));
        (220, 5, (fun m s -> s.[0] = m.[120].[0] && s.[3] = m.[25].[0]));
        (17, 6, (fun m s -> s.[1] = m.[120].[5] && s.[4] = m.[25].[5]));
    ] 
    |> List.map (fun (id, n, isCandidate) -> { Id = id; Length = n; IsCandidate = isCandidate })

let words = 
    [ 
        "adonis"; "aegir"; "aeolus"; "allah"; "ammit"; "apate"; "apollo"; 
        "athena"; "baldur"; "bragi"; "ceres"; "cronus"; "dagda"; "diana"; "enlil"; "frigga"; 
        "ganesh"; "helios"; "hestia"; "houchi"; "inanna"; "ishtar"; "ishum"; "kuanti"; "kuvera"; 
        "magni"; "marduk"; "mitra"; "momus"; "niobe"; "norns"; "oghma"; "osiris"; "ratri"; "rudra"; 
        "saturn"; "selene"; "shiva"; "thoth"; "tyche"; "urania"; "ushas"; "venus"; "vishnu"; "vulcan"
    ] |> Set.ofList

let solutions = solve words constraints Map.empty
let nSolutions = List.length solutions
if nSolutions = 1 then
    solutions.[0] 
    |> Map.toList
    |> List.map (fun (id, w) ->
        let idString = 
            if id > 200 then 
                string (id - 200) + "d"
            elif id > 100 then 
                string (id - 100) + "a"
            else 
                string id
        idString, w)
    |> List.iter (fun (id, w) -> printfn "%s %s" id w) 

let answer = 
    Set.difference 
        words 
        (solutions.[0] |> Map.toList |> List.map snd |> Set.ofList)
    |> Set.toList
    |> List.exactlyOne
    |> fun s -> s.ToUpper()