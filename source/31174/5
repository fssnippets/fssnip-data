open System
open System.Collections.Generic

type [<StructuralEquality; NoComparison>] Term =
    | Z of int
    | R of single
    | Tag of string
    | Entity of uint64
    | Terms of Term list
    static member equals (this : Term) (that : Term) = this.Equals that
    static member equalsMany (lefts : Dictionary<string, Term>) (rights : Dictionary<string, Term>) =
        if lefts.Count = rights.Count then
            let mutable result = true
            let mutable enr = lefts.GetEnumerator ()
            while result && enr.MoveNext () do
                let current = enr.Current
                let termName = current.Key
                match rights.TryGetValue termName with
                | (true, term) -> result <- Term.equals current.Value term
                | (false, _) -> result <- false
            result
        else false
    static member dict entries = dictPlus<string, Term> HashIdentity.Structural entries

type [<StructuralEquality; NoComparison>] Subquery =
    | Eq of Term
    | Gt of Term
    | Ge of Term
    | Lt of Term
    | Le of Term
    | Not of Subquery
    | And of Subquery list
    | Or of Subquery list

    static member private equalTo term term2 =
        match (term, term2) with
        | (Tag tag, Tag tag2) -> strEq tag tag2
        | (Entity entityId, Entity entityId2) -> entityId = entityId2
        | (Z i, Z i2) -> i = i2
        | (R i, R i2) -> i = i2
        | (Terms terms, Terms terms2) ->
            if terms.Length = terms2.Length
            then List.forall2 Subquery.equalTo terms terms2
            else false
        | _ -> false

    static member eval term subquery =
        match subquery with
        | Eq term2  ->
            Subquery.equalTo term term2
        | Gt term2 ->
            match (term, term2) with
            | (Z i, Z i2) -> i > i2
            | (R s, R s2) -> s > s2
            | (_, _) -> false
        | Ge term2 ->
            match (term, term2) with
            | (Z i, Z i2) -> i >= i2
            | (R s, R s2) -> s >= s2
            | (_, _) -> false
        | Lt term2 ->
            match (term, term2) with
            | (Z i, Z i2) -> i < i2
            | (R s, R s2) -> s < s2
            | (_, _) -> false
        | Le term2 ->
            match (term, term2) with
            | (Z i, Z i2) -> i <= i2
            | (R s, R s2) -> s <= s2
            | (_, _) -> false
        | Not subquery ->
            not (Subquery.eval term subquery)
        | And subqueries ->
            match term with
            | Terms terms -> if terms.Length = subqueries.Length then List.forall2 Subquery.eval terms subqueries else false
            | _ -> false
        | Or subqueries ->
            match term with
            | Terms terms -> if terms.Length = subqueries.Length then List.exists2 Subquery.eval terms subqueries else false
            | _ -> false

    static member evalMany (terms : Dictionary<string, Term>) (subqueries : Dictionary<string, Subquery>) =
        let mutable result = true
        let mutable termEnr = terms.GetEnumerator ()
        while result && termEnr.MoveNext () do
            let termEntry = termEnr.Current
            match subqueries.TryGetValue termEntry.Key with
            | (true, subquery) -> result <- Subquery.eval termEntry.Value subquery
            | (false, _) -> result <- false
        result

    static member dict entries =
        dictPlus<string, Subquery> HashIdentity.Structural entries