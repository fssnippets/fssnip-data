    type private Process =
        { Name: string
          ChanSend: Channel<int>
          ChanRecv: Channel<int>
        }

    let private createSendProcess (chanSend : Channel<int>) (chanRecv : Channel<int>) value name m =
        let rec create n = 
            if n = 1 then
                chanSend.Send value
                printfn $"%s{name} sent: %A{value}"
                let recv = chanRecv.Receive
                printfn $"%s{name} received: %A{recv}"
            else 
                chanSend.Send value
                printfn $"%s{name} sent: %A{value}"
                let recv = chanRecv.Receive
                printfn $"%s{name} received: %A{recv}"
                create (n - 1)
        create m

    let private createRecvProcess (chanRecv : Channel<int>) (chanSend : Channel<int>) name m =
        let rec create n =
            if n = 1 then
                let recv = chanRecv.Receive
                printfn $"%s{name} received: %A{recv}"
                let value = recv + 10
                chanSend.Send value
                printfn $"%s{name} sent: %A{value}"
            else
                let recv = chanRecv.Receive
                printfn $"%s{name} received: %A{recv}"
                let value = recv + 10
                chanSend.Send value
                printfn $"%s{name} sent: %A{value}"
                create (n - 1)
        create m

    let processRing processCount roundCount =
        let getRecvChan index (chans : Channel<int> list) =
            match index with
            | i when i - 1 < 0 -> chans.Item (List.length chans - 1)
            | i                -> chans.Item (i - 1)

        let rec createProcesses chans allChans index acc =
            match chans with
            | []    -> acc
            | c::cs -> let proc = {Name = $"p{index}"; ChanSend = c; ChanRecv = getRecvChan index allChans}
                       createProcesses cs allChans (index + 1) (acc @ [proc])

        let rec createProcessRing procs index m =
            match procs with
            | pa::pb::[] when index = 0 -> let sendAsync = async {
                                                            createSendProcess pa.ChanSend pa.ChanRecv 0 pa.Name m
                                                          }
                                           let recvAsync = async {
                                                            createRecvProcess pb.ChanRecv pb.ChanSend pb.Name m
                                                          }
                                           let sendTask = Async.AwaitTask <| Async.StartAsTask sendAsync
                                           let recvTask = Async.AwaitTask <| Async.StartAsTask recvAsync
                                           Async.RunSynchronously sendTask
                                           Async.RunSynchronously recvTask
            | pa::pb::[]                -> let recvAsync1 = async {
                                                            createRecvProcess pa.ChanRecv pa.ChanSend pa.Name m
                                                          }
                                           let recvAsync2 = async {
                                                            createRecvProcess pb.ChanRecv pb.ChanSend pb.Name m
                                                          }
                                           let recvTask1 = Async.AwaitTask <| Async.StartAsTask recvAsync1
                                           let recvTask2 = Async.AwaitTask <| Async.StartAsTask recvAsync2
                                           Async.RunSynchronously recvTask1
                                           Async.RunSynchronously recvTask2
            | p::ps when index = 0      -> let sendAsync = async {
                                                             createSendProcess p.ChanSend p.ChanRecv 0 p.Name m
                                                           }
                                           let sendTask = Async.AwaitTask <| Async.StartAsTask sendAsync
                                           createProcessRing ps (index + 1) m
                                           Async.RunSynchronously sendTask
            | p::ps                     -> let recvAsync = async {
                                                                 createRecvProcess p.ChanRecv p.ChanSend p.Name m
                                                              }
                                           let sendTask = Async.AwaitTask <| Async.StartAsTask recvAsync
                                           createProcessRing ps (index + 1) m
                                           Async.RunSynchronously sendTask
            | _                         -> failwith $"createProcessRing failed! m = %A{m}"

        let chans = [for _ in 1..processCount -> Channel<int>()]

        let processes = createProcesses chans chans 0 []

        createProcessRing processes 0 roundCount