<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">Microsoft</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">FSharp</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="id">Quotations</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="id">Patterns</span>

<span class="k">module</span> <span class="m">Test</span> <span class="o">=</span>
    <span class="c">// https://stackoverflow.com/a/26621814</span>
    <span class="c">// relies on at least surface-level knowledge of how F# quotations work</span>
    <span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">moduleType</span> <span class="o">=</span> <span class="pn">&lt;@</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="id">moduleType</span> <span class="pn">@&gt;</span> <span class="o">|&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="uc">PropertyGet</span> <span class="pn">(</span><span class="id">_</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="id">info</span><span class="pn">,</span> <span class="id">_</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="id">info</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="id">DeclaringType</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="id">ModuleTypeQt</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="id">moduleType</span>

    <span class="c">// https://stackoverflow.com/a/14706890</span>
    <span class="c">// relies on the fact that Modules are actually implemented as static classes</span>
    <span class="k">type</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="if">IAssemblyLocator</span> <span class="o">=</span> <span class="k">interface</span> <span class="k">end</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="id">ModuleTypeTo</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="k">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="if">IAssemblyLocator</span><span class="pn">&gt;</span><span class="pn">.</span><span class="id">DeclaringType</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="fn">sayHi</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="fn">printfn</span> <span class="s">&quot;Hello </span><span class="pf">%A</span><span class="s">&quot;</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="k">typeof</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span><span class="pn">.</span><span class="id">Name</span><span class="pn">)</span>

<span class="c">// not a module, but is perhaps the most understandable to most devs coming in</span>
<span class="pn">[&lt;</span><span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="rt">AbstractClass</span><span class="pn">;</span> <span onmouseout="hideTip(event, 'fs16', 21)" onmouseover="showTip(event, 'fs16', 21)" class="rt">Sealed</span><span class="pn">&gt;]</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs17', 22)" onmouseover="showTip(event, 'fs17', 22)" class="rt">Test</span> <span class="k">private</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
    <span class="k">static</span> <span class="k">member</span> <span class="fn">sayHi</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="fn">printfn</span> <span class="s">&quot;Hello </span><span class="pf">%A</span><span class="s">&quot;</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="k">typeof</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span><span class="pn">.</span><span class="id">Name</span><span class="pn">)</span>

<span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="m">Test</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs9', 26)" onmouseover="showTip(event, 'fs9', 26)" class="id">ModuleTypeQt</span><span class="pn">.</span><span class="id">GetMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="k">nameof</span> <span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="fn">Test</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs19', 29)" onmouseover="showTip(event, 'fs19', 29)" class="id">sayHi</span><span class="pn">)</span><span class="pn">.</span><span class="id">MakeGenericMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="k">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="rt">unit</span><span class="pn">&gt;</span><span class="pn">)</span><span class="pn">.</span><span class="id">Invoke</span><span class="pn">(</span><span class="k">null</span><span class="pn">,</span> <span class="pn">[|</span> <span class="pn">|]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs17', 32)" onmouseover="showTip(event, 'fs17', 32)" class="m">Test</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="id">ModuleTypeTo</span><span class="pn">.</span><span class="id">GetMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="k">nameof</span> <span onmouseout="hideTip(event, 'fs17', 35)" onmouseover="showTip(event, 'fs17', 35)" class="fn">Test</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="id">sayHi</span><span class="pn">)</span><span class="pn">.</span><span class="id">MakeGenericMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 37)" onmouseover="showTip(event, 'fs12', 37)" class="k">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="rt">unit</span><span class="pn">&gt;</span><span class="pn">)</span><span class="pn">.</span><span class="id">Invoke</span><span class="pn">(</span><span class="k">null</span><span class="pn">,</span> <span class="pn">[|</span> <span class="pn">|]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs12', 39)" onmouseover="showTip(event, 'fs12', 39)" class="k">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs17', 40)" onmouseover="showTip(event, 'fs17', 40)" class="rt">Test</span><span class="pn">&gt;</span><span class="pn">.</span><span class="id">GetMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 41)" onmouseover="showTip(event, 'fs18', 41)" class="k">nameof</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="fn">Test</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs19', 43)" onmouseover="showTip(event, 'fs19', 43)" class="id">sayHi</span><span class="pn">)</span><span class="pn">.</span><span class="id">MakeGenericMethod</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 44)" onmouseover="showTip(event, 'fs12', 44)" class="k">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs20', 45)" onmouseover="showTip(event, 'fs20', 45)" class="rt">unit</span><span class="pn">&gt;</span><span class="pn">)</span><span class="pn">.</span><span class="id">Invoke</span><span class="pn">(</span><span class="k">null</span><span class="pn">,</span> <span class="pn">[|</span> <span class="pn">|]</span><span class="pn">)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace Microsoft</div>
<div class="tip" id="fs2">namespace Microsoft.FSharp</div>
<div class="tip" id="fs3">namespace Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs4">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs5">val private moduleType : System.Type</div>
<div class="tip" id="fs6">active recognizer PropertyGet: Quotations.Expr -&gt; (Quotations.Expr option * System.Reflection.PropertyInfo * Quotations.Expr list) option</div>
<div class="tip" id="fs7">val info : System.Reflection.PropertyInfo</div>
<div class="tip" id="fs8">property System.Reflection.MemberInfo.DeclaringType: System.Type with get</div>
<div class="tip" id="fs9">val ModuleTypeQt : System.Type</div>
<div class="tip" id="fs10">type private IAssemblyLocator</div>
<div class="tip" id="fs11">val ModuleTypeTo : System.Type</div>
<div class="tip" id="fs12">val typeof&lt;&#39;T&gt; : System.Type</div>
<div class="tip" id="fs13">val sayHi&lt;&#39;a&gt; : unit -&gt; unit</div>
<div class="tip" id="fs14">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs15">Multiple items<br />type AbstractClassAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AbstractClassAttribute<br /><br />--------------------<br />new : unit -&gt; AbstractClassAttribute</div>
<div class="tip" id="fs16">Multiple items<br />type SealedAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; SealedAttribute<br />&#160;&#160;new : value:bool -&gt; SealedAttribute<br />&#160;&#160;member Value : bool<br /><br />--------------------<br />new : unit -&gt; SealedAttribute<br />new : value:bool -&gt; SealedAttribute</div>
<div class="tip" id="fs17">Multiple items<br />module Test<br /><br />from Script<br /><br />--------------------<br />type Test =<br />&#160;&#160;private new : unit -&gt; Test<br />&#160;&#160;static member sayHi : unit -&gt; unit<br /><br />--------------------<br />private new : unit -&gt; Test</div>
<div class="tip" id="fs18">val nameof : &#39;T -&gt; string</div>
<div class="tip" id="fs19">Multiple items<br />val sayHi&lt;&#39;a&gt; : unit -&gt; unit<br /><br />--------------------<br />static member Test.sayHi : unit -&gt; unit</div>
<div class="tip" id="fs20">type unit = Unit</div>

