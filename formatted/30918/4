<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">Decider</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">Csp</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="id">Integer</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="id">Decider</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="id">Csp</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="id">BaseTypes</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="fn">solve</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="id">rolls</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="id">rollers</span> <span class="o">=</span>
    <span class="k">let</span> <span class="pn">(</span><span class="o">==</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="id">left</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="id">right</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="rt">ExpressionInteger</span><span class="pn">.</span><span class="pn">(</span><span class="o">=</span><span class="pn">)</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="id">left</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="id">right</span><span class="pn">)</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="fn">expr</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="id">i</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="rt">ExpressionInteger</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="id">i</span><span class="pn">)</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="id">kickboards</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="rt">VariableInteger</span><span class="pn">(</span><span class="s">&quot;kickboards&quot;</span><span class="pn">,</span> <span class="n">0</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="id">rollers</span><span class="pn">)</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="id">cityrollers</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="rt">VariableInteger</span><span class="pn">(</span><span class="s">&quot;cityrollers&quot;</span><span class="pn">,</span> <span class="n">0</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs7', 24)" onmouseover="showTip(event, 'fs7', 24)" class="id">rollers</span><span class="pn">)</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="id">constraints</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs17', 26)" onmouseover="showTip(event, 'fs17', 26)" class="if">IConstraint</span> <span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="rt">list</span> <span class="o">=</span> <span class="pn">[</span>
        <span onmouseout="hideTip(event, 'fs19', 28)" onmouseover="showTip(event, 'fs19', 28)" class="rt">ConstraintInteger</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs13', 29)" onmouseover="showTip(event, 'fs13', 29)" class="id">kickboards</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="id">cityrollers</span> <span class="o">==</span> <span onmouseout="hideTip(event, 'fs11', 31)" onmouseover="showTip(event, 'fs11', 31)" class="fn">expr</span> <span onmouseout="hideTip(event, 'fs7', 32)" onmouseover="showTip(event, 'fs7', 32)" class="id">rollers</span><span class="pn">)</span>
        <span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="rt">ConstraintInteger</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs13', 34)" onmouseover="showTip(event, 'fs13', 34)" class="id">kickboards</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs11', 35)" onmouseover="showTip(event, 'fs11', 35)" class="fn">expr</span> <span class="n">3</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs15', 36)" onmouseover="showTip(event, 'fs15', 36)" class="id">cityrollers</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs11', 37)" onmouseover="showTip(event, 'fs11', 37)" class="fn">expr</span> <span class="n">2</span> <span class="o">==</span> <span onmouseout="hideTip(event, 'fs11', 38)" onmouseover="showTip(event, 'fs11', 38)" class="fn">expr</span> <span onmouseout="hideTip(event, 'fs6', 39)" onmouseover="showTip(event, 'fs6', 39)" class="id">rolls</span><span class="pn">)</span>
    <span class="pn">]</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 40)" onmouseover="showTip(event, 'fs20', 40)" class="id">variables</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs21', 41)" onmouseover="showTip(event, 'fs21', 41)" class="if">IVariable</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs22', 42)" onmouseover="showTip(event, 'fs22', 42)" class="vt">int</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs18', 43)" onmouseover="showTip(event, 'fs18', 43)" class="rt">list</span> <span class="o">=</span> <span class="pn">[</span>
        <span onmouseout="hideTip(event, 'fs13', 44)" onmouseover="showTip(event, 'fs13', 44)" class="id">kickboards</span>
        <span onmouseout="hideTip(event, 'fs15', 45)" onmouseover="showTip(event, 'fs15', 45)" class="id">cityrollers</span>
    <span class="pn">]</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 46)" onmouseover="showTip(event, 'fs23', 46)" class="id">state</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 47)" onmouseover="showTip(event, 'fs24', 47)" class="rt">StateInteger</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs20', 48)" onmouseover="showTip(event, 'fs20', 48)" class="id">variables</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs16', 49)" onmouseover="showTip(event, 'fs16', 49)" class="id">constraints</span><span class="pn">)</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs23', 50)" onmouseover="showTip(event, 'fs23', 50)" class="fn">state</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="id">Search</span><span class="pn">(</span><span class="pn">)</span> <span class="k">with</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs26', 52)" onmouseover="showTip(event, 'fs26', 52)" class="vt">StateOperationResult</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs27', 53)" onmouseover="showTip(event, 'fs27', 53)" class="id">Solved</span> <span class="k">-&gt;</span>
        <span onmouseout="hideTip(event, 'fs28', 54)" onmouseover="showTip(event, 'fs28', 54)" class="uc">Some</span> <span class="pn">{|</span> <span class="id">Kickboards</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 55)" onmouseover="showTip(event, 'fs13', 55)" class="id">kickboards</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs29', 56)" onmouseover="showTip(event, 'fs29', 56)" class="id">Value</span>
                <span class="id">Cityrollers</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 57)" onmouseover="showTip(event, 'fs15', 57)" class="id">cityrollers</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs29', 58)" onmouseover="showTip(event, 'fs29', 58)" class="id">Value</span> <span class="pn">|}</span>
    <span class="pn">|</span> <span class="id">_</span> <span class="k">-&gt;</span>
        <span onmouseout="hideTip(event, 'fs30', 59)" onmouseover="showTip(event, 'fs30', 59)" class="uc">None</span>

<span onmouseout="hideTip(event, 'fs5', 60)" onmouseover="showTip(event, 'fs5', 60)" class="fn">solve</span> <span class="n">37</span> <span class="n">15</span>
<span class="c">// val it : {| Cityrollers: int; Kickboards: int |} option =</span>
<span class="c">// Some { Cityrollers = 8</span>
<span class="c">//               Kickboards = 7 }</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace Decider</div>
<div class="tip" id="fs2">namespace Decider.Csp</div>
<div class="tip" id="fs3">namespace Decider.Csp.Integer</div>
<div class="tip" id="fs4">namespace Decider.Csp.BaseTypes</div>
<div class="tip" id="fs5">val solve : rolls:int -&gt; rollers:int -&gt; {| Cityrollers: int; Kickboards: int |} option</div>
<div class="tip" id="fs6">val rolls : int</div>
<div class="tip" id="fs7">val rollers : int</div>
<div class="tip" id="fs8">val left : ExpressionInteger</div>
<div class="tip" id="fs9">val right : ExpressionInteger</div>
<div class="tip" id="fs10">Multiple items<br />type ExpressionInteger =<br />&#160;&#160;inherit Expression&lt;int&gt;<br />&#160;&#160;new : integer:int -&gt; ExpressionInteger + 1 overload<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member Evaluate : Func&lt;ExpressionInteger, ExpressionInteger, int&gt;<br />&#160;&#160;member EvaluateBounds : Func&lt;ExpressionInteger, ExpressionInteger, Bounds&lt;int&gt;&gt;<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetUpdatedBounds : unit -&gt; Bounds&lt;int&gt;<br />&#160;&#160;member Integer : int<br />&#160;&#160;member IsBound : bool<br />&#160;&#160;member Left : Expression&lt;int&gt;<br />&#160;&#160;member Propagate : enforceBounds:Bounds&lt;int&gt; * result:ConstraintOperationResult -&gt; unit<br />&#160;&#160;...<br /><br />--------------------<br />ExpressionInteger(integer: int) : ExpressionInteger<br />ExpressionInteger(left: Expression&lt;int&gt;, right: Expression&lt;int&gt;) : ExpressionInteger</div>
<div class="tip" id="fs11">val expr : (int -&gt; ExpressionInteger)</div>
<div class="tip" id="fs12">val i : int</div>
<div class="tip" id="fs13">val kickboards : VariableInteger</div>
<div class="tip" id="fs14">Multiple items<br />type VariableInteger =<br />&#160;&#160;inherit ExpressionInteger<br />&#160;&#160;new : name:string * elements:IList&lt;int&gt; -&gt; VariableInteger + 1 overload<br />&#160;&#160;member Backtrack : fromDepth:int -&gt; unit<br />&#160;&#160;member Clone : unit -&gt; IVariable&lt;int&gt;<br />&#160;&#160;member CompareTo : otherVariable:IVariable&lt;int&gt; -&gt; int<br />&#160;&#160;member Domain : IDomain&lt;int&gt;<br />&#160;&#160;member GetUpdatedBounds : unit -&gt; Bounds&lt;int&gt;<br />&#160;&#160;member Instantiate : depth:int * result:DomainOperationResult -&gt; unit + 1 overload<br />&#160;&#160;member Instantiated : unit -&gt; bool<br />&#160;&#160;member InstantiatedValue : int<br />&#160;&#160;member IsBound : bool<br />&#160;&#160;...<br /><br />--------------------<br />VariableInteger(name: string, elements: System.Collections.Generic.IList&lt;int&gt;) : VariableInteger<br />VariableInteger(name: string, lowerBound: int, upperBound: int) : VariableInteger</div>
<div class="tip" id="fs15">val cityrollers : VariableInteger</div>
<div class="tip" id="fs16">val constraints : IConstraint list</div>
<div class="tip" id="fs17">type IConstraint =<br />&#160;&#160;member Check : result:ConstraintOperationResult -&gt; unit<br />&#160;&#160;member Propagate : result:ConstraintOperationResult -&gt; unit<br />&#160;&#160;member StateChanged : unit -&gt; bool</div>
<div class="tip" id="fs18">type &#39;T list = List&lt;&#39;T&gt;</div>
<div class="tip" id="fs19">Multiple items<br />type ConstraintInteger =<br />&#160;&#160;inherit ExpressionInteger<br />&#160;&#160;new : expression:Expression&lt;int&gt; -&gt; ConstraintInteger<br />&#160;&#160;member Check : result:ConstraintOperationResult -&gt; unit<br />&#160;&#160;member Propagate : result:ConstraintOperationResult -&gt; unit<br />&#160;&#160;member StateChanged : unit -&gt; bool<br /><br />--------------------<br />ConstraintInteger(expression: Expression&lt;int&gt;) : ConstraintInteger</div>
<div class="tip" id="fs20">val variables : IVariable&lt;int&gt; list</div>
<div class="tip" id="fs21">type IVariable&lt;&#39;T&gt; =<br />&#160;&#160;inherit IComparable&lt;IVariable&lt;&#39;T&gt;&gt;<br />&#160;&#160;member Backtrack : fromDepth:int -&gt; unit<br />&#160;&#160;member Clone : unit -&gt; IVariable&lt;&#39;T&gt;<br />&#160;&#160;member Instantiate : depth:int * result:DomainOperationResult -&gt; unit + 1 overload<br />&#160;&#160;member Instantiated : unit -&gt; bool<br />&#160;&#160;member InstantiatedValue : &#39;T<br />&#160;&#160;member Name : string<br />&#160;&#160;member Remove : value:&#39;T * result:DomainOperationResult -&gt; unit + 1 overload<br />&#160;&#160;member SetState : state:IState&lt;&#39;T&gt; -&gt; unit<br />&#160;&#160;member Size : unit -&gt; &#39;T<br />&#160;&#160;member ToString : unit -&gt; string</div>
<div class="tip" id="fs22">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs23">val state : StateInteger</div>
<div class="tip" id="fs24">Multiple items<br />type StateInteger =<br />&#160;&#160;new : variables:IEnumerable&lt;IVariable&lt;int&gt;&gt; * constraints:IEnumerable&lt;IConstraint&gt; -&gt; StateInteger<br />&#160;&#160;member Backtracks : int with get, set<br />&#160;&#160;member Constraints : IList&lt;IConstraint&gt; with get, set<br />&#160;&#160;member Depth : int with get, set<br />&#160;&#160;member OptimalSolution : IDictionary&lt;string, IVariable&lt;int&gt;&gt; with get, set<br />&#160;&#160;member Runtime : TimeSpan with get, set<br />&#160;&#160;member Search : unit -&gt; StateOperationResult + 1 overload<br />&#160;&#160;member SearchAllSolutions : unit -&gt; StateOperationResult<br />&#160;&#160;member SetConstraints : constraints:IEnumerable&lt;IConstraint&gt; -&gt; unit<br />&#160;&#160;member SetVariables : variableList:IEnumerable&lt;IVariable&lt;int&gt;&gt; -&gt; unit<br />&#160;&#160;...<br /><br />--------------------<br />StateInteger(variables: System.Collections.Generic.IEnumerable&lt;IVariable&lt;int&gt;&gt;, constraints: System.Collections.Generic.IEnumerable&lt;IConstraint&gt;) : StateInteger</div>
<div class="tip" id="fs25">StateInteger.Search() : StateOperationResult<br />StateInteger.Search(optimiseVar: IVariable&lt;int&gt;, timeOut: int) : StateOperationResult</div>
<div class="tip" id="fs26">type StateOperationResult =<br />&#160;&#160;| Solved = 0<br />&#160;&#160;| Unsatisfiable = 1<br />&#160;&#160;| TimedOut = 2</div>
<div class="tip" id="fs27">field StateOperationResult.Solved: StateOperationResult = 0</div>
<div class="tip" id="fs28">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs29">property VariableInteger.Value: int with get</div>
<div class="tip" id="fs30">union case Option.None: Option&lt;&#39;T&gt;</div>

