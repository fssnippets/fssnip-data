<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// take an order list of tuple key value and convert to a crosstab of key &amp; values</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="fn">crosstab</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">set</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="id">fold</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">a</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="id">x</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="id">y</span><span class="pn">)</span> <span class="k">-&gt;</span> <span class="k">if</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="fn">fst</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="m">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="id">head</span> <span onmouseout="hideTip(event, 'fs5', 11)" onmouseover="showTip(event, 'fs5', 11)" class="id">a</span><span class="pn">)</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="id">x</span> <span class="k">then</span> <span class="pn">[</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs6', 13)" onmouseover="showTip(event, 'fs6', 13)" class="id">x</span><span class="pn">,</span><span class="pn">[</span><span onmouseout="hideTip(event, 'fs7', 14)" onmouseover="showTip(event, 'fs7', 14)" class="id">y</span><span class="pn">]</span> <span class="o">@</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="fn">snd</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="m">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="id">head</span> <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="id">a</span><span class="pn">)</span><span class="pn">)</span><span class="pn">)</span><span class="pn">]</span> <span class="o">@</span> <span onmouseout="hideTip(event, 'fs5', 19)" onmouseover="showTip(event, 'fs5', 19)" class="id">a</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="id">Tail</span> <span class="k">else</span> <span class="pn">[</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs6', 21)" onmouseover="showTip(event, 'fs6', 21)" class="id">x</span><span class="pn">,</span><span class="pn">[</span><span onmouseout="hideTip(event, 'fs7', 22)" onmouseover="showTip(event, 'fs7', 22)" class="id">y</span><span class="pn">]</span><span class="pn">)</span><span class="pn">]</span> <span class="o">@</span> <span onmouseout="hideTip(event, 'fs5', 23)" onmouseover="showTip(event, 'fs5', 23)" class="id">a</span><span class="pn">)</span> <span class="pn">[</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs8', 24)" onmouseover="showTip(event, 'fs8', 24)" class="fn">fst</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs3', 25)" onmouseover="showTip(event, 'fs3', 25)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs13', 26)" onmouseover="showTip(event, 'fs13', 26)" class="id">head</span> <span onmouseout="hideTip(event, 'fs2', 27)" onmouseover="showTip(event, 'fs2', 27)" class="id">set</span><span class="pn">)</span><span class="pn">,</span><span class="pn">[</span><span class="pn">]</span><span class="pn">)</span><span class="pn">]</span> <span onmouseout="hideTip(event, 'fs2', 28)" onmouseover="showTip(event, 'fs2', 28)" class="id">set</span>

<span class="c">(*</span>
<span class="c">    takes advantage of tail of a single linked list being a list, to immutably accumulate without copying data.</span>
<span class="c">    example with type anotation </span>

<span class="c">crosstab [(1,&#39;a&#39;); (1,&#39;b&#39;);(1,&#39;c&#39;);(2,&#39;A&#39;);(2,&#39;B&#39;);(3,&#39;x&#39;)] = [(3, [&#39;x&#39;]); (2, [&#39;B&#39;; &#39;A&#39;]); (1, [&#39;c&#39;; &#39;b&#39;; &#39;a&#39;])]</span>

<span class="c">let crosstab (set : (&#39;a * &#39;b) seq) : (&#39;a * &#39;b list) list = </span>
<span class="c">    let keyofhead (a : (&#39;a * &#39;b list) list) : &#39;a = fst (List.head a)</span>
<span class="c">    let crosshead (a : (&#39;a * &#39;b list) list) : &#39;b list = snd (List.head a)</span>
<span class="c">    let statewithfirstkey : (&#39;a * &#39;b list) list = [(fst (Seq.head set),[])]</span>
<span class="c">    Seq.fold (fun a (x,y) -&gt; if (keyofhead a) = x then [(x,[y] @ (crosshead a))] @ a.Tail else [(x,[y])] @ a) statewithfirstkey set</span>
<span class="c">*)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val crosstab : set:seq&lt;&#39;a * &#39;b&gt; -&gt; (&#39;a * &#39;b list) list (requires equality)</div>
<div class="tip" id="fs2">val set : seq&lt;&#39;a * &#39;b&gt; (requires equality)</div>
<div class="tip" id="fs3">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs4">val fold : folder:(&#39;State -&gt; &#39;T -&gt; &#39;State) -&gt; state:&#39;State -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;State</div>
<div class="tip" id="fs5">val a : (&#39;a * &#39;b list) list (requires equality)</div>
<div class="tip" id="fs6">val x : &#39;a (requires equality)</div>
<div class="tip" id="fs7">val y : &#39;b</div>
<div class="tip" id="fs8">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1</div>
<div class="tip" id="fs9">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;&#160;&#160;interface IReadOnlyList&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IReadOnlyCollection&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IEnumerable<br />&#160;&#160;&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;member GetReverseIndex : rank:int * offset:int -&gt; int<br />&#160;&#160;&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;&#160;&#160;member Head : &#39;T<br />&#160;&#160;&#160;&#160;member IsEmpty : bool<br />&#160;&#160;&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;&#160;&#160;member Length : int<br />&#160;&#160;&#160;&#160;...</div>
<div class="tip" id="fs10">val head : list:&#39;T list -&gt; &#39;T</div>
<div class="tip" id="fs11">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2</div>
<div class="tip" id="fs12">property List.Tail: (&#39;a * &#39;b list) list with get</div>
<div class="tip" id="fs13">val head : source:seq&lt;&#39;T&gt; -&gt; &#39;T</div>

