<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//================================================</span>
<span class="c">//Complete Koans and Submit count as 5pt HW in total</span>
<span class="c">//There are 15 tests and 3 output prints from this example</span>
<span class="c">//Each worth 0.25 pt in HW</span>
<span class="c">//Submission is 0.5 pt in HW</span>
<span class="c">//Correct output:</span>
<span class="c">//T1...Test Success</span>
<span class="c">//...</span>
<span class="c">//T15...Test Success</span>
<span class="c">//The top of the current stack is 3.000000</span>
<span class="c">//The top of the current stack is 27.000000</span>
<span class="c">//The top of the current stack is 6.000000</span>
<span class="c">//================================================</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="fn">AssertEquality</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">inputTuple</span> <span class="o">=</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="id">inputTuple</span> <span class="k">with</span>
  <span class="pn">|</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="id">a</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="id">b</span><span class="pn">)</span> <span class="k">when</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="id">a</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="id">b</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="fn">printfn</span> <span class="s">&quot;Test Success&quot;</span>
  <span class="pn">|</span><span class="id">_</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="fn">printfn</span> <span class="s">&quot;Test Fail&quot;</span>

<span class="c">//==============================================</span>
<span class="c">//Build a stack based calculator</span>
<span class="c">//==============================================</span>

<span class="c">//==============================================</span>
<span class="c">// Define types</span>
<span class="c">// ==============================================</span>

<span class="c">//name a stack -- regular:</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs6', 10)" onmouseover="showTip(event, 'fs6', 10)" class="rt">Stacktest</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="vt">float</span> <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="rt">list</span>

<span class="c">//Comment out the regular def (line 16)</span>
<span class="c">//name a stack -- better:</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="rt">Stack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="uc">StackContents</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="vt">float</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="rt">list</span>

<span class="c">//### now test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="id">testStack1</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">1.0</span><span class="pn">;</span><span class="n">2.0</span><span class="pn">;</span><span class="n">3.0</span><span class="pn">]</span>
<span class="k">let</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="uc">StackContents</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="id">contents</span><span class="pn">)</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="id">testStack1</span> <span class="c">//get the content from a stack using pattern matching</span>
<span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="fn">printf</span> <span class="s">&quot;T1...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 23)" onmouseover="showTip(event, 'fs1', 23)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="id">contents</span><span class="pn">,</span> <span class="id">___</span><span class="pn">)</span>

<span class="c">// ==============================================</span>
<span class="c">// Stack primitives -- push pop</span>
<span class="c">// ==============================================</span>
<span class="c">(*</span>
<span class="c">//Push a value on the stack -- regular</span>
<span class="c">let push x aStack =   </span>
<span class="c">  let (StackContents contents) = aStack</span>
<span class="c">  let newContents = x::contents</span>
<span class="c">  StackContents newContents</span>
<span class="c">//list is immutable so you always add element to the head and return a new list</span>

<span class="c">//Comment out the regular def</span>
<span class="c">*)</span>
<span class="c">// Push a value on the stack -- better</span>
<span class="c">//(StackContents contents) is a Stack var being passed over as func input (aStack in the regular version).</span>
<span class="c">//The pattern matching line &quot;let (...)=aStack&quot; is condensed and happens at the input variable line</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="fn">push</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="id">x</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="uc">StackContents</span> <span onmouseout="hideTip(event, 'fs12', 28)" onmouseover="showTip(event, 'fs12', 28)" class="id">contents</span><span class="pn">)</span> <span class="o">=</span>   
    <span onmouseout="hideTip(event, 'fs10', 29)" onmouseover="showTip(event, 'fs10', 29)" class="uc">StackContents</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="id">x</span><span class="uc">::</span><span onmouseout="hideTip(event, 'fs12', 31)" onmouseover="showTip(event, 'fs12', 31)" class="id">contents</span><span class="pn">)</span>

<span class="c">//### now test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 32)" onmouseover="showTip(event, 'fs16', 32)" class="id">emptyStack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 33)" onmouseover="showTip(event, 'fs10', 33)" class="uc">StackContents</span> <span class="pn">[</span><span class="pn">]</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 34)" onmouseover="showTip(event, 'fs17', 34)" class="id">stackWith1test</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 35)" onmouseover="showTip(event, 'fs14', 35)" class="fn">push</span> <span class="n">1.0</span> <span onmouseout="hideTip(event, 'fs16', 36)" onmouseover="showTip(event, 'fs16', 36)" class="id">emptyStack</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 37)" onmouseover="showTip(event, 'fs18', 37)" class="id">stackWith2test</span> <span class="o">=</span> <span class="id">___</span>
<span onmouseout="hideTip(event, 'fs13', 38)" onmouseover="showTip(event, 'fs13', 38)" class="fn">printf</span> <span class="s">&quot;T2...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 39)" onmouseover="showTip(event, 'fs1', 39)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 40)" onmouseover="showTip(event, 'fs18', 40)" class="id">stackWith2test</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 41)" onmouseover="showTip(event, 'fs10', 41)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">2.0</span><span class="pn">;</span><span class="n">1.0</span><span class="pn">]</span><span class="pn">)</span>


<span class="c">//If you remember, in F#, we can pass over only 1 var and have a partial func as the return value</span>
<span class="c">//like giving y=5 in f(x,y)=x+y returns function: f(x,5)=x+5</span>
<span class="c">//push takes x and a stack as input variables. We can give x as input var only and have f (defined-x, stack) as return value</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 42)" onmouseover="showTip(event, 'fs19', 42)" class="fn">ONE</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 43)" onmouseover="showTip(event, 'fs14', 43)" class="fn">push</span> <span class="n">1.0</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="fn">TWO</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="fn">push</span> <span class="n">2.0</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 46)" onmouseover="showTip(event, 'fs21', 46)" class="fn">THREE</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 47)" onmouseover="showTip(event, 'fs22', 47)" class="id">FOUR</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 48)" onmouseover="showTip(event, 'fs23', 48)" class="id">FIVE</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 49)" onmouseover="showTip(event, 'fs24', 49)" class="id">EMPTY</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 50)" onmouseover="showTip(event, 'fs10', 50)" class="uc">StackContents</span> <span class="pn">[</span><span class="pn">]</span>

<span class="c">//### now test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="id">stackWith1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 52)" onmouseover="showTip(event, 'fs19', 52)" class="fn">ONE</span> <span onmouseout="hideTip(event, 'fs24', 53)" onmouseover="showTip(event, 'fs24', 53)" class="id">EMPTY</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 54)" onmouseover="showTip(event, 'fs26', 54)" class="id">stackWith2</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 55)" onmouseover="showTip(event, 'fs27', 55)" class="id">stackWith3</span>  <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 56)" onmouseover="showTip(event, 'fs21', 56)" class="fn">THREE</span> <span onmouseout="hideTip(event, 'fs26', 57)" onmouseover="showTip(event, 'fs26', 57)" class="id">stackWith2</span>
<span class="c">//You might also remember that those partially defined functions are very useful when building pipes to make your code very concise and easy to read:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 58)" onmouseover="showTip(event, 'fs28', 58)" class="id">result123</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 59)" onmouseover="showTip(event, 'fs24', 59)" class="id">EMPTY</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 60)" onmouseover="showTip(event, 'fs19', 60)" class="fn">ONE</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 61)" onmouseover="showTip(event, 'fs20', 61)" class="fn">TWO</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs21', 62)" onmouseover="showTip(event, 'fs21', 62)" class="fn">THREE</span> 
<span onmouseout="hideTip(event, 'fs13', 63)" onmouseover="showTip(event, 'fs13', 63)" class="fn">printf</span> <span class="s">&quot;T3...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 64)" onmouseover="showTip(event, 'fs1', 64)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 65)" onmouseover="showTip(event, 'fs27', 65)" class="id">stackWith3</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs28', 66)" onmouseover="showTip(event, 'fs28', 66)" class="id">result123</span><span class="pn">)</span>
<span class="c">//you can also do:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 67)" onmouseover="showTip(event, 'fs29', 67)" class="id">result312</span> <span class="o">=</span> <span class="id">___</span>
<span onmouseout="hideTip(event, 'fs13', 68)" onmouseover="showTip(event, 'fs13', 68)" class="fn">printf</span> <span class="s">&quot;T4...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 69)" onmouseover="showTip(event, 'fs1', 69)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs29', 70)" onmouseover="showTip(event, 'fs29', 70)" class="id">result312</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs10', 71)" onmouseover="showTip(event, 'fs10', 71)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">2.0</span><span class="pn">;</span><span class="n">1.0</span><span class="pn">;</span><span class="n">3.0</span><span class="pn">]</span><span class="pn">)</span>

<span class="c">// Pop a value from the stack and return it </span>
<span class="c">// and the new stack as a tuple</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 72)" onmouseover="showTip(event, 'fs30', 72)" class="fn">pop</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs10', 73)" onmouseover="showTip(event, 'fs10', 73)" class="uc">StackContents</span> <span onmouseout="hideTip(event, 'fs12', 74)" onmouseover="showTip(event, 'fs12', 74)" class="id">contents</span><span class="pn">)</span> <span class="o">=</span> 
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs12', 75)" onmouseover="showTip(event, 'fs12', 75)" class="id">contents</span> <span class="k">with</span> 
    <span class="pn">|</span><span onmouseout="hideTip(event, 'fs31', 76)" onmouseover="showTip(event, 'fs31', 76)" class="id">top</span><span class="uc">::</span><span onmouseout="hideTip(event, 'fs32', 77)" onmouseover="showTip(event, 'fs32', 77)" class="id">rest</span> <span class="k">-&gt;</span> 
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 78)" onmouseover="showTip(event, 'fs33', 78)" class="id">newStack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 79)" onmouseover="showTip(event, 'fs10', 79)" class="uc">StackContents</span> <span onmouseout="hideTip(event, 'fs32', 80)" onmouseover="showTip(event, 'fs32', 80)" class="id">rest</span>
      <span class="pn">(</span><span class="id">___</span>  <span class="pn">,</span>  <span class="id">___</span><span class="pn">)</span>
    <span class="pn">|</span><span class="pn">[</span><span class="pn">]</span> <span class="k">-&gt;</span> 
        <span onmouseout="hideTip(event, 'fs34', 81)" onmouseover="showTip(event, 'fs34', 81)" class="fn">failwith</span> <span class="s">&quot;Stack underflow&quot;</span>

<span class="c">//### now test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 82)" onmouseover="showTip(event, 'fs35', 82)" class="id">initialStack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 83)" onmouseover="showTip(event, 'fs24', 83)" class="id">EMPTY</span>  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 84)" onmouseover="showTip(event, 'fs19', 84)" class="fn">ONE</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 85)" onmouseover="showTip(event, 'fs20', 85)" class="fn">TWO</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 86)" onmouseover="showTip(event, 'fs36', 86)" class="id">popped1</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs37', 87)" onmouseover="showTip(event, 'fs37', 87)" class="id">poppedStack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 88)" onmouseover="showTip(event, 'fs30', 88)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs35', 89)" onmouseover="showTip(event, 'fs35', 89)" class="id">initialStack</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 90)" onmouseover="showTip(event, 'fs38', 90)" class="id">popped2</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs39', 91)" onmouseover="showTip(event, 'fs39', 91)" class="id">poppedStack2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 92)" onmouseover="showTip(event, 'fs30', 92)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs37', 93)" onmouseover="showTip(event, 'fs37', 93)" class="id">poppedStack</span>
<span onmouseout="hideTip(event, 'fs13', 94)" onmouseover="showTip(event, 'fs13', 94)" class="fn">printf</span> <span class="s">&quot;T5...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 95)" onmouseover="showTip(event, 'fs1', 95)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs35', 96)" onmouseover="showTip(event, 'fs35', 96)" class="id">initialStack</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs10', 97)" onmouseover="showTip(event, 'fs10', 97)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">2.0</span><span class="pn">;</span><span class="n">1.0</span><span class="pn">]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 98)" onmouseover="showTip(event, 'fs13', 98)" class="fn">printf</span> <span class="s">&quot;T6...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 99)" onmouseover="showTip(event, 'fs1', 99)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs37', 100)" onmouseover="showTip(event, 'fs37', 100)" class="id">poppedStack</span><span class="pn">,</span><span class="id">___</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 101)" onmouseover="showTip(event, 'fs13', 101)" class="fn">printf</span> <span class="s">&quot;T7...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 102)" onmouseover="showTip(event, 'fs1', 102)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs38', 103)" onmouseover="showTip(event, 'fs38', 103)" class="id">popped2</span><span class="pn">,</span><span class="id">___</span><span class="pn">)</span>


<span class="c">// ==============================================</span>
<span class="c">// Operator core</span>
<span class="c">// ==============================================</span>
<span class="c">//let us do add first:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 104)" onmouseover="showTip(event, 'fs40', 104)" class="fn">ADDtest</span> <span onmouseout="hideTip(event, 'fs41', 105)" onmouseover="showTip(event, 'fs41', 105)" class="id">stack</span> <span class="o">=</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 106)" onmouseover="showTip(event, 'fs42', 106)" class="id">x</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs43', 107)" onmouseover="showTip(event, 'fs43', 107)" class="id">s</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 108)" onmouseover="showTip(event, 'fs30', 108)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 109)" onmouseover="showTip(event, 'fs41', 109)" class="id">stack</span>  <span class="c">//pop the top of the stack</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs44', 110)" onmouseover="showTip(event, 'fs44', 110)" class="id">y</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs45', 111)" onmouseover="showTip(event, 'fs45', 111)" class="id">s2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 112)" onmouseover="showTip(event, 'fs30', 112)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs43', 113)" onmouseover="showTip(event, 'fs43', 113)" class="id">s</span>     <span class="c">//pop the result stack</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 114)" onmouseover="showTip(event, 'fs46', 114)" class="id">result</span> <span class="o">=</span> <span class="id">___</span>   <span class="c">//do the math</span>
  <span onmouseout="hideTip(event, 'fs14', 115)" onmouseover="showTip(event, 'fs14', 115)" class="fn">push</span> <span onmouseout="hideTip(event, 'fs46', 116)" onmouseover="showTip(event, 'fs46', 116)" class="id">result</span> <span onmouseout="hideTip(event, 'fs45', 117)" onmouseover="showTip(event, 'fs45', 117)" class="id">s2</span>       <span class="c">//push back on the doubly-popped stack</span>

<span class="c">//###test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 118)" onmouseover="showTip(event, 'fs47', 118)" class="id">add12</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs40', 119)" onmouseover="showTip(event, 'fs40', 119)" class="fn">ADDtest</span> <span onmouseout="hideTip(event, 'fs35', 120)" onmouseover="showTip(event, 'fs35', 120)" class="id">initialStack</span> <span class="c">//list is immutable, so the initialStack is always [2.0;1.0]</span>
<span onmouseout="hideTip(event, 'fs13', 121)" onmouseover="showTip(event, 'fs13', 121)" class="fn">printf</span> <span class="s">&quot;T8...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 122)" onmouseover="showTip(event, 'fs1', 122)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs47', 123)" onmouseover="showTip(event, 'fs47', 123)" class="id">add12</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 124)" onmouseover="showTip(event, 'fs10', 124)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">3.0</span><span class="pn">]</span><span class="pn">)</span>

<span class="c">//Similarly, we can define MUL</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 125)" onmouseover="showTip(event, 'fs48', 125)" class="fn">MULtest</span> <span onmouseout="hideTip(event, 'fs49', 126)" onmouseover="showTip(event, 'fs49', 126)" class="id">stack</span> <span class="o">=</span> 
  <span class="k">let</span> <span class="id">___</span>  <span class="c">//pop the top of the stack</span>
  <span class="k">let</span> <span class="id">___</span>     <span class="c">//pop the result stack</span>
  <span class="k">let</span> <span class="id">___</span>   <span class="c">//do the math </span>
  <span onmouseout="hideTip(event, 'fs14', 127)" onmouseover="showTip(event, 'fs14', 127)" class="fn">push</span> <span class="id">___</span>      <span class="c">//push back on the doubly-popped stack</span>

<span class="c">//###test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 128)" onmouseover="showTip(event, 'fs50', 128)" class="fn">mul12</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs48', 129)" onmouseover="showTip(event, 'fs48', 129)" class="fn">MULtest</span> <span onmouseout="hideTip(event, 'fs35', 130)" onmouseover="showTip(event, 'fs35', 130)" class="id">initialStack</span> <span class="c">//list is immutable, so the initialStack is always [2.0;1.0]</span>
<span onmouseout="hideTip(event, 'fs13', 131)" onmouseover="showTip(event, 'fs13', 131)" class="fn">printf</span> <span class="s">&quot;T9...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 132)" onmouseover="showTip(event, 'fs1', 132)" class="fn">AssertEquality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs50', 133)" onmouseover="showTip(event, 'fs50', 133)" class="fn">mul12</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 134)" onmouseover="showTip(event, 'fs10', 134)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">2.0</span><span class="pn">]</span><span class="pn">)</span>

<span class="c">//Now, you can see that ADD and MUL are super similar since they both use 2 numbers for calc</span>
<span class="c">//We can merge ADD and MUL together to make the code even more concise.</span>
<span class="c">//Define a generic binary math operator:</span>
<span class="c">// pop the top two elements</span>
<span class="c">// do a binary operation on them</span>
<span class="c">// push the result </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 135)" onmouseover="showTip(event, 'fs51', 135)" class="fn">binary</span> <span onmouseout="hideTip(event, 'fs52', 136)" onmouseover="showTip(event, 'fs52', 136)" class="fn">mathFn</span> <span onmouseout="hideTip(event, 'fs41', 137)" onmouseover="showTip(event, 'fs41', 137)" class="id">stack</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 138)" onmouseover="showTip(event, 'fs53', 138)" class="id">y</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs54', 139)" onmouseover="showTip(event, 'fs54', 139)" class="id">stack&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 140)" onmouseover="showTip(event, 'fs30', 140)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 141)" onmouseover="showTip(event, 'fs41', 141)" class="id">stack</span>    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 142)" onmouseover="showTip(event, 'fs55', 142)" class="id">x</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs56', 143)" onmouseover="showTip(event, 'fs56', 143)" class="id">stack&#39;&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 144)" onmouseover="showTip(event, 'fs30', 144)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs54', 145)" onmouseover="showTip(event, 'fs54', 145)" class="id">stack&#39;</span>  
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 146)" onmouseover="showTip(event, 'fs57', 146)" class="id">z</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs52', 147)" onmouseover="showTip(event, 'fs52', 147)" class="fn">mathFn</span> <span onmouseout="hideTip(event, 'fs55', 148)" onmouseover="showTip(event, 'fs55', 148)" class="id">x</span> <span onmouseout="hideTip(event, 'fs53', 149)" onmouseover="showTip(event, 'fs53', 149)" class="id">y</span>
    <span onmouseout="hideTip(event, 'fs14', 150)" onmouseover="showTip(event, 'fs14', 150)" class="fn">push</span> <span onmouseout="hideTip(event, 'fs57', 151)" onmouseover="showTip(event, 'fs57', 151)" class="id">z</span> <span onmouseout="hideTip(event, 'fs56', 152)" onmouseover="showTip(event, 'fs56', 152)" class="id">stack&#39;&#39;</span>      

<span class="c">//If we want to do add using this generic binary math func:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs58', 153)" onmouseover="showTip(event, 'fs58', 153)" class="id">genericBinaryMath12</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs51', 154)" onmouseover="showTip(event, 'fs51', 154)" class="fn">binary</span> <span class="pn">(</span><span class="o">+</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs35', 155)" onmouseover="showTip(event, 'fs35', 155)" class="id">initialStack</span> <span class="c">//This is same to: let ADD aStack = binary (fun x y -&gt; x + y) aStack</span>
<span class="c">//By using partical func, we have a new way of defining ADD and more:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 156)" onmouseover="showTip(event, 'fs59', 156)" class="fn">ADD</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs51', 157)" onmouseover="showTip(event, 'fs51', 157)" class="fn">binary</span> <span class="pn">(</span><span class="o">+</span><span class="pn">)</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 158)" onmouseover="showTip(event, 'fs60', 158)" class="fn">SUB</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs51', 159)" onmouseover="showTip(event, 'fs51', 159)" class="fn">binary</span> <span class="pn">(</span><span class="o">-</span><span class="pn">)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 160)" onmouseover="showTip(event, 'fs61', 160)" class="id">MUL</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 161)" onmouseover="showTip(event, 'fs62', 161)" class="fn">DIV</span> <span class="o">=</span> <span class="id">___</span>
<span class="c">//It is an amazingly concise and clear way of defining multiple similar functions sharing the same base func</span>
<span class="c">//Does this sounds like class inherantance to you? Yes, but in a more concise way!</span>

<span class="c">//###Now test your code:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 162)" onmouseover="showTip(event, 'fs63', 162)" class="id">div3by2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 163)" onmouseover="showTip(event, 'fs24', 163)" class="id">EMPTY</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs21', 164)" onmouseover="showTip(event, 'fs21', 164)" class="fn">THREE</span><span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 165)" onmouseover="showTip(event, 'fs20', 165)" class="fn">TWO</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 166)" onmouseover="showTip(event, 'fs62', 166)" class="fn">DIV</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 167)" onmouseover="showTip(event, 'fs64', 167)" class="id">sub2from5</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 168)" onmouseover="showTip(event, 'fs24', 168)" class="id">EMPTY</span>  <span class="o">|&gt;</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs65', 169)" onmouseover="showTip(event, 'fs65', 169)" class="id">sub2from5thenadd1</span> <span class="o">=</span> <span class="id">___</span>

<span onmouseout="hideTip(event, 'fs13', 170)" onmouseover="showTip(event, 'fs13', 170)" class="fn">printf</span> <span class="s">&quot;T10...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 171)" onmouseover="showTip(event, 'fs1', 171)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs63', 172)" onmouseover="showTip(event, 'fs63', 172)" class="id">div3by2</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 173)" onmouseover="showTip(event, 'fs10', 173)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">1.5</span><span class="pn">]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 174)" onmouseover="showTip(event, 'fs13', 174)" class="fn">printf</span> <span class="s">&quot;T11...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 175)" onmouseover="showTip(event, 'fs1', 175)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs64', 176)" onmouseover="showTip(event, 'fs64', 176)" class="id">sub2from5</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 177)" onmouseover="showTip(event, 'fs10', 177)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">3.0</span><span class="pn">]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 178)" onmouseover="showTip(event, 'fs13', 178)" class="fn">printf</span> <span class="s">&quot;T12...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 179)" onmouseover="showTip(event, 'fs1', 179)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs65', 180)" onmouseover="showTip(event, 'fs65', 180)" class="id">sub2from5thenadd1</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 181)" onmouseover="showTip(event, 'fs10', 181)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">4.0</span><span class="pn">]</span><span class="pn">)</span>

<span class="c">//Similar to the binary operators, we can define the generic unary operator for things like power **</span>
<span class="c">// pop the top element</span>
<span class="c">// do a unary operation on it</span>
<span class="c">// push the result </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 182)" onmouseover="showTip(event, 'fs66', 182)" class="fn">unary</span> <span onmouseout="hideTip(event, 'fs67', 183)" onmouseover="showTip(event, 'fs67', 183)" class="fn">f</span> <span onmouseout="hideTip(event, 'fs68', 184)" onmouseover="showTip(event, 'fs68', 184)" class="id">stack</span> <span class="o">=</span> 
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 185)" onmouseover="showTip(event, 'fs55', 185)" class="id">x</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs54', 186)" onmouseover="showTip(event, 'fs54', 186)" class="id">stack&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 187)" onmouseover="showTip(event, 'fs30', 187)" class="fn">pop</span> <span class="id">___</span>  
  <span onmouseout="hideTip(event, 'fs14', 188)" onmouseover="showTip(event, 'fs14', 188)" class="fn">push</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs67', 189)" onmouseover="showTip(event, 'fs67', 189)" class="fn">f</span> <span onmouseout="hideTip(event, 'fs55', 190)" onmouseover="showTip(event, 'fs55', 190)" class="id">x</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs54', 191)" onmouseover="showTip(event, 'fs54', 191)" class="id">stack&#39;</span>         

<span class="c">//We can define negative number or square with the unary operator and the partial function</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs69', 192)" onmouseover="showTip(event, 'fs69', 192)" class="fn">NEG</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs66', 193)" onmouseover="showTip(event, 'fs66', 193)" class="fn">unary</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 194)" onmouseover="showTip(event, 'fs15', 194)" class="id">x</span> <span class="k">-&gt;</span> <span class="o">-</span><span onmouseout="hideTip(event, 'fs15', 195)" onmouseover="showTip(event, 'fs15', 195)" class="id">x</span><span class="pn">)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 196)" onmouseover="showTip(event, 'fs70', 196)" class="fn">SQUARE</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs66', 197)" onmouseover="showTip(event, 'fs66', 197)" class="fn">unary</span> <span class="pn">(</span><span class="id">___</span><span class="pn">)</span>

<span class="c">//###Now test your code:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 198)" onmouseover="showTip(event, 'fs71', 198)" class="id">neg3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 199)" onmouseover="showTip(event, 'fs24', 199)" class="id">EMPTY</span>  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs21', 200)" onmouseover="showTip(event, 'fs21', 200)" class="fn">THREE</span><span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 201)" onmouseover="showTip(event, 'fs69', 201)" class="fn">NEG</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 202)" onmouseover="showTip(event, 'fs72', 202)" class="id">square2</span> <span class="o">=</span> <span class="id">___</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 203)" onmouseover="showTip(event, 'fs73', 203)" class="id">squareneg3</span><span class="o">=</span><span class="id">___</span>

<span onmouseout="hideTip(event, 'fs13', 204)" onmouseover="showTip(event, 'fs13', 204)" class="fn">printf</span> <span class="s">&quot;T13...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 205)" onmouseover="showTip(event, 'fs1', 205)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs71', 206)" onmouseover="showTip(event, 'fs71', 206)" class="id">neg3</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 207)" onmouseover="showTip(event, 'fs10', 207)" class="uc">StackContents</span> <span class="pn">[</span><span class="o">-</span><span class="n">3.0</span><span class="pn">]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 208)" onmouseover="showTip(event, 'fs13', 208)" class="fn">printf</span> <span class="s">&quot;T14...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 209)" onmouseover="showTip(event, 'fs1', 209)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs72', 210)" onmouseover="showTip(event, 'fs72', 210)" class="id">square2</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 211)" onmouseover="showTip(event, 'fs10', 211)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">4.0</span><span class="pn">]</span><span class="pn">)</span>
<span onmouseout="hideTip(event, 'fs13', 212)" onmouseover="showTip(event, 'fs13', 212)" class="fn">printf</span> <span class="s">&quot;T15...&quot;</span>
<span onmouseout="hideTip(event, 'fs1', 213)" onmouseover="showTip(event, 'fs1', 213)" class="fn">AssertEquality</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs73', 214)" onmouseover="showTip(event, 'fs73', 214)" class="id">squareneg3</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs10', 215)" onmouseover="showTip(event, 'fs10', 215)" class="uc">StackContents</span> <span class="pn">[</span><span class="n">9.0</span><span class="pn">]</span><span class="pn">)</span>
<span class="c">// ==============================================</span>
<span class="c">// Other core </span>
<span class="c">// ==============================================</span>

<span class="c">/// Pop and show the top value on the stack</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs74', 216)" onmouseover="showTip(event, 'fs74', 216)" class="fn">SHOW</span> <span onmouseout="hideTip(event, 'fs41', 217)" onmouseover="showTip(event, 'fs41', 217)" class="id">stack</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 218)" onmouseover="showTip(event, 'fs15', 218)" class="id">x</span><span class="pn">,</span><span class="id">_</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 219)" onmouseover="showTip(event, 'fs30', 219)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 220)" onmouseover="showTip(event, 'fs41', 220)" class="id">stack</span>
    <span onmouseout="hideTip(event, 'fs5', 221)" onmouseover="showTip(event, 'fs5', 221)" class="fn">printfn</span> <span class="s">&quot;The top of the current stack is </span><span class="pf">%f</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs15', 222)" onmouseover="showTip(event, 'fs15', 222)" class="id">x</span>
    <span class="id">___</span>  <span class="c">// return the same stack</span>

<span class="c">/// Drop the top value on the stack</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs75', 223)" onmouseover="showTip(event, 'fs75', 223)" class="fn">DROP</span> <span onmouseout="hideTip(event, 'fs41', 224)" onmouseover="showTip(event, 'fs41', 224)" class="id">stack</span> <span class="o">=</span> 
    <span class="k">let</span> <span class="id">_</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs76', 225)" onmouseover="showTip(event, 'fs76', 225)" class="id">s</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 226)" onmouseover="showTip(event, 'fs30', 226)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 227)" onmouseover="showTip(event, 'fs41', 227)" class="id">stack</span>  <span class="c">//pop the top of the stack</span>
    <span class="id">___</span>                    <span class="c">//return the rest</span>

<span class="c">/// Duplicate the top value on the stack</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 228)" onmouseover="showTip(event, 'fs77', 228)" class="fn">DUP</span> <span onmouseout="hideTip(event, 'fs41', 229)" onmouseover="showTip(event, 'fs41', 229)" class="id">stack</span> <span class="o">=</span> 
    <span class="c">// get the top of the stack</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 230)" onmouseover="showTip(event, 'fs42', 230)" class="id">x</span><span class="pn">,</span><span class="id">_</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 231)" onmouseover="showTip(event, 'fs30', 231)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 232)" onmouseover="showTip(event, 'fs41', 232)" class="id">stack</span>  
    <span class="c">// push it onto the stack again</span>
    <span class="id">___</span> 

<span class="c">/// Swap the top two values</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 233)" onmouseover="showTip(event, 'fs78', 233)" class="fn">SWAP</span> <span onmouseout="hideTip(event, 'fs41', 234)" onmouseover="showTip(event, 'fs41', 234)" class="id">stack</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 235)" onmouseover="showTip(event, 'fs15', 235)" class="id">x</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs76', 236)" onmouseover="showTip(event, 'fs76', 236)" class="id">s</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 237)" onmouseover="showTip(event, 'fs30', 237)" class="fn">pop</span> <span onmouseout="hideTip(event, 'fs41', 238)" onmouseover="showTip(event, 'fs41', 238)" class="id">stack</span>  
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 239)" onmouseover="showTip(event, 'fs79', 239)" class="id">y</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs80', 240)" onmouseover="showTip(event, 'fs80', 240)" class="id">s&#39;</span> <span class="o">=</span> <span class="id">___</span>
    <span onmouseout="hideTip(event, 'fs14', 241)" onmouseover="showTip(event, 'fs14', 241)" class="fn">push</span> <span onmouseout="hideTip(event, 'fs79', 242)" onmouseover="showTip(event, 'fs79', 242)" class="id">y</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs14', 243)" onmouseover="showTip(event, 'fs14', 243)" class="fn">push</span> <span onmouseout="hideTip(event, 'fs15', 244)" onmouseover="showTip(event, 'fs15', 244)" class="id">x</span> <span onmouseout="hideTip(event, 'fs80', 245)" onmouseover="showTip(event, 'fs80', 245)" class="id">s&#39;</span><span class="pn">)</span> 


<span class="k">let</span> <span onmouseout="hideTip(event, 'fs81', 246)" onmouseover="showTip(event, 'fs81', 246)" class="fn">CUBE</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs77', 247)" onmouseover="showTip(event, 'fs77', 247)" class="fn">DUP</span> <span class="o">&gt;</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs77', 248)" onmouseover="showTip(event, 'fs77', 248)" class="fn">DUP</span> <span class="o">&gt;</span><span class="pn">&gt;</span> <span class="id">___</span><span class="o">&gt;</span><span class="pn">&gt;</span> <span class="id">___</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs82', 249)" onmouseover="showTip(event, 'fs82', 249)" class="fn">SUM_NUMBERS_UPTO</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs77', 250)" onmouseover="showTip(event, 'fs77', 250)" class="fn">DUP</span>                     <span class="c">// n  </span>
    <span class="o">&gt;</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs19', 251)" onmouseover="showTip(event, 'fs19', 251)" class="fn">ONE</span> <span class="o">&gt;</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs59', 252)" onmouseover="showTip(event, 'fs59', 252)" class="fn">ADD</span>           <span class="c">// n+1</span>
    <span class="o">&gt;</span><span class="pn">&gt;</span> <span class="id">___</span>                 <span class="c">// n(n+1)</span>
    <span class="o">&gt;</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs20', 253)" onmouseover="showTip(event, 'fs20', 253)" class="fn">TWO</span> <span class="o">&gt;</span><span class="pn">&gt;</span> <span class="id">___</span>   <span class="c">// n(n+1) / 2</span>


<span class="c">//Can you see how easy it is to build new functions from already defined functions? The code also looks very clearn and easy to read</span>

<span class="c">//###now test your code</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs83', 254)" onmouseover="showTip(event, 'fs83', 254)" class="id">myStack</span><span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 255)" onmouseover="showTip(event, 'fs24', 255)" class="id">EMPTY</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 256)" onmouseover="showTip(event, 'fs19', 256)" class="fn">ONE</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 257)" onmouseover="showTip(event, 'fs20', 257)" class="fn">TWO</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs21', 258)" onmouseover="showTip(event, 'fs21', 258)" class="fn">THREE</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs84', 259)" onmouseover="showTip(event, 'fs84', 259)" class="id">stackTop</span><span class="o">=</span> <span onmouseout="hideTip(event, 'fs83', 260)" onmouseover="showTip(event, 'fs83', 260)" class="id">myStack</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs74', 261)" onmouseover="showTip(event, 'fs74', 261)" class="fn">SHOW</span> 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs85', 262)" onmouseover="showTip(event, 'fs85', 262)" class="id">stackTopEleCubed</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs83', 263)" onmouseover="showTip(event, 'fs83', 263)" class="id">myStack</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs81', 264)" onmouseover="showTip(event, 'fs81', 264)" class="fn">CUBE</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs74', 265)" onmouseover="showTip(event, 'fs74', 265)" class="fn">SHOW</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs86', 266)" onmouseover="showTip(event, 'fs86', 266)" class="id">stackSum</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs83', 267)" onmouseover="showTip(event, 'fs83', 267)" class="id">myStack</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs82', 268)" onmouseover="showTip(event, 'fs82', 268)" class="fn">SUM_NUMBERS_UPTO</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs74', 269)" onmouseover="showTip(event, 'fs74', 269)" class="fn">SHOW</span>

<span class="c">//Referenced F# for fun and profit</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val AssertEquality : &#39;a * &#39;a -&gt; unit (requires equality)</div>
<div class="tip" id="fs2">val inputTuple : &#39;a * &#39;a (requires equality)</div>
<div class="tip" id="fs3">val a : &#39;a (requires equality)</div>
<div class="tip" id="fs4">val b : &#39;a (requires equality)</div>
<div class="tip" id="fs5">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs6">type Stacktest = float list</div>
<div class="tip" id="fs7">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />--------------------<br />type float = System.Double<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float</div>
<div class="tip" id="fs8">type &#39;T list = List&lt;&#39;T&gt;</div>
<div class="tip" id="fs9">type Stack = | StackContents of float list</div>
<div class="tip" id="fs10">union case Stack.StackContents: float list -&gt; Stack</div>
<div class="tip" id="fs11">val testStack1 : Stack</div>
<div class="tip" id="fs12">val contents : float list</div>
<div class="tip" id="fs13">val printf : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs14">val push : x:float -&gt; Stack -&gt; Stack</div>
<div class="tip" id="fs15">val x : float</div>
<div class="tip" id="fs16">val emptyStack : Stack</div>
<div class="tip" id="fs17">val stackWith1test : Stack</div>
<div class="tip" id="fs18">val stackWith2test : Stack</div>
<div class="tip" id="fs19">val ONE : (Stack -&gt; Stack)</div>
<div class="tip" id="fs20">val TWO : (Stack -&gt; Stack)</div>
<div class="tip" id="fs21">val THREE : (Stack -&gt; Stack)</div>
<div class="tip" id="fs22">val FOUR : obj</div>
<div class="tip" id="fs23">val FIVE : obj</div>
<div class="tip" id="fs24">val EMPTY : Stack</div>
<div class="tip" id="fs25">val stackWith1 : Stack</div>
<div class="tip" id="fs26">val stackWith2 : Stack</div>
<div class="tip" id="fs27">val stackWith3 : Stack</div>
<div class="tip" id="fs28">val result123 : Stack</div>
<div class="tip" id="fs29">val result312 : Stack</div>
<div class="tip" id="fs30">val pop : Stack -&gt; &#39;a * &#39;b</div>
<div class="tip" id="fs31">val top : float</div>
<div class="tip" id="fs32">val rest : float list</div>
<div class="tip" id="fs33">val newStack : Stack</div>
<div class="tip" id="fs34">val failwith : message:string -&gt; &#39;T</div>
<div class="tip" id="fs35">val initialStack : Stack</div>
<div class="tip" id="fs36">val popped1 : obj</div>
<div class="tip" id="fs37">val poppedStack : Stack</div>
<div class="tip" id="fs38">val popped2 : obj</div>
<div class="tip" id="fs39">val poppedStack2 : obj</div>
<div class="tip" id="fs40">val ADDtest : stack:Stack -&gt; Stack</div>
<div class="tip" id="fs41">val stack : Stack</div>
<div class="tip" id="fs42">val x : obj</div>
<div class="tip" id="fs43">val s : Stack</div>
<div class="tip" id="fs44">val y : obj</div>
<div class="tip" id="fs45">val s2 : Stack</div>
<div class="tip" id="fs46">val result : float</div>
<div class="tip" id="fs47">val add12 : Stack</div>
<div class="tip" id="fs48">val MULtest : stack:&#39;a -&gt; (Stack -&gt; Stack)</div>
<div class="tip" id="fs49">val stack : &#39;a</div>
<div class="tip" id="fs50">val mul12 : (Stack -&gt; Stack)</div>
<div class="tip" id="fs51">val binary : mathFn:(&#39;a -&gt; &#39;b -&gt; float) -&gt; stack:Stack -&gt; Stack</div>
<div class="tip" id="fs52">val mathFn : (&#39;a -&gt; &#39;b -&gt; float)</div>
<div class="tip" id="fs53">val y : &#39;b</div>
<div class="tip" id="fs54">val stack&#39; : Stack</div>
<div class="tip" id="fs55">val x : &#39;a</div>
<div class="tip" id="fs56">val stack&#39;&#39; : Stack</div>
<div class="tip" id="fs57">val z : float</div>
<div class="tip" id="fs58">val genericBinaryMath12 : Stack</div>
<div class="tip" id="fs59">val ADD : (Stack -&gt; Stack)</div>
<div class="tip" id="fs60">val SUB : (Stack -&gt; Stack)</div>
<div class="tip" id="fs61">val MUL : obj</div>
<div class="tip" id="fs62">val DIV : (Stack -&gt; Stack)</div>
<div class="tip" id="fs63">val div3by2 : Stack</div>
<div class="tip" id="fs64">val sub2from5 : Stack</div>
<div class="tip" id="fs65">val sub2from5thenadd1 : Stack</div>
<div class="tip" id="fs66">val unary : f:(&#39;a -&gt; float) -&gt; stack:&#39;b -&gt; Stack</div>
<div class="tip" id="fs67">val f : (&#39;a -&gt; float)</div>
<div class="tip" id="fs68">val stack : &#39;b</div>
<div class="tip" id="fs69">val NEG : (Stack -&gt; Stack)</div>
<div class="tip" id="fs70">val SQUARE : (obj -&gt; Stack)</div>
<div class="tip" id="fs71">val neg3 : Stack</div>
<div class="tip" id="fs72">val square2 : Stack</div>
<div class="tip" id="fs73">val squareneg3 : Stack</div>
<div class="tip" id="fs74">val SHOW : stack:Stack -&gt; &#39;a<br /><em><br /><br />&#160;Pop and show the top value on the stack</em></div>
<div class="tip" id="fs75">val DROP : stack:Stack -&gt; &#39;a<br /><em><br /><br />&#160;Drop the top value on the stack</em></div>
<div class="tip" id="fs76">val s : obj</div>
<div class="tip" id="fs77">val DUP : stack:Stack -&gt; &#39;a<br /><em><br /><br />&#160;Duplicate the top value on the stack</em></div>
<div class="tip" id="fs78">val SWAP : stack:Stack -&gt; Stack<br /><em><br /><br />&#160;Swap the top two values</em></div>
<div class="tip" id="fs79">val y : float</div>
<div class="tip" id="fs80">val s&#39; : Stack</div>
<div class="tip" id="fs81">val CUBE : (Stack -&gt; Stack)</div>
<div class="tip" id="fs82">val SUM_NUMBERS_UPTO : (Stack -&gt; Stack)</div>
<div class="tip" id="fs83">val myStack : Stack</div>
<div class="tip" id="fs84">val stackTop : obj</div>
<div class="tip" id="fs85">val stackTopEleCubed : obj</div>
<div class="tip" id="fs86">val stackSum : obj</div>

