<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="id">Diagnostics</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="id">IO</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="id">Reflection</span>

<span class="k">module</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="m">ValueOption</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="fn">mapNone</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="fn">initializer</span> <span class="o">=</span>
        <span class="k">function</span>
        <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="uc">ValueSome</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="id">value</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="uc">ValueSome</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="id">value</span>
        <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="uc">ValueNone</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 16)" onmouseover="showTip(event, 'fs7', 16)" class="fn">initializer</span> <span class="pn">(</span><span class="pn">)</span>

<span class="c">/// &lt;summary&gt;</span>
<span class="c">/// Considers a path to load for satisfying an assembly ref and loads it</span>
<span class="c">/// if the file exists and version is sufficient.</span>
<span class="c">/// &lt;/summary&gt;</span>
<span class="c">/// &lt;param name=&quot;filePath&quot;&gt;Path to consider for load&lt;/param&gt;</span>
<span class="c">/// &lt;param name=&quot;minimumVersion&quot;&gt;Minimum version to consider&lt;/param&gt;</span>
<span class="c">/// &lt;returns&gt;loaded assembly voption&lt;/returns&gt;</span>
<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="fn">probe</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="id">filePath</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="rt">string</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="id">minimumVersion</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs15', 21)" onmouseover="showTip(event, 'fs15', 21)" class="rt">Version</span><span class="pn">)</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs16', 22)" onmouseover="showTip(event, 'fs16', 22)" class="rt">Assembly</span> <span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="vt">voption</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs18', 24)" onmouseover="showTip(event, 'fs18', 24)" class="rt">File</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs19', 25)" onmouseover="showTip(event, 'fs19', 25)" class="id">Exists</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 26)" onmouseover="showTip(event, 'fs12', 26)" class="id">filePath</span><span class="pn">)</span> <span class="k">then</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 27)" onmouseover="showTip(event, 'fs20', 27)" class="id">name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 28)" onmouseover="showTip(event, 'fs21', 28)" class="rt">AssemblyName</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs22', 29)" onmouseover="showTip(event, 'fs22', 29)" class="id">GetAssemblyName</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="id">filePath</span><span class="pn">)</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="id">name</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs23', 32)" onmouseover="showTip(event, 'fs23', 32)" class="id">Version</span> <span class="o">&gt;</span><span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="id">minimumVersion</span>
        <span class="k">then</span> <span onmouseout="hideTip(event, 'fs8', 34)" onmouseover="showTip(event, 'fs8', 34)" class="uc">ValueSome</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs16', 35)" onmouseover="showTip(event, 'fs16', 35)" class="rt">Assembly</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs24', 36)" onmouseover="showTip(event, 'fs24', 36)" class="id">Load</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs20', 37)" onmouseover="showTip(event, 'fs20', 37)" class="id">name</span><span class="pn">)</span><span class="pn">)</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs10', 38)" onmouseover="showTip(event, 'fs10', 38)" class="uc">ValueNone</span>
    <span class="k">else</span> <span onmouseout="hideTip(event, 'fs10', 39)" onmouseover="showTip(event, 'fs10', 39)" class="uc">ValueNone</span>

<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs25', 40)" onmouseover="showTip(event, 'fs25', 40)" class="fn">loadFromCurrentDirectory</span> <span onmouseout="hideTip(event, 'fs26', 41)" onmouseover="showTip(event, 'fs26', 41)" class="id">fileName</span> <span onmouseout="hideTip(event, 'fs27', 42)" onmouseover="showTip(event, 'fs27', 42)" class="id">version</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs28', 43)" onmouseover="showTip(event, 'fs28', 43)" class="rt">Debug</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs29', 44)" onmouseover="showTip(event, 'fs29', 44)" class="id">WriteLine</span><span class="pn">(</span>$&quot;<span class="id">Considering</span> <span class="pn">{</span><span onmouseout="hideTip(event, 'fs26', 45)" onmouseover="showTip(event, 'fs26', 45)" class="id">fileName</span><span class="pn">}</span><span class="s">&quot;)</span>
<span class="s">    probe(fileName, version)</span>

<span class="s">let private loadFromExecutingAssembly fileName version =</span>
<span class="s">    match Assembly.GetExecutingAssembly().Location with</span>
<span class="s">    | null -&gt; ValueNone</span>
<span class="s">    | assemblyPath -&gt;</span>
<span class="s">        let probingPath = Path.Combine(Path.GetDirectoryName(assemblyPath), fileName)</span>
<span class="s">        Debug.WriteLine($&quot;</span><span class="id">Considering</span> <span class="pn">{</span><span class="id">probingPath</span><span class="pn">}</span> <span class="id">based</span> <span class="id">on</span> <span class="id">ExecutingAssembly</span><span class="s">&quot;)</span>
<span class="s">        probe(probingPath, version)</span>

<span class="s">let private loadFromAppDomain fileName version =</span>
<span class="s">    let probingPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName)</span>
<span class="s">    Debug.WriteLine($&quot;</span><span class="id">Considering</span> <span class="pn">{</span><span class="id">probingPath</span><span class="pn">}</span> <span class="id">based</span> <span class="id">on</span> <span class="id">BaseDirectory</span><span class="s">&quot;)</span>
<span class="s">    probe(probingPath, version)</span>

<span class="s">let private loadFromRequestingAssemblyPath version fileName assemblyPath =</span>
<span class="s">     let probingPath = Path.Combine(Path.GetDirectoryName(assemblyPath), fileName)</span>
<span class="s">     Debug.WriteLine($&quot;</span><span class="id">Considering</span> <span class="pn">{</span><span class="id">probingPath</span><span class="pn">}</span> <span class="id">based</span> <span class="id">on</span> <span class="id">RequestingAssembly</span><span class="s">&quot;)</span>
<span class="s">     probe(probingPath, version)</span>

<span class="s">let private onAssemblyResolve(args: ResolveEventArgs) : Assembly =</span>
<span class="s">    // apply any existing policy</span>
<span class="s">    let referenceName = new AssemblyName(AppDomain.CurrentDomain.ApplyPolicy(args.Name))</span>
<span class="s">    let version = referenceName.Version</span>
<span class="s">    let fileName = referenceName.Name + &quot;</span><span class="pn">.</span><span class="id">dll</span><span class="s">&quot;</span>

<span class="s">    args.RequestingAssembly</span>
<span class="s">    |&gt; ValueOption.ofObj</span>
<span class="s">    |&gt; ValueOption.map (fun assemblyPath -&gt; assemblyPath.Location)</span>
<span class="s">    |&gt; ValueOption.bind (loadFromRequestingAssemblyPath version fileName)</span>
<span class="s">    |&gt; ValueOption.mapNone (fun () -&gt; loadFromAppDomain fileName version)</span>
<span class="s">    |&gt; ValueOption.mapNone (fun () -&gt; loadFromExecutingAssembly fileName version)</span>
<span class="s">    |&gt; ValueOption.mapNone (fun () -&gt; loadFromCurrentDirectory fileName version)</span>
<span class="s">    |&gt; ValueOption.defaultValue null</span>

<span class="s">[&lt;CompiledName(&quot;</span><span class="id">Enable</span><span class="s">&quot;)&gt;]</span>
<span class="s">let public enable() = AppDomain.CurrentDomain.add_AssemblyResolve(fun _ args -&gt; onAssemblyResolve(args))</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Diagnostics</div>
<div class="tip" id="fs3">namespace System.IO</div>
<div class="tip" id="fs4">namespace System.Reflection</div>
<div class="tip" id="fs5">Multiple items<br />module ValueOption<br /><br />from Microsoft.FSharp.Core<br /><br />--------------------<br />[&lt;Struct&gt;]<br />type ValueOption&lt;&#39;T&gt; =<br />&#160;&#160;| ValueNone<br />&#160;&#160;| ValueSome of &#39;T<br />&#160;&#160;&#160;&#160;member IsNone : bool<br />&#160;&#160;&#160;&#160;member IsSome : bool<br />&#160;&#160;&#160;&#160;member Value : &#39;T<br />&#160;&#160;&#160;&#160;static member Some : value:&#39;T -&gt; &#39;T voption<br />&#160;&#160;&#160;&#160;static member None : &#39;T voption<br />&#160;&#160;&#160;&#160;static member op_Implicit : value:&#39;T -&gt; &#39;T voption</div>
<div class="tip" id="fs6">val private mapNone : initializer:(unit -&gt; &#39;a voption) -&gt; _arg1:&#39;a voption -&gt; &#39;a voption</div>
<div class="tip" id="fs7">val initializer : (unit -&gt; &#39;a voption)</div>
<div class="tip" id="fs8">union case ValueOption.ValueSome: &#39;T -&gt; ValueOption&lt;&#39;T&gt;</div>
<div class="tip" id="fs9">val value : &#39;a</div>
<div class="tip" id="fs10">union case ValueOption.ValueNone: ValueOption&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">val private probe : filePath:string * minimumVersion:Version -&gt; Assembly voption<br /><em><br /><br />&#160;&lt;summary&gt;<br />&#160;Considers a path to load for satisfying an assembly ref and loads it<br />&#160;if the file exists and version is sufficient.<br />&#160;&lt;/summary&gt;<br />&#160;&lt;param name=&quot;filePath&quot;&gt;Path to consider for load&lt;/param&gt;<br />&#160;&lt;param name=&quot;minimumVersion&quot;&gt;Minimum version to consider&lt;/param&gt;<br />&#160;&lt;returns&gt;loaded assembly voption&lt;/returns&gt;</em></div>
<div class="tip" id="fs12">val filePath : string</div>
<div class="tip" id="fs13">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = String</div>
<div class="tip" id="fs14">val minimumVersion : Version</div>
<div class="tip" id="fs15">Multiple items<br />type Version =<br />&#160;&#160;new : unit -&gt; Version + 4 overloads<br />&#160;&#160;member Build : int<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareTo : version:obj -&gt; int + 1 overload<br />&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member Major : int<br />&#160;&#160;member MajorRevision : int16<br />&#160;&#160;member Minor : int<br />&#160;&#160;member MinorRevision : int16<br />&#160;&#160;...<br /><br />--------------------<br />Version() : Version<br />Version(version: string) : Version<br />Version(major: int, minor: int) : Version<br />Version(major: int, minor: int, build: int) : Version<br />Version(major: int, minor: int, build: int, revision: int) : Version</div>
<div class="tip" id="fs16">type Assembly =<br />&#160;&#160;member CodeBase : string<br />&#160;&#160;member CreateInstance : typeName:string -&gt; obj + 2 overloads<br />&#160;&#160;member CustomAttributes : IEnumerable&lt;CustomAttributeData&gt;<br />&#160;&#160;member DefinedTypes : IEnumerable&lt;TypeInfo&gt;<br />&#160;&#160;member EntryPoint : MethodInfo<br />&#160;&#160;member Equals : o:obj -&gt; bool<br />&#160;&#160;member EscapedCodeBase : string<br />&#160;&#160;member ExportedTypes : IEnumerable&lt;Type&gt;<br />&#160;&#160;member FullName : string<br />&#160;&#160;member GetCustomAttributes : inherit:bool -&gt; obj[] + 1 overload<br />&#160;&#160;...</div>
<div class="tip" id="fs17">[&lt;Struct&gt;]<br />type &#39;T voption = ValueOption&lt;&#39;T&gt;</div>
<div class="tip" id="fs18">type File =<br />&#160;&#160;static member AppendAllLines : path:string * contents:IEnumerable&lt;string&gt; -&gt; unit + 1 overload<br />&#160;&#160;static member AppendAllLinesAsync : path:string * contents:IEnumerable&lt;string&gt; * ?cancellationToken:CancellationToken -&gt; Task + 1 overload<br />&#160;&#160;static member AppendAllText : path:string * contents:string -&gt; unit + 1 overload<br />&#160;&#160;static member AppendAllTextAsync : path:string * contents:string * ?cancellationToken:CancellationToken -&gt; Task + 1 overload<br />&#160;&#160;static member AppendText : path:string -&gt; StreamWriter<br />&#160;&#160;static member Copy : sourceFileName:string * destFileName:string -&gt; unit + 1 overload<br />&#160;&#160;static member Create : path:string -&gt; FileStream + 2 overloads<br />&#160;&#160;static member CreateText : path:string -&gt; StreamWriter<br />&#160;&#160;static member Decrypt : path:string -&gt; unit<br />&#160;&#160;static member Delete : path:string -&gt; unit<br />&#160;&#160;...</div>
<div class="tip" id="fs19">File.Exists(path: string) : bool</div>
<div class="tip" id="fs20">val name : AssemblyName</div>
<div class="tip" id="fs21">Multiple items<br />type AssemblyName =<br />&#160;&#160;new : unit -&gt; AssemblyName + 1 overload<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CodeBase : string with get, set<br />&#160;&#160;member ContentType : AssemblyContentType with get, set<br />&#160;&#160;member CultureInfo : CultureInfo with get, set<br />&#160;&#160;member CultureName : string with get, set<br />&#160;&#160;member EscapedCodeBase : string<br />&#160;&#160;member Flags : AssemblyNameFlags with get, set<br />&#160;&#160;member FullName : string<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;...<br /><br />--------------------<br />AssemblyName() : AssemblyName<br />AssemblyName(assemblyName: string) : AssemblyName</div>
<div class="tip" id="fs22">AssemblyName.GetAssemblyName(assemblyFile: string) : AssemblyName</div>
<div class="tip" id="fs23"></div>
<div class="tip" id="fs24">Assembly.Load(rawAssembly: byte []) : Assembly<br />Assembly.Load(assemblyRef: AssemblyName) : Assembly<br />Assembly.Load(assemblyString: string) : Assembly<br />Assembly.Load(rawAssembly: byte [], rawSymbolStore: byte []) : Assembly</div>
<div class="tip" id="fs25">val private loadFromCurrentDirectory : fileName:&#39;a -&gt; version:&#39;b -&gt; unit</div>
<div class="tip" id="fs26">val fileName : &#39;a</div>
<div class="tip" id="fs27">val version : &#39;b</div>
<div class="tip" id="fs28">type Debug =<br />&#160;&#160;static member Assert : condition:bool -&gt; unit + 3 overloads<br />&#160;&#160;static member AutoFlush : bool with get, set<br />&#160;&#160;static member Close : unit -&gt; unit<br />&#160;&#160;static member Fail : message:string -&gt; unit + 1 overload<br />&#160;&#160;static member Flush : unit -&gt; unit<br />&#160;&#160;static member Indent : unit -&gt; unit<br />&#160;&#160;static member IndentLevel : int with get, set<br />&#160;&#160;static member IndentSize : int with get, set<br />&#160;&#160;static member Print : message:string -&gt; unit + 1 overload<br />&#160;&#160;static member SetProvider : provider:DebugProvider -&gt; DebugProvider<br />&#160;&#160;...</div>
<div class="tip" id="fs29">Debug.WriteLine(value: obj) : unit<br />Debug.WriteLine(message: string) : unit<br />Debug.WriteLine(message: string, category: string) : unit<br />Debug.WriteLine(format: string, [&lt;ParamArray&gt;] args: obj []) : unit<br />Debug.WriteLine(value: obj, category: string) : unit</div>

