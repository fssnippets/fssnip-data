<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
<span class="l">9: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span class="m">AsyncSeq</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="fn">forkThrottled</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">t</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">n</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="id">capacity</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="vt">int</span><span class="pn">)</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">xs</span><span class="pn">:</span><span class="id">AsyncSeq</span><span class="pn">&lt;</span><span class="id">&#39;</span><span class="id">t</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="id">pcs</span> <span class="o">=</span> <span class="pn">[</span><span class="k">for</span> <span class="id">_</span> <span class="k">in</span> <span class="n">1</span> <span class="o">..</span> <span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="id">n</span> <span class="k">-&gt;</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="d">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="id">Collections</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="id">Concurrent</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="id">BlockingCollection</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">t</span><span class="pn">&gt;</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="id">capacity</span><span class="pn">)</span><span class="pn">]</span>
        <span onmouseout="hideTip(event, 'fs6', 13)" onmouseover="showTip(event, 'fs6', 13)" class="id">pcs</span> 
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="m">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="id">map</span><span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="id">buf</span> <span class="k">-&gt;</span> 
                <span class="id">asyncSeq</span> <span class="pn">{</span>
                <span class="k">for</span> <span class="id">x</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="id">buf</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="id">GetConsumingEnumerable</span><span class="pn">(</span><span class="pn">)</span> <span class="k">do</span>
                    <span class="k">yield</span> <span class="id">x</span>
                <span class="pn">}</span><span class="pn">)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val forkThrottled&lt;&#39;t&gt; : n:int -&gt; capacity:int -&gt; xs:obj -&gt; obj list</div>
<div class="tip" id="fs2">val n : int</div>
<div class="tip" id="fs3">val capacity : int</div>
<div class="tip" id="fs4">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs5">val xs : obj</div>
<div class="tip" id="fs6">val pcs : System.Collections.Concurrent.BlockingCollection&lt;&#39;t&gt; list</div>
<div class="tip" id="fs7">namespace System</div>
<div class="tip" id="fs8">namespace System.Collections</div>
<div class="tip" id="fs9">namespace System.Collections.Concurrent</div>
<div class="tip" id="fs10">Multiple items<br />type BlockingCollection&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; BlockingCollection&lt;&#39;T&gt; + 3 overloads<br />&#160;&#160;member Add : item:&#39;T -&gt; unit + 1 overload<br />&#160;&#160;member BoundedCapacity : int<br />&#160;&#160;member CompleteAdding : unit -&gt; unit<br />&#160;&#160;member CopyTo : array:&#39;T[] * index:int -&gt; unit<br />&#160;&#160;member Count : int<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member GetConsumingEnumerable : unit -&gt; IEnumerable&lt;&#39;T&gt; + 1 overload<br />&#160;&#160;member IsAddingCompleted : bool<br />&#160;&#160;member IsCompleted : bool<br />&#160;&#160;...<br /><br />--------------------<br />System.Collections.Concurrent.BlockingCollection() : System.Collections.Concurrent.BlockingCollection&lt;&#39;T&gt;<br />System.Collections.Concurrent.BlockingCollection(boundedCapacity: int) : System.Collections.Concurrent.BlockingCollection&lt;&#39;T&gt;<br />System.Collections.Concurrent.BlockingCollection(collection: System.Collections.Concurrent.IProducerConsumerCollection&lt;&#39;T&gt;) : System.Collections.Concurrent.BlockingCollection&lt;&#39;T&gt;<br />System.Collections.Concurrent.BlockingCollection(collection: System.Collections.Concurrent.IProducerConsumerCollection&lt;&#39;T&gt;, boundedCapacity: int) : System.Collections.Concurrent.BlockingCollection&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;&#160;&#160;interface IReadOnlyList&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IReadOnlyCollection&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IEnumerable<br />&#160;&#160;&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;member GetReverseIndex : rank:int * offset:int -&gt; int<br />&#160;&#160;&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;&#160;&#160;member Head : &#39;T<br />&#160;&#160;&#160;&#160;member IsEmpty : bool<br />&#160;&#160;&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;&#160;&#160;member Length : int<br />&#160;&#160;&#160;&#160;...</div>
<div class="tip" id="fs12">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list</div>
<div class="tip" id="fs13">val buf : System.Collections.Concurrent.BlockingCollection&lt;&#39;t&gt;</div>
<div class="tip" id="fs14">System.Collections.Concurrent.BlockingCollection.GetConsumingEnumerable() : System.Collections.Generic.IEnumerable&lt;&#39;t&gt;<br />System.Collections.Concurrent.BlockingCollection.GetConsumingEnumerable(cancellationToken: System.Threading.CancellationToken) : System.Collections.Generic.IEnumerable&lt;&#39;t&gt;</div>

