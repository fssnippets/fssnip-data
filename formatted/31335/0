<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
<span class="l">245: </span>
<span class="l">246: </span>
<span class="l">247: </span>
<span class="l">248: </span>
<span class="l">249: </span>
<span class="l">250: </span>
<span class="l">251: </span>
<span class="l">252: </span>
<span class="l">253: </span>
<span class="l">254: </span>
<span class="l">255: </span>
<span class="l">256: </span>
<span class="l">257: </span>
<span class="l">258: </span>
<span class="l">259: </span>
<span class="l">260: </span>
<span class="l">261: </span>
<span class="l">262: </span>
<span class="l">263: </span>
<span class="l">264: </span>
<span class="l">265: </span>
<span class="l">266: </span>
<span class="l">267: </span>
<span class="l">268: </span>
<span class="l">269: </span>
<span class="l">270: </span>
<span class="l">271: </span>
<span class="l">272: </span>
<span class="l">273: </span>
<span class="l">274: </span>
<span class="l">275: </span>
<span class="l">276: </span>
<span class="l">277: </span>
<span class="l">278: </span>
<span class="l">279: </span>
<span class="l">280: </span>
<span class="l">281: </span>
<span class="l">282: </span>
<span class="l">283: </span>
<span class="l">284: </span>
<span class="l">285: </span>
<span class="l">286: </span>
<span class="l">287: </span>
<span class="l">288: </span>
<span class="l">289: </span>
<span class="l">290: </span>
<span class="l">291: </span>
<span class="l">292: </span>
<span class="l">293: </span>
<span class="l">294: </span>
<span class="l">295: </span>
<span class="l">296: </span>
<span class="l">297: </span>
<span class="l">298: </span>
<span class="l">299: </span>
<span class="l">300: </span>
<span class="l">301: </span>
<span class="l">302: </span>
<span class="l">303: </span>
<span class="l">304: </span>
<span class="l">305: </span>
<span class="l">306: </span>
<span class="l">307: </span>
<span class="l">308: </span>
<span class="l">309: </span>
<span class="l">310: </span>
<span class="l">311: </span>
<span class="l">312: </span>
<span class="l">313: </span>
<span class="l">314: </span>
<span class="l">315: </span>
<span class="l">316: </span>
<span class="l">317: </span>
<span class="l">318: </span>
<span class="l">319: </span>
<span class="l">320: </span>
<span class="l">321: </span>
<span class="l">322: </span>
<span class="l">323: </span>
<span class="l">324: </span>
<span class="l">325: </span>
<span class="l">326: </span>
<span class="l">327: </span>
<span class="l">328: </span>
<span class="l">329: </span>
<span class="l">330: </span>
<span class="l">331: </span>
<span class="l">332: </span>
<span class="l">333: </span>
<span class="l">334: </span>
<span class="l">335: </span>
<span class="l">336: </span>
<span class="l">337: </span>
<span class="l">338: </span>
<span class="l">339: </span>
<span class="l">340: </span>
<span class="l">341: </span>
<span class="l">342: </span>
<span class="l">343: </span>
<span class="l">344: </span>
<span class="l">345: </span>
<span class="l">346: </span>
<span class="l">347: </span>
<span class="l">348: </span>
<span class="l">349: </span>
<span class="l">350: </span>
<span class="l">351: </span>
<span class="l">352: </span>
<span class="l">353: </span>
<span class="l">354: </span>
<span class="l">355: </span>
<span class="l">356: </span>
<span class="l">357: </span>
<span class="l">358: </span>
<span class="l">359: </span>
<span class="l">360: </span>
<span class="l">361: </span>
<span class="l">362: </span>
<span class="l">363: </span>
<span class="l">364: </span>
<span class="l">365: </span>
<span class="l">366: </span>
<span class="l">367: </span>
<span class="l">368: </span>
<span class="l">369: </span>
<span class="l">370: </span>
<span class="l">371: </span>
<span class="l">372: </span>
<span class="l">373: </span>
<span class="l">374: </span>
<span class="l">375: </span>
<span class="l">376: </span>
<span class="l">377: </span>
<span class="l">378: </span>
<span class="l">379: </span>
<span class="l">380: </span>
<span class="l">381: </span>
<span class="l">382: </span>
<span class="l">383: </span>
<span class="l">384: </span>
<span class="l">385: </span>
<span class="l">386: </span>
<span class="l">387: </span>
<span class="l">388: </span>
<span class="l">389: </span>
<span class="l">390: </span>
<span class="l">391: </span>
<span class="l">392: </span>
<span class="l">393: </span>
<span class="l">394: </span>
<span class="l">395: </span>
<span class="l">396: </span>
<span class="l">397: </span>
<span class="l">398: </span>
<span class="l">399: </span>
<span class="l">400: </span>
<span class="l">401: </span>
<span class="l">402: </span>
<span class="l">403: </span>
<span class="l">404: </span>
<span class="l">405: </span>
<span class="l">406: </span>
<span class="l">407: </span>
<span class="l">408: </span>
<span class="l">409: </span>
<span class="l">410: </span>
<span class="l">411: </span>
<span class="l">412: </span>
<span class="l">413: </span>
<span class="l">414: </span>
<span class="l">415: </span>
<span class="l">416: </span>
<span class="l">417: </span>
<span class="l">418: </span>
<span class="l">419: </span>
<span class="l">420: </span>
<span class="l">421: </span>
<span class="l">422: </span>
<span class="l">423: </span>
<span class="l">424: </span>
<span class="l">425: </span>
<span class="l">426: </span>
<span class="l">427: </span>
<span class="l">428: </span>
<span class="l">429: </span>
<span class="l">430: </span>
<span class="l">431: </span>
<span class="l">432: </span>
<span class="l">433: </span>
<span class="l">434: </span>
<span class="l">435: </span>
<span class="l">436: </span>
<span class="l">437: </span>
<span class="l">438: </span>
<span class="l">439: </span>
<span class="l">440: </span>
<span class="l">441: </span>
<span class="l">442: </span>
<span class="l">443: </span>
<span class="l">444: </span>
<span class="l">445: </span>
<span class="l">446: </span>
<span class="l">447: </span>
<span class="l">448: </span>
<span class="l">449: </span>
<span class="l">450: </span>
<span class="l">451: </span>
<span class="l">452: </span>
<span class="l">453: </span>
<span class="l">454: </span>
<span class="l">455: </span>
<span class="l">456: </span>
<span class="l">457: </span>
<span class="l">458: </span>
<span class="l">459: </span>
<span class="l">460: </span>
<span class="l">461: </span>
<span class="l">462: </span>
<span class="l">463: </span>
<span class="l">464: </span>
<span class="l">465: </span>
<span class="l">466: </span>
<span class="l">467: </span>
<span class="l">468: </span>
<span class="l">469: </span>
<span class="l">470: </span>
<span class="l">471: </span>
<span class="l">472: </span>
<span class="l">473: </span>
<span class="l">474: </span>
<span class="l">475: </span>
<span class="l">476: </span>
<span class="l">477: </span>
<span class="l">478: </span>
<span class="l">479: </span>
<span class="l">480: </span>
<span class="l">481: </span>
<span class="l">482: </span>
<span class="l">483: </span>
<span class="l">484: </span>
<span class="l">485: </span>
<span class="l">486: </span>
<span class="l">487: </span>
<span class="l">488: </span>
<span class="l">489: </span>
<span class="l">490: </span>
<span class="l">491: </span>
<span class="l">492: </span>
<span class="l">493: </span>
<span class="l">494: </span>
<span class="l">495: </span>
<span class="l">496: </span>
<span class="l">497: </span>
<span class="l">498: </span>
<span class="l">499: </span>
<span class="l">500: </span>
<span class="l">501: </span>
<span class="l">502: </span>
<span class="l">503: </span>
<span class="l">504: </span>
<span class="l">505: </span>
<span class="l">506: </span>
<span class="l">507: </span>
<span class="l">508: </span>
<span class="l">509: </span>
<span class="l">510: </span>
<span class="l">511: </span>
<span class="l">512: </span>
<span class="l">513: </span>
<span class="l">514: </span>
<span class="l">515: </span>
<span class="l">516: </span>
<span class="l">517: </span>
<span class="l">518: </span>
<span class="l">519: </span>
<span class="l">520: </span>
<span class="l">521: </span>
<span class="l">522: </span>
<span class="l">523: </span>
<span class="l">524: </span>
<span class="l">525: </span>
<span class="l">526: </span>
<span class="l">527: </span>
<span class="l">528: </span>
<span class="l">529: </span>
<span class="l">530: </span>
<span class="l">531: </span>
<span class="l">532: </span>
<span class="l">533: </span>
<span class="l">534: </span>
<span class="l">535: </span>
<span class="l">536: </span>
<span class="l">537: </span>
<span class="l">538: </span>
<span class="l">539: </span>
<span class="l">540: </span>
<span class="l">541: </span>
<span class="l">542: </span>
<span class="l">543: </span>
<span class="l">544: </span>
<span class="l">545: </span>
<span class="l">546: </span>
<span class="l">547: </span>
<span class="l">548: </span>
<span class="l">549: </span>
<span class="l">550: </span>
<span class="l">551: </span>
<span class="l">552: </span>
<span class="l">553: </span>
<span class="l">554: </span>
<span class="l">555: </span>
<span class="l">556: </span>
<span class="l">557: </span>
<span class="l">558: </span>
<span class="l">559: </span>
<span class="l">560: </span>
<span class="l">561: </span>
<span class="l">562: </span>
<span class="l">563: </span>
<span class="l">564: </span>
<span class="l">565: </span>
<span class="l">566: </span>
<span class="l">567: </span>
<span class="l">568: </span>
<span class="l">569: </span>
<span class="l">570: </span>
<span class="l">571: </span>
<span class="l">572: </span>
<span class="l">573: </span>
<span class="l">574: </span>
<span class="l">575: </span>
<span class="l">576: </span>
<span class="l">577: </span>
<span class="l">578: </span>
<span class="l">579: </span>
<span class="l">580: </span>
<span class="l">581: </span>
<span class="l">582: </span>
<span class="l">583: </span>
<span class="l">584: </span>
<span class="l">585: </span>
<span class="l">586: </span>
<span class="l">587: </span>
<span class="l">588: </span>
<span class="l">589: </span>
<span class="l">590: </span>
<span class="l">591: </span>
<span class="l">592: </span>
<span class="l">593: </span>
<span class="l">594: </span>
<span class="l">595: </span>
<span class="l">596: </span>
<span class="l">597: </span>
<span class="l">598: </span>
<span class="l">599: </span>
<span class="l">600: </span>
<span class="l">601: </span>
<span class="l">602: </span>
<span class="l">603: </span>
<span class="l">604: </span>
<span class="l">605: </span>
<span class="l">606: </span>
<span class="l">607: </span>
<span class="l">608: </span>
<span class="l">609: </span>
<span class="l">610: </span>
<span class="l">611: </span>
<span class="l">612: </span>
<span class="l">613: </span>
<span class="l">614: </span>
<span class="l">615: </span>
<span class="l">616: </span>
<span class="l">617: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="id">Page</span>
<span class="n">1</span>
<span class="k">of</span> <span class="n">18</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Overview</span>
<span class="c">//</span>
<span class="c">// Below is a set of exercises designed to get you familiar</span>
<span class="c">// with F#. By the time you&#39;re done, you&#39;ll have a basic</span>
<span class="c">// understanding of the syntax of F# and learn a little more</span>
<span class="c">// about functional programming in general.</span>
<span class="c">//</span>
<span class="c">// Answering Problems</span>
<span class="c">//</span>
<span class="c">// This is where the fun begins! Each dashed section contains an</span>
<span class="c">// example designed to teach you a lesson about the F# language.</span>
<span class="c">// If you highlight the code in an example and execute it (use</span>
<span class="c">// Ctrl+Enter or the run button) it will initially fail. Your</span>
<span class="c">// job is to fill in the blanks to make it pass. With each</span>
<span class="c">// passing section, you&#39;ll learn more about F#, and add another</span>
<span class="c">// weapon to your F# programming arsenal.</span>
<span class="c">//</span>
<span class="c">// Start by highlighitng the section below and running it. Once</span>
<span class="c">// you see it fail, replace the __ with 2 to make it pass.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- about asserts -------------------------------------------</span>
<span class="k">let</span> <span class="id">expected_value</span> <span class="o">=</span> <span class="n">1</span> <span class="o">+</span> <span class="n">1</span>
<span class="k">let</span> <span class="id">actual_value</span> <span class="o">=</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">expected_value</span> <span class="id">actual_value</span>
<span class="c">//Easy, right? Try the next one.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- more about asserts --------------------------------------</span>
<span class="id">AssertEquality</span> <span class="s">&quot;foo&quot;</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Let</span>
<span class="c">//</span>
<span class="c">// The let keyword is one of the most fundamental parts of F#.</span>
<span class="c">// You&#39;ll use it in almost every line of F# code you write, so</span>
<span class="c">// let&#39;s get to know it well! (no pun intended)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- let binds a name to a value -----------------------------</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="id">AssertEquality</span> <span class="id">x</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- let infers the type of values when it can ---------------</span>
<span class="c">(* In F#, values created with let are inferred to have a type like</span>
<span class="c">&quot;int&quot; for integer values, &quot;string&quot; for text values, and &quot;bool&quot;</span>
<span class="c">for true or false values. *)</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="k">let</span> <span class="id">typeOfX</span> <span class="o">=</span> <span class="id">x</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">typeOfX</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">int</span><span class="pn">&gt;</span>
<span class="k">let</span> <span class="id">y</span> <span class="o">=</span> <span class="s">&quot;a string&quot;</span>
<span class="k">let</span> <span class="id">expectedType</span> <span class="o">=</span> <span class="id">y</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">expectedType</span> <span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="id">typeof</span><span class="pn">&lt;</span><span class="id">FILL_ME_IN</span><span class="pn">&gt;</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- you can make the types explicit -------------------------</span>
<span class="k">let</span> <span class="pn">(</span><span class="id">x</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="id">int</span><span class="pn">)</span> <span class="o">=</span> <span class="n">42</span>
<span class="k">let</span> <span class="id">typeOfX</span> <span class="o">=</span> <span class="id">x</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">y</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="id">string</span> <span class="o">=</span> <span class="s">&quot;forty two&quot;</span>
<span class="k">let</span> <span class="id">typeOfY</span> <span class="o">=</span> <span class="id">y</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">typeOfX</span> <span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="id">typeof</span><span class="pn">&lt;</span><span class="id">FILL_ME_IN</span><span class="pn">&gt;</span>
<span class="id">AssertEquality</span> <span class="id">typeOfY</span> <span onmouseout="hideTip(event, 'fs1', 7)" onmouseover="showTip(event, 'fs1', 7)" class="id">typeof</span><span class="pn">&lt;</span><span class="id">FILL_ME_IN</span><span class="pn">&gt;</span>
<span class="c">(* You don&#39;t usually need to provide explicit type annotations</span>
<span class="c">types for local varaibles, but type annotations can come in</span>
<span class="c">handy in other contexts as you&#39;ll see later. *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- floats and ints -----------------------------------------</span>
<span class="c">(* Depending on your background, you may be surprised to learn that</span>
<span class="c">in F#, integers and floating point numbers are different types.</span>
<span class="c">In other words, the following is true. *)</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="n">20</span>
<span class="k">let</span> <span class="id">typeOfX</span> <span class="o">=</span> <span class="id">x</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">y</span> <span class="o">=</span> <span class="n">20.0</span>
<span class="k">let</span> <span class="id">typeOfY</span> <span class="o">=</span> <span class="id">y</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
<span class="c">//you don&#39;t need to modify these</span>
<span class="id">AssertEquality</span> <span class="id">typeOfX</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="id">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs2', 9)" onmouseover="showTip(event, 'fs2', 9)" class="id">int</span><span class="pn">&gt;</span>
<span class="id">AssertEquality</span> <span class="id">typeOfY</span> <span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="id">typeof</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="id">float</span><span class="pn">&gt;</span>
<span class="c">//If you&#39;re coming from another .NET language, float is F# slang for</span>
<span class="c">//the double type.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- modifying the value of variables ------------------------</span>
<span class="k">let</span> <span class="k">mutable</span> <span class="id">x</span> <span class="o">=</span> <span class="n">100</span>
<span class="id">x</span> <span class="k">&lt;-</span> <span class="n">200</span>
<span class="id">AssertEquality</span> <span class="id">x</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- you can&#39;t modify a value if it isn&#39;t mutable ------------</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="c">//What happens if you try to uncomment and run the following line of code?</span>
<span class="c">//(look at the output in the output window)</span>
<span class="c">//x &lt;- 100</span>
<span class="c">//NOTE: Although you can&#39;t modify immutable values, it is</span>
<span class="c">// possible to reuse the name of a value in some cases</span>
<span class="c">// using &quot;shadowing&quot;.</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="n">100</span>
<span class="id">AssertEquality</span> <span class="id">x</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Functions</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen how to bind a name to a value with let,</span>
<span class="c">// you&#39;ll learn to use the let keyword to create functions.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating functions with let -----------------------------</span>
<span class="c">(* By default, F# is whitespace sensitive. For functions, this</span>
<span class="c">means that the last line of a function is its return value,</span>
<span class="c">and the body of a function is denoted by indentation. *)</span>
<span class="k">let</span> <span class="id">add</span> <span class="id">x</span> <span class="id">y</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">+</span> <span class="id">y</span>
<span class="k">let</span> <span class="id">result1</span> <span class="o">=</span> <span class="id">add</span> <span class="n">2</span> <span class="n">2</span>
<span class="k">let</span> <span class="id">result2</span> <span class="o">=</span> <span class="id">add</span> <span class="n">5</span> <span class="n">2</span>
<span class="id">AssertEquality</span> <span class="id">result1</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result2</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- nesting functions ---------------------------------------</span>
<span class="k">let</span> <span class="id">quadruple</span> <span class="id">x</span> <span class="o">=</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="id">double</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="pn">*</span> <span class="n">2</span>
<span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="id">double</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs5', 14)" onmouseover="showTip(event, 'fs5', 14)" class="id">double</span><span class="pn">(</span><span class="id">x</span><span class="pn">)</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">quadruple</span> <span class="n">4</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- adding type annotations ---------------------------------</span>
<span class="c">(* Sometimes you need to help F#&#39;s type inference system out with</span>
<span class="c">an explicit type annotation *)</span>
<span class="k">let</span> <span class="id">sayItLikeAnAuctioneer</span> <span class="pn">(</span><span class="id">text</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs3', 15)" onmouseover="showTip(event, 'fs3', 15)" class="id">string</span><span class="pn">)</span> <span class="o">=</span>
<span class="id">text</span><span class="pn">.</span><span class="id">Replace</span><span class="pn">(</span><span class="s">&quot; &quot;</span><span class="pn">,</span> <span class="s">&quot;&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">auctioneered</span> <span class="o">=</span> <span class="id">sayItLikeAnAuctioneer</span> <span class="s">&quot;going once going twice sold to</span>
<span class="s">the lady in red&quot;</span>
<span class="id">AssertEquality</span> <span class="id">auctioneered</span> <span class="id">__</span>
<span class="c">//TRY IT: What happens if you remove the type annotation on text?</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- variables in the parent scope can be accessed -----------</span>
<span class="k">let</span> <span class="id">suffix</span> <span class="o">=</span> <span class="s">&quot;!!!&quot;</span>
<span class="k">let</span> <span class="id">caffinate</span> <span class="pn">(</span><span class="id">text</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs3', 16)" onmouseover="showTip(event, 'fs3', 16)" class="id">string</span><span class="pn">)</span> <span class="o">=</span>
<span class="k">let</span> <span class="id">exclaimed</span> <span class="o">=</span> <span class="id">text</span> <span class="o">+</span> <span class="id">suffix</span>
<span class="k">let</span> <span class="id">yelled</span> <span class="o">=</span> <span class="id">exclaimed</span><span class="pn">.</span><span class="id">ToUpper</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">yelled</span><span class="pn">.</span><span class="id">Trim</span><span class="pn">(</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">caffinatedReply</span> <span class="o">=</span> <span class="id">caffinate</span> <span class="s">&quot;hello there&quot;</span>
<span class="id">AssertEquality</span> <span class="id">caffinatedReply</span> <span class="id">__</span>
<span class="c">(* NOTE: Accessing the suffix variable in the nested caffinate function</span>
<span class="c">is known as a closure.</span>
<span class="c">See http://en.wikipedia.org/wiki/Closure_(computer_science)</span>
<span class="c">for more about about closure. *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About the Order of Evaluation</span>
<span class="c">//</span>
<span class="c">// Sometimes you&#39;ll need to be explicit about the order in which</span>
<span class="c">// functions are evaluated. F# offers a couple mechanisms for</span>
<span class="c">// doing this.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- using parenthesis to control the order of operation -----</span>
<span class="k">let</span> <span class="id">add</span> <span class="id">x</span> <span class="id">y</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">+</span> <span class="id">y</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">add</span> <span class="pn">(</span><span class="id">add</span> <span class="n">5</span> <span class="n">8</span><span class="pn">)</span> <span class="pn">(</span><span class="id">add</span> <span class="n">1</span> <span class="n">1</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">(* TRY IT: What happens if you remove the parensthesis?*)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- the backward pipe operator can also help with grouping --</span>
<span class="k">let</span> <span class="id">add</span> <span class="id">x</span> <span class="id">y</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">+</span> <span class="id">y</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 17)" onmouseover="showTip(event, 'fs5', 17)" class="id">double</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="pn">*</span> <span class="n">2</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="id">double</span> <span class="o">&lt;|</span> <span class="id">add</span> <span class="n">5</span> <span class="n">8</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Unit</span>
<span class="c">//</span>
<span class="c">// The unit type is a special type that represents the lack of</span>
<span class="c">// a value. It&#39;s similar to void in other languages, but unit</span>
<span class="c">// is actually considered to be a type in F#.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- unit is used when there is no return value --------------</span>
<span class="k">let</span> <span class="id">sendData</span> <span class="id">data</span> <span class="o">=</span>
<span class="c">//...pretend we are sending the data to the server...</span>
<span class="pn">(</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">x</span> <span class="o">=</span> <span class="id">sendData</span> <span class="s">&quot;data&quot;</span>
<span class="id">AssertEquality</span> <span class="id">x</span> <span class="id">__</span> <span class="c">//Don&#39;t overthink this</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- parameterless fucntions take unit as their argument -----</span>
<span class="k">let</span> <span class="id">sayHello</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
<span class="s">&quot;hello&quot;</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">sayHello</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Tuples</span>
<span class="c">//</span>
<span class="c">// Tuples are used to easily group together values in F#. They&#39;re</span>
<span class="c">// another fundamental construct of the language.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating tuples -----</span>
<span class="k">let</span> <span class="id">items</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">,</span> <span class="s">&quot;dog&quot;</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">items</span> <span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">,</span> <span class="id">__</span><span class="pn">)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- accessing tuple elements --------------------------------</span>
<span class="k">let</span> <span class="id">items</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">,</span> <span class="s">&quot;dog&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">fruit</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="id">fst</span> <span class="id">items</span>
<span class="k">let</span> <span class="id">animal</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 20)" onmouseover="showTip(event, 'fs7', 20)" class="id">snd</span> <span class="id">items</span>
<span class="id">AssertEquality</span> <span class="id">fruit</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">animal</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- accessing tuple elements with pattern matching ----------</span>
<span class="c">(* fst and snd are useful in some situations, but they only work with</span>
<span class="c">tuples containing two elements. It&#39;s usually better to use a</span>
<span class="c">technique called pattern matching to access the values of a tuple.</span>
<span class="c">Pattern matching works with tuples of any arity, and it allows you to</span>
<span class="c">simultaneously break apart the tuple while assigning a name to each</span>
<span class="c">value. Here&#39;s an example. *)</span>
<span class="k">let</span> <span class="id">items</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">,</span> <span class="s">&quot;dog&quot;</span><span class="pn">,</span> <span class="s">&quot;Mustang&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">fruit</span><span class="pn">,</span> <span class="id">animal</span><span class="pn">,</span> <span class="id">car</span> <span class="o">=</span> <span class="id">items</span>
<span class="id">AssertEquality</span> <span class="id">fruit</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">animal</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">car</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- ignoring values when pattern matching -------------------</span>
<span class="k">let</span> <span class="id">items</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">,</span> <span class="s">&quot;dog&quot;</span><span class="pn">,</span> <span class="s">&quot;Mustang&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">_</span><span class="pn">,</span> <span class="id">animal</span><span class="pn">,</span> <span class="id">_</span> <span class="o">=</span> <span class="id">items</span>
<span class="id">AssertEquality</span> <span class="id">animal</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- using tuples to return multiple values from a function --</span>
<span class="k">let</span> <span class="id">squareAndCube</span> <span class="id">x</span> <span class="o">=</span>
<span class="pn">(</span><span class="id">x</span> <span class="o">**</span> <span class="n">2.0</span><span class="pn">,</span> <span class="id">x</span> <span class="o">**</span> <span class="n">3.0</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">squared</span><span class="pn">,</span> <span class="id">cubed</span> <span class="o">=</span> <span class="id">squareAndCube</span> <span class="n">3.0</span>
<span class="id">AssertEquality</span> <span class="id">squared</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">cubed</span> <span class="id">__</span>
<span class="c">(* THINK ABOUT IT: Is there really more than one return value?</span>
<span class="c">What type does the squareAndCube function</span>
<span class="c">return? *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- the truth behind multiple return values ------------------</span>
<span class="k">let</span> <span class="id">squareAndCube</span> <span class="id">x</span> <span class="o">=</span>
<span class="pn">(</span><span class="id">x</span> <span class="o">**</span> <span class="n">2.0</span><span class="pn">,</span> <span class="id">x</span> <span class="o">**</span> <span class="n">3.0</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">squareAndCube</span> <span class="n">3.0</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Branching</span>
<span class="c">//</span>
<span class="c">// Branching is used to tell a program to conditionally perform</span>
<span class="c">// an operation. It&#39;s another fundamental part of F#.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- basic if statements -------------------------------------</span>
<span class="k">let</span> <span class="id">isEven</span> <span class="id">x</span> <span class="o">=</span>
<span class="k">if</span> <span class="id">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span>
<span class="s">&quot;it&#39;s even!&quot;</span>
<span class="k">else</span>
<span class="s">&quot;it&#39;s odd!&quot;</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">isEven</span> <span class="n">2</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- if statements return values -----------------------------</span>
<span class="c">(* In languages like C++, Java, and C# if statements do not yield</span>
<span class="c">results; they can only cause side effects. If statements in F#</span>
<span class="c">return values due to F#&#39;s functional programming roots. *)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span>
<span class="k">if</span> <span class="n">2</span> <span class="o">=</span> <span class="n">3</span> <span class="k">then</span>
<span class="s">&quot;something is REALLY wrong&quot;</span>
<span class="k">else</span>
<span class="s">&quot;math is workng!&quot;</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- branching with pattern matching -------------------------</span>
<span class="k">let</span> <span class="id">isApple</span> <span class="id">x</span> <span class="o">=</span>
<span class="k">match</span> <span class="id">x</span> <span class="k">with</span>
<span class="pn">|</span> <span class="s">&quot;apple&quot;</span> <span class="k">-&gt;</span> <span class="k">true</span>
<span class="pn">|</span> <span class="id">_</span> <span class="k">-&gt;</span> <span class="k">false</span>
<span class="k">let</span> <span class="id">result1</span> <span class="o">=</span> <span class="id">isApple</span> <span class="s">&quot;apple&quot;</span>
<span class="k">let</span> <span class="id">result2</span> <span class="o">=</span> <span class="id">isApple</span> <span class="s">&quot;&quot;</span>
<span class="id">AssertEquality</span> <span class="id">result1</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result2</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- using tuples with if statements quickly becomes clumsy --</span>
<span class="k">let</span> <span class="id">getDinner</span> <span class="id">x</span> <span class="o">=</span>
<span class="k">let</span> <span class="id">name</span><span class="pn">,</span> <span class="id">foodChoice</span> <span class="o">=</span> <span class="id">x</span>
<span class="k">if</span> <span class="id">foodChoice</span> <span class="o">=</span> <span class="s">&quot;veggies&quot;</span> <span class="o">||</span> <span class="id">foodChoice</span> <span class="o">=</span><span class="s">&quot;fish&quot;</span> <span class="o">||</span>
<span class="id">foodChoice</span> <span class="o">=</span> <span class="s">&quot;chicken&quot;</span> <span class="k">then</span>
<span onmouseout="hideTip(event, 'fs8', 21)" onmouseover="showTip(event, 'fs8', 21)" class="id">sprintf</span> <span class="s">&quot;%s doesn&#39;t want red meat&quot;</span> <span class="id">name</span>
<span class="k">else</span>
<span onmouseout="hideTip(event, 'fs8', 22)" onmouseover="showTip(event, 'fs8', 22)" class="id">sprintf</span> <span class="s">&quot;%s wants &#39;em some %s&quot;</span> <span class="id">name</span> <span class="id">foodChoice</span>
<span class="k">let</span> <span class="id">person1</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;Chris&quot;</span><span class="pn">,</span> <span class="s">&quot;steak&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">person2</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;Dave&quot;</span><span class="pn">,</span> <span class="s">&quot;veggies&quot;</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="pn">(</span><span class="id">getDinner</span> <span class="id">person1</span><span class="pn">)</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="pn">(</span><span class="id">getDinner</span> <span class="id">person2</span><span class="pn">)</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- pattern matching with tuples is much nicer --------------</span>
<span class="k">let</span> <span class="id">getDinner</span> <span class="id">x</span> <span class="o">=</span>
<span class="k">match</span> <span class="id">x</span> <span class="k">with</span>
<span class="pn">|</span> <span class="pn">(</span><span class="id">name</span><span class="pn">,</span> <span class="s">&quot;veggies&quot;</span><span class="pn">)</span>
<span class="pn">|</span> <span class="pn">(</span><span class="id">name</span><span class="pn">,</span> <span class="s">&quot;fish&quot;</span><span class="pn">)</span>
<span class="pn">|</span> <span class="pn">(</span><span class="id">name</span><span class="pn">,</span> <span class="s">&quot;chicken&quot;</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="id">sprintf</span> <span class="s">&quot;%s doesn&#39;t want red meat&quot;</span> <span class="id">name</span>
<span class="pn">|</span> <span class="pn">(</span><span class="id">name</span><span class="pn">,</span> <span class="id">foodChoice</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 24)" onmouseover="showTip(event, 'fs8', 24)" class="id">sprintf</span> <span class="s">&quot;%s wants &#39;em some %s&quot;</span> <span class="id">name</span> <span class="id">foodChoice</span>
<span class="k">let</span> <span class="id">person1</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;Bob&quot;</span><span class="pn">,</span> <span class="s">&quot;fish&quot;</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">person2</span> <span class="o">=</span> <span class="pn">(</span><span class="s">&quot;Sally&quot;</span><span class="pn">,</span> <span class="s">&quot;Burger&quot;</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="pn">(</span><span class="id">getDinner</span> <span class="id">person1</span><span class="pn">)</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="pn">(</span><span class="id">getDinner</span> <span class="id">person2</span><span class="pn">)</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Lists</span>
<span class="c">//</span>
<span class="c">// Lists are important building blocks that you&#39;ll use frequently</span>
<span class="c">// in F# programming. They are used to group arbitrarily large</span>
<span class="c">// sequences of values. It&#39;s very common to store values in a</span>
<span class="c">// list and perform operations across each value in the</span>
<span class="c">// list.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating lists ------------------------------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 25)" onmouseover="showTip(event, 'fs9', 25)" class="id">list</span> <span class="o">=</span> <span class="pn">[</span><span class="s">&quot;apple&quot;</span><span class="pn">;</span> <span class="s">&quot;pear&quot;</span><span class="pn">;</span> <span class="s">&quot;grape&quot;</span><span class="pn">;</span> <span class="s">&quot;peach&quot;</span><span class="pn">]</span>
<span class="c">//Note: The list data type in F# is a singly linked list,</span>
<span class="c">// so indexing elements is O(n).</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 26)" onmouseover="showTip(event, 'fs9', 26)" class="id">list</span><span class="pn">.</span><span class="id">Head</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 27)" onmouseover="showTip(event, 'fs9', 27)" class="id">list</span><span class="pn">.</span><span class="id">Tail</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 28)" onmouseover="showTip(event, 'fs9', 28)" class="id">list</span><span class="pn">.</span><span class="id">Length</span> <span class="id">__</span>
<span class="c">(* .NET developers coming from other languages may be surprised</span>
<span class="c">that F#&#39;s list type is not the same as the base class library&#39;s</span>
<span class="c">List&lt;T&gt;. In other words, the following assertion is true *)</span>
<span class="k">let</span> <span class="id">dotNetList</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs10', 29)" onmouseover="showTip(event, 'fs10', 29)" class="id">List</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs3', 30)" onmouseover="showTip(event, 'fs3', 30)" class="id">string</span><span class="pn">&gt;</span><span class="pn">(</span><span class="pn">)</span>
<span class="c">//you don&#39;t need to modify the following line</span>
<span class="id">AssertInequality</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs9', 31)" onmouseover="showTip(event, 'fs9', 31)" class="id">list</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span><span class="pn">)</span> <span class="pn">(</span><span class="id">dotNetList</span><span class="pn">.</span><span class="id">GetType</span><span class="pn">(</span><span class="pn">)</span><span class="pn">)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- building new lists---------------------------------------</span>
<span class="k">let</span> <span class="id">first</span> <span class="o">=</span> <span class="pn">[</span><span class="s">&quot;grape&quot;</span><span class="pn">;</span> <span class="s">&quot;peach&quot;</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">second</span> <span class="o">=</span> <span class="s">&quot;pear&quot;</span> <span class="o">::</span> <span class="id">first</span>
<span class="k">let</span> <span class="id">third</span> <span class="o">=</span> <span class="s">&quot;apple&quot;</span> <span class="o">::</span> <span class="id">second</span>
<span class="c">//Note: &quot;::&quot; is known as &quot;cons&quot;</span>
<span class="id">AssertEquality</span> <span class="pn">[</span><span class="s">&quot;apple&quot;</span><span class="pn">;</span> <span class="s">&quot;pear&quot;</span><span class="pn">;</span> <span class="s">&quot;grape&quot;</span><span class="pn">;</span> <span class="s">&quot;peach&quot;</span><span class="pn">]</span> <span class="id">third</span>
<span class="id">AssertEquality</span> <span class="id">second</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">first</span> <span class="id">__</span>
<span class="c">//What happens if you uncomment the following?</span>
<span class="c">//first.Head &lt;- &quot;apple&quot;</span>
<span class="c">//first.Tail &lt;- [&quot;peach&quot;; &quot;pear&quot;]</span>
<span class="c">//THINK ABOUT IT: Can you change the contents of a list once it</span>
<span class="c">// has been created?</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- concatenating lists -------------------------------------</span>
<span class="k">let</span> <span class="id">first</span> <span class="o">=</span> <span class="pn">[</span><span class="s">&quot;apple&quot;</span><span class="pn">;</span> <span class="s">&quot;pear&quot;</span><span class="pn">;</span> <span class="s">&quot;grape&quot;</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">second</span> <span class="o">=</span> <span class="id">first</span> <span class="id">@</span> <span class="pn">[</span><span class="s">&quot;peach&quot;</span><span class="pn">]</span>
<span class="id">AssertEquality</span> <span class="id">first</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">second</span> <span class="id">__</span>
<span class="c">(* THINK ABOUT IT: In general, what performs better for building lists,</span>
<span class="c">:: or @? Why?</span>
<span class="c">Hint: There is no way to modify &quot;first&quot; in the above example. It&#39;s</span>
<span class="c">immutable. With that in mind, what does the @ function have to do in</span>
<span class="c">order to append [&quot;peach&quot;] to &quot;first&quot; to create &quot;second&quot;? *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating lists with a range------------------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 32)" onmouseover="showTip(event, 'fs9', 32)" class="id">list</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">4</span><span class="pn">]</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 33)" onmouseover="showTip(event, 'fs9', 33)" class="id">list</span><span class="pn">.</span><span class="id">Head</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 34)" onmouseover="showTip(event, 'fs9', 34)" class="id">list</span><span class="pn">.</span><span class="id">Tail</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating lists with comprehensions-----------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 35)" onmouseover="showTip(event, 'fs9', 35)" class="id">list</span> <span class="o">=</span> <span class="pn">[</span><span class="k">for</span> <span class="id">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">4</span> <span class="k">do</span> <span class="k">yield</span> <span class="id">i</span> <span class="pn">]</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 36)" onmouseover="showTip(event, 'fs9', 36)" class="id">list</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- comprehensions with conditions --------------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 37)" onmouseover="showTip(event, 'fs9', 37)" class="id">list</span> <span class="o">=</span> <span class="pn">[</span><span class="k">for</span> <span class="id">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span>
<span class="k">if</span> <span class="id">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span class="id">i</span> <span class="pn">]</span>
<span class="id">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 38)" onmouseover="showTip(event, 'fs9', 38)" class="id">list</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- transforming lists with map -----------------------------</span>
<span class="k">let</span> <span class="id">square</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="pn">*</span> <span class="id">x</span>
<span class="k">let</span> <span class="id">original</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 39)" onmouseover="showTip(event, 'fs10', 39)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 40)" onmouseover="showTip(event, 'fs11', 40)" class="id">map</span> <span class="id">square</span> <span class="id">original</span>
<span class="id">AssertEquality</span> <span class="id">original</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- filtering lists with where ------------------------------</span>
<span class="k">let</span> <span class="id">isEven</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>
<span class="k">let</span> <span class="id">original</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 41)" onmouseover="showTip(event, 'fs10', 41)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 42)" onmouseover="showTip(event, 'fs12', 42)" class="id">filter</span> <span class="id">isEven</span> <span class="id">original</span>
<span class="id">AssertEquality</span> <span class="id">original</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- dividing lists with partition ---------------------------</span>
<span class="k">let</span> <span class="id">isOdd</span> <span class="id">x</span> <span class="o">=</span>
<span onmouseout="hideTip(event, 'fs13', 43)" onmouseover="showTip(event, 'fs13', 43)" class="id">not</span><span class="pn">(</span><span class="id">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">original</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">result1</span><span class="pn">,</span> <span class="id">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 44)" onmouseover="showTip(event, 'fs10', 44)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="id">partition</span> <span class="id">isOdd</span> <span class="id">original</span>
<span class="id">AssertEquality</span> <span class="id">result1</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result2</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">(* Note: There are many other useful methods in the List module. Check</span>
<span class="c">them</span>
<span class="c">via intellisense in Visual Studio by typing &#39;.&#39; after List, or online</span>
<span class="c">at</span>
<span class="c">http://msdn.microsoft.com/en-us/library/ee353738.aspx *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Pipelining</span>
<span class="c">//</span>
<span class="c">// The forward pipe operator is one of the most commonly used</span>
<span class="c">// symbols in F# programming. You can use it combine operations</span>
<span class="c">// on lists and other data structures in a readable way.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- square even numbers with separate statementes -----------</span>
<span class="k">let</span> <span class="id">square</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="pn">*</span> <span class="id">x</span>
<span class="k">let</span> <span class="id">isEven</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>
<span class="c">(* One way to combine operations is by using separate statements.</span>
<span class="c">However, this is can be clumsy since you have to name each result. *)</span>
<span class="k">let</span> <span class="id">numbers</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">evens</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 46)" onmouseover="showTip(event, 'fs10', 46)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 47)" onmouseover="showTip(event, 'fs12', 47)" class="id">filter</span> <span class="id">isEven</span> <span class="id">numbers</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 48)" onmouseover="showTip(event, 'fs10', 48)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 49)" onmouseover="showTip(event, 'fs11', 49)" class="id">map</span> <span class="id">square</span> <span class="id">evens</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- square even numbers with parens -------------------------</span>
<span class="c">(* You can avoid this problem by using parens to pass the result of one</span>
<span class="c">funciton to another. This can be difficult to read since you have to</span>
<span class="c">start from the innermost function and work your way out. *)</span>
<span class="k">let</span> <span class="id">numbers</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 50)" onmouseover="showTip(event, 'fs10', 50)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 51)" onmouseover="showTip(event, 'fs11', 51)" class="id">map</span> <span class="id">square</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs10', 52)" onmouseover="showTip(event, 'fs10', 52)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 53)" onmouseover="showTip(event, 'fs12', 53)" class="id">filter</span> <span class="id">isEven</span> <span class="id">numbers</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- square even numbers with the pipeline operator ---------</span>
<span class="c">(* In F#, you can use the pipeline operator to get the benefit of the</span>
<span class="c">parens style with the readablity of the statement style. *)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span>
<span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 54)" onmouseover="showTip(event, 'fs10', 54)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 55)" onmouseover="showTip(event, 'fs12', 55)" class="id">filter</span> <span class="id">isEven</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 56)" onmouseover="showTip(event, 'fs10', 56)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 57)" onmouseover="showTip(event, 'fs11', 57)" class="id">map</span> <span class="id">square</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- how the pipe operator is defined ------------------------</span>
<span class="k">let</span> <span class="pn">(</span><span class="o">|&gt;</span><span class="pn">)</span> <span class="id">x</span> <span class="id">y</span> <span class="o">=</span>
<span class="id">y</span> <span class="id">x</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span>
<span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 58)" onmouseover="showTip(event, 'fs10', 58)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 59)" onmouseover="showTip(event, 'fs12', 59)" class="id">filter</span> <span class="id">isEven</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 60)" onmouseover="showTip(event, 'fs10', 60)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 61)" onmouseover="showTip(event, 'fs11', 61)" class="id">map</span> <span class="id">square</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Arrays</span>
<span class="c">//</span>
<span class="c">// Like lists, arrays are another basic container type in F#.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating arrays -----------------------------------------</span>
<span class="k">let</span> <span class="id">fruits</span> <span class="o">=</span> <span class="pn">[|</span> <span class="s">&quot;apple&quot;</span><span class="pn">;</span> <span class="s">&quot;pear&quot;</span><span class="pn">;</span> <span class="s">&quot;peach&quot;</span><span class="pn">|]</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">0</span><span class="pn">]</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">1</span><span class="pn">]</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">2</span><span class="pn">]</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- arrays are mutable --------------------------------------</span>
<span class="k">let</span> <span class="id">fruits</span> <span class="o">=</span> <span class="pn">[|</span> <span class="s">&quot;apple&quot;</span><span class="pn">;</span> <span class="s">&quot;pear&quot;</span> <span class="pn">|]</span>
<span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">1</span><span class="pn">]</span> <span class="k">&lt;-</span> <span class="s">&quot;peach&quot;</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- you can create arrays with comprehensions ---------------</span>
<span class="k">let</span> <span class="id">numbers</span> <span class="o">=</span>
<span class="pn">[|</span> <span class="k">for</span> <span class="id">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span>
<span class="k">if</span> <span class="id">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span class="id">i</span> <span class="pn">|]</span>
<span class="id">AssertEquality</span> <span class="id">numbers</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- you can also perform operations on arrays ---------------</span>
<span class="k">let</span> <span class="id">cube</span> <span class="id">x</span> <span class="o">=</span>
<span class="id">x</span> <span class="pn">*</span> <span class="id">x</span> <span class="pn">*</span> <span class="id">x</span>
<span class="k">let</span> <span class="id">original</span> <span class="o">=</span> <span class="pn">[|</span> <span class="n">0..</span><span class="n">5</span> <span class="pn">|]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 62)" onmouseover="showTip(event, 'fs15', 62)" class="id">Array</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs16', 63)" onmouseover="showTip(event, 'fs16', 63)" class="id">map</span> <span class="id">cube</span> <span class="id">original</span>
<span class="id">AssertEquality</span> <span class="id">original</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">(* See more Array methods at</span>
<span class="c">http://msdn.microsoft.com/en-us/library/ee370273.aspx *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// .NET Collections</span>
<span class="c">//</span>
<span class="c">// Since F# is bulit for seamless interop with other CLR</span>
<span class="c">// languages, you can use all of the basic .NET collections types</span>
<span class="c">// you&#39;re already familiar with if you&#39;re a C# or VB programmer.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating .NET lists -------------------------------------</span>
<span class="k">let</span> <span class="id">fruits</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs10', 64)" onmouseover="showTip(event, 'fs10', 64)" class="id">List</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs3', 65)" onmouseover="showTip(event, 'fs3', 65)" class="id">string</span><span class="pn">&gt;</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">fruits</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="s">&quot;apple&quot;</span><span class="pn">)</span>
<span class="id">fruits</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="s">&quot;pear&quot;</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">0</span><span class="pn">]</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">fruits</span><span class="pn">.</span><span class="pn">[</span><span class="n">1</span><span class="pn">]</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- creating .NET dictionaries ------------------------------</span>
<span class="k">let</span> <span class="id">addressBook</span> <span class="o">=</span> <span class="k">new</span> <span class="id">Dictionary</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs3', 66)" onmouseover="showTip(event, 'fs3', 66)" class="id">string</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs3', 67)" onmouseover="showTip(event, 'fs3', 67)" class="id">string</span><span class="pn">&gt;</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;Chris&quot;</span><span class="pn">]</span> <span class="k">&lt;-</span> <span class="s">&quot;Ann Arbor&quot;</span>
<span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;SkillsMatter&quot;</span><span class="pn">]</span> <span class="k">&lt;-</span> <span class="s">&quot;London&quot;</span>
<span class="id">AssertEquality</span> <span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;Chris&quot;</span><span class="pn">]</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;SkillsMatter&quot;</span><span class="pn">]</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- you can use combinators with .NET types ----------------</span>
<span class="k">let</span> <span class="id">addressBook</span> <span class="o">=</span> <span class="k">new</span> <span class="id">Dictionary</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs3', 68)" onmouseover="showTip(event, 'fs3', 68)" class="id">string</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs3', 69)" onmouseover="showTip(event, 'fs3', 69)" class="id">string</span><span class="pn">&gt;</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;Chris&quot;</span><span class="pn">]</span> <span class="k">&lt;-</span> <span class="s">&quot;Ann Arbor&quot;</span>
<span class="id">addressBook</span><span class="pn">.</span><span class="pn">[</span><span class="s">&quot;SkillsMatter&quot;</span><span class="pn">]</span> <span class="k">&lt;-</span> <span class="s">&quot;London&quot;</span>
<span class="k">let</span> <span class="id">verboseBook</span> <span class="o">=</span>
<span class="id">addressBook</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 70)" onmouseover="showTip(event, 'fs17', 70)" class="id">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs18', 71)" onmouseover="showTip(event, 'fs18', 71)" class="id">map</span> <span class="pn">(</span><span class="k">fun</span> <span class="id">kvp</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 72)" onmouseover="showTip(event, 'fs8', 72)" class="id">sprintf</span> <span class="s">&quot;Name: %s - City: %s&quot;</span> <span class="id">kvp</span><span class="pn">.</span><span class="id">Key</span>
<span class="id">kvp</span><span class="pn">.</span><span class="id">Value</span><span class="pn">)</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 73)" onmouseover="showTip(event, 'fs17', 73)" class="id">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs19', 74)" onmouseover="showTip(event, 'fs19', 74)" class="id">toArray</span>
<span class="c">//NOTE: The seq type in F# is an alias for .NET&#39;s IEnumerable interface</span>
<span class="c">// Like the List and Array module, the Seq module contains functions</span>
<span class="c">// that you can combine to perform operations on types implementing</span>
<span class="c">// seq/IEnumerable. The methods found in these modules are known as</span>
<span class="c">// combinators</span>
<span class="id">AssertEquality</span> <span class="id">verboseBook</span><span class="pn">.</span><span class="pn">[</span><span class="n">0</span><span class="pn">]</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">verboseBook</span><span class="pn">.</span><span class="pn">[</span><span class="n">1</span><span class="pn">]</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- skipping elements ---------------------------------------</span>
<span class="k">let</span> <span class="id">original</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">5</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 75)" onmouseover="showTip(event, 'fs17', 75)" class="id">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs20', 76)" onmouseover="showTip(event, 'fs20', 76)" class="id">skip</span> <span class="n">2</span> <span class="id">original</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- finding the max -----------------------------------------</span>
<span class="k">let</span> <span class="id">values</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs10', 77)" onmouseover="showTip(event, 'fs10', 77)" class="id">List</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs2', 78)" onmouseover="showTip(event, 'fs2', 78)" class="id">int</span><span class="pn">&gt;</span><span class="pn">(</span><span class="pn">)</span>
<span class="id">values</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="n">11</span><span class="pn">)</span>
<span class="id">values</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="n">20</span><span class="pn">)</span>
<span class="id">values</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="n">4</span><span class="pn">)</span>
<span class="id">values</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="n">2</span><span class="pn">)</span>
<span class="id">values</span><span class="pn">.</span><span class="id">Add</span><span class="pn">(</span><span class="n">3</span><span class="pn">)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 79)" onmouseover="showTip(event, 'fs17', 79)" class="id">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 80)" onmouseover="showTip(event, 'fs21', 80)" class="id">max</span> <span class="id">values</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- finding the max using a condition -----------------------</span>
<span class="k">let</span> <span class="id">getNameLength</span> <span class="pn">(</span><span class="id">name</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs3', 81)" onmouseover="showTip(event, 'fs3', 81)" class="id">string</span><span class="pn">)</span> <span class="o">=</span>
<span class="id">name</span><span class="pn">.</span><span class="id">Length</span>
<span class="k">let</span> <span class="id">names</span> <span class="o">=</span> <span class="pn">[|</span> <span class="s">&quot;Harry&quot;</span><span class="pn">;</span> <span class="s">&quot;Lloyd&quot;</span><span class="pn">;</span> <span class="s">&quot;Nicholas&quot;</span><span class="pn">;</span> <span class="s">&quot;Mary&quot;</span><span class="pn">;</span> <span class="s">&quot;Joe&quot;</span><span class="pn">;</span> <span class="pn">|]</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 82)" onmouseover="showTip(event, 'fs17', 82)" class="id">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs22', 83)" onmouseover="showTip(event, 'fs22', 83)" class="id">maxBy</span> <span class="id">getNameLength</span> <span class="id">names</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Looping</span>
<span class="c">//</span>
<span class="c">// While it&#39;s more common in F# to use the Seq, List, or Array</span>
<span class="c">// modules to perform looping operations, you can still fall</span>
<span class="c">// back on traditional imperative looping techniques that you may</span>
<span class="c">// be more familiar with.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- looping over a list -------------------------------------</span>
<span class="k">let</span> <span class="id">values</span> <span class="o">=</span> <span class="pn">[</span><span class="n">0..</span><span class="n">10</span><span class="pn">]</span>
<span class="k">let</span> <span class="k">mutable</span> <span class="id">sum</span> <span class="o">=</span> <span class="n">0</span>
<span class="k">for</span> <span class="id">value</span> <span class="k">in</span> <span class="id">values</span> <span class="k">do</span>
<span class="id">sum</span> <span class="k">&lt;-</span> <span class="id">sum</span> <span class="o">+</span> <span class="id">value</span>
<span class="id">AssertEquality</span> <span class="id">sum</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- looping with expressions --------------------------------</span>
<span class="k">let</span> <span class="k">mutable</span> <span class="id">sum</span> <span class="o">=</span> <span class="n">0</span>
<span class="k">for</span> <span class="id">i</span> <span class="o">=</span> <span class="n">1</span> <span class="k">to</span> <span class="n">5</span> <span class="k">do</span>
<span class="id">sum</span> <span class="k">&lt;-</span> <span class="id">sum</span> <span class="o">+</span> <span class="id">i</span>
<span class="id">AssertEquality</span> <span class="id">sum</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- looping with while --------------------------------------</span>
<span class="k">let</span> <span class="k">mutable</span> <span class="id">sum</span> <span class="o">=</span> <span class="n">1</span>
<span class="k">while</span> <span class="id">sum</span> <span class="pn">&lt;</span> <span class="n">10</span> <span class="k">do</span>
<span class="id">sum</span> <span class="k">&lt;-</span> <span class="id">sum</span> <span class="o">+</span> <span class="id">sum</span>
<span class="id">AssertEquality</span> <span class="id">sum</span> <span class="id">__</span>
<span class="c">(* NOTE: While these looping constructs can come in handy from time to</span>
<span class="c">time,</span>
<span class="c">it&#39;s often better to use a more functional approach for looping</span>
<span class="c">such as the functions you learned about in the List module. *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// More About Funtions</span>
<span class="c">//</span>
<span class="c">// You&#39;ve already learned a little about funcitons in F#, but</span>
<span class="c">// since F# is a functional language, there are more tricks</span>
<span class="c">// to learn!</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- defining lambdas ----------------------------------------</span>
<span class="k">let</span> <span class="id">colors</span> <span class="o">=</span> <span class="pn">[</span><span class="s">&quot;maize&quot;</span><span class="pn">;</span> <span class="s">&quot;blue&quot;</span><span class="pn">]</span>
<span class="k">let</span> <span class="id">echo</span> <span class="o">=</span>
<span class="id">colors</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 84)" onmouseover="showTip(event, 'fs10', 84)" class="id">List</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 85)" onmouseover="showTip(event, 'fs11', 85)" class="id">map</span> <span class="pn">(</span><span class="k">fun</span> <span class="id">x</span> <span class="k">-&gt;</span> <span class="id">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="id">x</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">echo</span> <span class="id">__</span>
<span class="c">(* The fun keyword allows you to create a function inline without giving</span>
<span class="c">it a name. These functions are known as anonymous functions, lambdas,</span>
<span class="c">or lambda functions. *)</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- functions that return functions ------------------------</span>
<span class="c">(* A neat functional programming trick is to create functions that</span>
<span class="c">return other functions. This leads to some interesting behaviors. *)</span>
<span class="k">let</span> <span class="id">add</span> <span class="id">x</span> <span class="o">=</span>
<span class="pn">(</span><span class="k">fun</span> <span class="id">y</span> <span class="k">-&gt;</span> <span class="id">x</span> <span class="o">+</span> <span class="id">y</span><span class="pn">)</span>
<span class="c">(* F#&#39;s lightweight syntax allows you to call both functions as if there</span>
<span class="c">was only one *)</span>
<span class="k">let</span> <span class="id">simpleResult</span> <span class="o">=</span> <span class="id">add</span> <span class="n">2</span> <span class="n">4</span>
<span class="id">AssertEquality</span> <span class="id">simpleResult</span> <span class="id">__</span>
<span class="c">(* ...but you can also pass only one argument at a time to create</span>
<span class="c">residual functions. This technique is known as partial appliction. *)</span>
<span class="k">let</span> <span class="id">addTen</span> <span class="o">=</span> <span class="id">add</span> <span class="n">10</span>
<span class="k">let</span> <span class="id">fancyResult</span> <span class="o">=</span> <span class="id">addTen</span> <span class="n">14</span>
<span class="id">AssertEquality</span> <span class="id">fancyResult</span> <span class="id">__</span>
<span class="c">//NOTE: Functions written in this style are said to be curried.</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- automatic currying --------------------------------------</span>
<span class="c">(* The above technique is common enough that F# actually supports this</span>
<span class="c">by default. In other words, functions are automatically curried. *)</span>
<span class="k">let</span> <span class="id">add</span> <span class="id">x</span> <span class="id">y</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">+</span> <span class="id">y</span>
<span class="k">let</span> <span class="id">addSeven</span> <span class="o">=</span> <span class="id">add</span> <span class="n">7</span>
<span class="k">let</span> <span class="id">unluckyNumber</span> <span class="o">=</span> <span class="id">addSeven</span> <span class="n">6</span>
<span class="k">let</span> <span class="id">luckyNumber</span> <span class="o">=</span> <span class="id">addSeven</span> <span class="n">0</span>
<span class="id">AssertEquality</span> <span class="id">unluckyNumber</span> <span class="id">__</span>
<span class="id">AssertEquality</span> <span class="id">luckyNumber</span> <span class="id">__</span>
<span class="c">//---------------------------------------------------------------</span>
<span class="c">// ---- non curried functions -----------------------------------</span>
<span class="c">(* You should stick to the auto-curried function syntax most of the</span>
<span class="c">time. However, you can also write functions in an uncurried form to</span>
<span class="c">make them easier to use from languages like C# where currying is not</span>
<span class="c">as commonly used. *)</span>
<span class="k">let</span> <span class="id">add</span><span class="pn">(</span><span class="id">x</span><span class="pn">,</span> <span class="id">y</span><span class="pn">)</span> <span class="o">=</span>
<span class="id">x</span> <span class="o">+</span> <span class="id">y</span>
<span class="c">(* NOTE: &quot;add 5&quot; will not compile now. You have to pass both arguments</span>
<span class="c">at once *)</span>
<span class="k">let</span> <span class="id">result</span> <span class="o">=</span> <span class="id">add</span><span class="pn">(</span><span class="n">5</span><span class="pn">,</span> <span class="n">40</span><span class="pn">)</span>
<span class="id">AssertEquality</span> <span class="id">result</span> <span class="id">__</span>
<span class="c">(* THINK ABOUT IT: You learned earlier that functions with multiple</span>
<span class="c">return values are really just functions that return</span>
<span class="c">tuples. Do functions defined in the uncurried form</span>
<span class="c">really accept more than one argument at a time? *)</span>
<span class="c">//---------------------------------------------------------------</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val typeof&lt;&#39;T&gt; : System.Type</div>
<div class="tip" id="fs2">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs3">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = System.String</div>
<div class="tip" id="fs4">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />--------------------<br />type float = System.Double<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float</div>
<div class="tip" id="fs5">Multiple items<br />val double : value:&#39;T -&gt; double (requires member op_Explicit)<br /><br />--------------------<br />type double = System.Double</div>
<div class="tip" id="fs6">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1</div>
<div class="tip" id="fs7">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2</div>
<div class="tip" id="fs8">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs9">type &#39;T list = List&lt;&#39;T&gt;</div>
<div class="tip" id="fs10">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;&#160;&#160;interface IReadOnlyList&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IReadOnlyCollection&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;interface IEnumerable<br />&#160;&#160;&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;member GetReverseIndex : rank:int * offset:int -&gt; int<br />&#160;&#160;&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;&#160;&#160;member Head : &#39;T<br />&#160;&#160;&#160;&#160;member IsEmpty : bool<br />&#160;&#160;&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;&#160;&#160;member Length : int<br />&#160;&#160;&#160;&#160;...</div>
<div class="tip" id="fs11">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list</div>
<div class="tip" id="fs12">val filter : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list</div>
<div class="tip" id="fs13">val not : value:bool -&gt; bool</div>
<div class="tip" id="fs14">val partition : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list * &#39;T list</div>
<div class="tip" id="fs15">module Array<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs16">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []</div>
<div class="tip" id="fs17">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs18">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;</div>
<div class="tip" id="fs19">val toArray : source:seq&lt;&#39;T&gt; -&gt; &#39;T []</div>
<div class="tip" id="fs20">val skip : count:int -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;</div>
<div class="tip" id="fs21">val max : source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)</div>
<div class="tip" id="fs22">val maxBy : projection:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)</div>

