<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="id">Threading</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="id">Threading</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="id">Tasks</span>
<span class="pp">#r</span> <span class="s">&quot;nuget: Websocket.Client, 4.4.43&quot;</span>
<span class="pp">#r</span> <span class="s">&quot;nuget: System.Reactive, 4.0.0&quot;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="id">Websocket</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="id">Client</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="fn">websocketRequest</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="id">reqMsg</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="rt">string</span><span class="pn">)</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="rt">ResponseMessage</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="id">requestTask</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="d">Task</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="rt">ResponseMessage</span><span class="pn">&gt;</span> <span class="o">=</span> 
        <span class="id">task</span> <span class="pn">{</span>
            <span class="k">let</span> <span class="id">responseReceivedEvent</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="id">ManualResetEvent</span><span class="pn">(</span><span class="k">false</span><span class="pn">)</span>
            <span class="k">let</span> <span class="k">mutable</span> <span class="id">msgReceived</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="id">None</span>
            <span class="k">let</span> <span class="id">url</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="id">Uri</span><span class="pn">(</span><span class="s">&quot;wss://ws.postman-echo.com/raw&quot;</span><span class="pn">)</span><span class="pn">;</span>
            <span class="k">use</span> <span class="id">client</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs15', 19)" onmouseover="showTip(event, 'fs15', 19)" class="id">WebsocketClient</span><span class="pn">(</span><span class="id">url</span><span class="pn">)</span>
            <span class="id">client</span><span class="pn">.</span><span class="id">ReconnectTimeout</span> <span class="k">&lt;-</span> <span onmouseout="hideTip(event, 'fs16', 20)" onmouseover="showTip(event, 'fs16', 20)" class="id">TimeSpan</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs17', 21)" onmouseover="showTip(event, 'fs17', 21)" class="id">FromSeconds</span><span class="pn">(</span><span class="n">30</span><span class="pn">)</span>
            <span class="id">client</span><span class="pn">.</span><span class="id">ReconnectionHappened</span><span class="pn">.</span><span class="id">Subscribe</span><span class="pn">(</span><span class="k">fun</span> <span class="id">msg</span> <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs18', 22)" onmouseover="showTip(event, 'fs18', 22)" class="id">printfn</span> $&quot;<span class="id">Reconnection</span> <span class="id">happened</span><span class="pn">,</span> <span class="k">type</span><span class="pn">:</span> <span class="pn">{</span><span class="id">msg</span><span class="pn">.</span><span class="id">Type</span><span class="pn">}</span><span class="s">&quot;)</span>
<span class="s">            client.MessageReceived.Subscribe(fun msg -&gt;</span>
<span class="s">                msgReceived &lt;- Some msg</span>
<span class="s">                responseReceivedEvent.Set() |&gt; ignore</span>
<span class="s">            )</span>
<span class="s">            do! client.Start()</span>
<span class="s">            </span>
<span class="s">            Task.Run(fun() -&gt; client.Send(reqMsg)) |&gt; ignore</span>
<span class="s">            responseReceivedEvent.WaitOne(10000) |&gt; ignore</span>
<span class="s">            return Option.get msgReceived</span>
<span class="s">        }</span>
<span class="s">    requestTask.Wait()</span>
<span class="s">    requestTask.Result</span>

<span class="s">let result = websocketRequest &quot;</span><span class="id">ECHO_MESSAGE</span><span class="s">&quot;</span>
<span class="s">printfn $&quot;</span><span class="id">Response</span> <span class="id">text</span><span class="pn">:</span> <span class="pn">{</span><span class="id">result</span><span class="pn">.</span><span class="id">Text</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">printfn $&quot;</span><span class="id">Response</span> <span class="id">binary</span><span class="pn">:</span> <span class="pn">{</span><span class="id">result</span><span class="pn">.</span><span class="id">Binary</span><span class="pn">}</span><span class="s">&quot;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Threading</div>
<div class="tip" id="fs3">namespace System.Threading.Tasks</div>
<div class="tip" id="fs4">namespace Websocket</div>
<div class="tip" id="fs5">namespace Websocket.Client</div>
<div class="tip" id="fs6">val websocketRequest : reqMsg:string -&gt; ResponseMessage</div>
<div class="tip" id="fs7">val reqMsg : string</div>
<div class="tip" id="fs8">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = String</div>
<div class="tip" id="fs9">type ResponseMessage =<br />&#160;&#160;member Binary : byte[]<br />&#160;&#160;member MessageType : WebSocketMessageType<br />&#160;&#160;member Text : string<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;static member BinaryMessage : data:byte[] -&gt; ResponseMessage<br />&#160;&#160;static member TextMessage : data:string -&gt; ResponseMessage</div>
<div class="tip" id="fs10">val requestTask : Task&lt;ResponseMessage&gt;</div>
<div class="tip" id="fs11">Multiple items<br />type Task =<br />&#160;&#160;new : action:Action -&gt; Task + 7 overloads<br />&#160;&#160;member AsyncState : obj<br />&#160;&#160;member ConfigureAwait : continueOnCapturedContext:bool -&gt; ConfiguredTaskAwaitable<br />&#160;&#160;member ContinueWith : continuationAction:Action&lt;Task&gt; -&gt; Task + 19 overloads<br />&#160;&#160;member CreationOptions : TaskCreationOptions<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member Exception : AggregateException<br />&#160;&#160;member GetAwaiter : unit -&gt; TaskAwaiter<br />&#160;&#160;member Id : int<br />&#160;&#160;member IsCanceled : bool<br />&#160;&#160;...<br /><br />--------------------<br />type Task&lt;&#39;TResult&gt; =<br />&#160;&#160;inherit Task<br />&#160;&#160;new : function:Func&lt;&#39;TResult&gt; -&gt; Task&lt;&#39;TResult&gt; + 7 overloads<br />&#160;&#160;member ConfigureAwait : continueOnCapturedContext:bool -&gt; ConfiguredTaskAwaitable&lt;&#39;TResult&gt;<br />&#160;&#160;member ContinueWith : continuationAction:Action&lt;Task&lt;&#39;TResult&gt;&gt; -&gt; Task + 19 overloads<br />&#160;&#160;member GetAwaiter : unit -&gt; TaskAwaiter&lt;&#39;TResult&gt;<br />&#160;&#160;member Result : &#39;TResult<br />&#160;&#160;static member Factory : TaskFactory&lt;&#39;TResult&gt;<br /><br />--------------------<br />Task(action: Action) : Task<br />Task(action: Action, cancellationToken: CancellationToken) : Task<br />Task(action: Action, creationOptions: TaskCreationOptions) : Task<br />Task(action: Action&lt;obj&gt;, state: obj) : Task<br />Task(action: Action, cancellationToken: CancellationToken, creationOptions: TaskCreationOptions) : Task<br />Task(action: Action&lt;obj&gt;, state: obj, cancellationToken: CancellationToken) : Task<br />Task(action: Action&lt;obj&gt;, state: obj, creationOptions: TaskCreationOptions) : Task<br />Task(action: Action&lt;obj&gt;, state: obj, cancellationToken: CancellationToken, creationOptions: TaskCreationOptions) : Task<br /><br />--------------------<br />Task(function: Func&lt;&#39;TResult&gt;) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;&#39;TResult&gt;, cancellationToken: CancellationToken) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;&#39;TResult&gt;, creationOptions: TaskCreationOptions) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;obj,&#39;TResult&gt;, state: obj) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;&#39;TResult&gt;, cancellationToken: CancellationToken, creationOptions: TaskCreationOptions) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;obj,&#39;TResult&gt;, state: obj, cancellationToken: CancellationToken) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;obj,&#39;TResult&gt;, state: obj, creationOptions: TaskCreationOptions) : Task&lt;&#39;TResult&gt;<br />Task(function: Func&lt;obj,&#39;TResult&gt;, state: obj, cancellationToken: CancellationToken, creationOptions: TaskCreationOptions) : Task&lt;&#39;TResult&gt;</div>
<div class="tip" id="fs12">Multiple items<br />type ManualResetEvent =<br />&#160;&#160;inherit EventWaitHandle<br />&#160;&#160;new : initialState:bool -&gt; ManualResetEvent<br /><br />--------------------<br />ManualResetEvent(initialState: bool) : ManualResetEvent</div>
<div class="tip" id="fs13">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs14">Multiple items<br />type Uri =<br />&#160;&#160;new : uriString:string -&gt; Uri + 5 overloads<br />&#160;&#160;member AbsolutePath : string<br />&#160;&#160;member AbsoluteUri : string<br />&#160;&#160;member Authority : string<br />&#160;&#160;member DnsSafeHost : string<br />&#160;&#160;member Equals : comparand:obj -&gt; bool<br />&#160;&#160;member Fragment : string<br />&#160;&#160;member GetComponents : components:UriComponents * format:UriFormat -&gt; string<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetLeftPart : part:UriPartial -&gt; string<br />&#160;&#160;...<br /><br />--------------------<br />Uri(uriString: string) : Uri<br />Uri(uriString: string, uriKind: UriKind) : Uri<br />Uri(baseUri: Uri, relativeUri: string) : Uri<br />Uri(baseUri: Uri, relativeUri: Uri) : Uri</div>
<div class="tip" id="fs15">Multiple items<br />type WebsocketClient =<br />&#160;&#160;new : url:Uri * ?clientFactory:Func&lt;ClientWebSocket&gt; -&gt; WebsocketClient + 1 overload<br />&#160;&#160;member DisconnectionHappened : IObservable&lt;DisconnectionInfo&gt;<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member ErrorReconnectTimeout : Nullable&lt;TimeSpan&gt; with get, set<br />&#160;&#160;member IsReconnectionEnabled : bool with get, set<br />&#160;&#160;member IsRunning : bool with get, set<br />&#160;&#160;member IsStarted : bool with get, set<br />&#160;&#160;member IsTextMessageConversionEnabled : bool with get, set<br />&#160;&#160;member MessageEncoding : Encoding with get, set<br />&#160;&#160;member MessageReceived : IObservable&lt;ResponseMessage&gt;<br />&#160;&#160;...<br /><br />--------------------<br />WebsocketClient(url: Uri,?clientFactory: Func&lt;Net.WebSockets.ClientWebSocket&gt;) : WebsocketClient<br />WebsocketClient(url: Uri, connectionFactory: Func&lt;Uri,CancellationToken,Task&lt;Net.WebSockets.WebSocket&gt;&gt;) : WebsocketClient</div>
<div class="tip" id="fs16">Multiple items<br />type TimeSpan =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : ticks:int64 -&gt; TimeSpan + 3 overloads<br />&#160;&#160;&#160;&#160;member Add : ts:TimeSpan -&gt; TimeSpan<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Days : int<br />&#160;&#160;&#160;&#160;member Divide : divisor:float -&gt; TimeSpan + 1 overload<br />&#160;&#160;&#160;&#160;member Duration : unit -&gt; TimeSpan<br />&#160;&#160;&#160;&#160;member Equals : value:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member Hours : int<br />&#160;&#160;&#160;&#160;member Milliseconds : int<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />--------------------<br />TimeSpan ()<br />TimeSpan(ticks: int64) : TimeSpan<br />TimeSpan(hours: int, minutes: int, seconds: int) : TimeSpan<br />TimeSpan(days: int, hours: int, minutes: int, seconds: int) : TimeSpan<br />TimeSpan(days: int, hours: int, minutes: int, seconds: int, milliseconds: int) : TimeSpan</div>
<div class="tip" id="fs17">TimeSpan.FromSeconds(value: float) : TimeSpan</div>
<div class="tip" id="fs18">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>

