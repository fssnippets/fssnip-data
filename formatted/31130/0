<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
<span class="l">83: </span>
<span class="l">84: </span>
<span class="l">85: </span>
<span class="l">86: </span>
<span class="l">87: </span>
<span class="l">88: </span>
<span class="l">89: </span>
<span class="l">90: </span>
<span class="l">91: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">    <span class="k">type</span> <span class="k">private</span> <span class="rt">Process</span> <span class="o">=</span>
        <span class="pn">{</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">Name</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="rt">string</span>
          <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="id">ChanSend</span><span class="pn">:</span> <span class="id">Channel</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="id">int</span><span class="pn">&gt;</span>
          <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">ChanRecv</span><span class="pn">:</span> <span class="id">Channel</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="id">int</span><span class="pn">&gt;</span>
        <span class="pn">}</span>

    <span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="fn">createSendProcess</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="id">chanSend</span> <span class="pn">:</span> <span class="id">Channel</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs4', 9)" onmouseover="showTip(event, 'fs4', 9)" class="id">int</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="id">chanRecv</span> <span class="pn">:</span> <span class="id">Channel</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="id">int</span><span class="pn">&gt;</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="id">value</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="id">name</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="id">m</span> <span class="o">=</span>
        <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="fn">create</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="id">n</span> <span class="o">=</span> 
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="id">n</span> <span class="o">=</span> <span class="n">1</span> <span class="k">then</span>
                <span onmouseout="hideTip(event, 'fs7', 18)" onmouseover="showTip(event, 'fs7', 18)" class="id">chanSend</span><span class="pn">.</span><span class="id">Send</span> <span onmouseout="hideTip(event, 'fs9', 19)" onmouseover="showTip(event, 'fs9', 19)" class="id">value</span>
                <span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="fn">printfn</span> $&quot;<span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 21)" onmouseover="showTip(event, 'fs10', 21)" class="id">name</span><span class="pn">}</span> <span class="id">sent</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs9', 22)" onmouseover="showTip(event, 'fs9', 22)" class="id">value</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                let recv = chanRecv.Receive</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 23)" onmouseover="showTip(event, 'fs10', 23)" class="id">name</span><span class="pn">}</span> <span class="id">received</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span class="id">recv</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">            else </span>
<span class="s">                chanSend.Send value</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="id">name</span><span class="pn">}</span> <span class="id">sent</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs9', 25)" onmouseover="showTip(event, 'fs9', 25)" class="id">value</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                let recv = chanRecv.Receive</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="id">name</span><span class="pn">}</span> <span class="id">received</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span class="id">recv</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                create (n - 1)</span>
<span class="s">        create m</span>

<span class="s">    let private createRecvProcess (chanRecv : Channel&lt;int&gt;) (chanSend : Channel&lt;int&gt;) name m =</span>
<span class="s">        let rec create n =</span>
<span class="s">            if n = 1 then</span>
<span class="s">                let recv = chanRecv.Receive</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="id">name</span><span class="pn">}</span> <span class="id">received</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span class="id">recv</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                let value = recv + 10</span>
<span class="s">                chanSend.Send value</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 28)" onmouseover="showTip(event, 'fs10', 28)" class="id">name</span><span class="pn">}</span> <span class="id">sent</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs9', 29)" onmouseover="showTip(event, 'fs9', 29)" class="id">value</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">            else</span>
<span class="s">                let recv = chanRecv.Receive</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 30)" onmouseover="showTip(event, 'fs10', 30)" class="id">name</span><span class="pn">}</span> <span class="id">received</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span class="id">recv</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                let value = recv + 10</span>
<span class="s">                chanSend.Send value</span>
<span class="s">                printfn $&quot;</span><span class="o">%</span><span class="id">s</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs10', 31)" onmouseover="showTip(event, 'fs10', 31)" class="id">name</span><span class="pn">}</span> <span class="id">sent</span><span class="pn">:</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs9', 32)" onmouseover="showTip(event, 'fs9', 32)" class="id">value</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                create (n - 1)</span>
<span class="s">        create m</span>

<span class="s">    let processRing processCount roundCount =</span>
<span class="s">        let getRecvChan index (chans : Channel&lt;int&gt; list) =</span>
<span class="s">            match index with</span>
<span class="s">            | i when i - 1 &lt; 0 -&gt; chans.Item (List.length chans - 1)</span>
<span class="s">            | i                -&gt; chans.Item (i - 1)</span>

<span class="s">        let rec createProcesses chans allChans index acc =</span>
<span class="s">            match chans with</span>
<span class="s">            | []    -&gt; acc</span>
<span class="s">            | c::cs -&gt; let proc = {Name = $&quot;</span><span class="id">p</span><span class="pn">{</span><span class="id">index</span><span class="pn">}</span><span class="s">&quot;; ChanSend = c; ChanRecv = getRecvChan index allChans}</span>
<span class="s">                       createProcesses cs allChans (index + 1) (acc @ [proc])</span>

<span class="s">        let rec createProcessRing procs index m =</span>
<span class="s">            match procs with</span>
<span class="s">            | pa::pb::[] when index = 0 -&gt; let sendAsync = async {</span>
<span class="s">                                                            createSendProcess pa.ChanSend pa.ChanRecv 0 pa.Name m</span>
<span class="s">                                                          }</span>
<span class="s">                                           let recvAsync = async {</span>
<span class="s">                                                            createRecvProcess pb.ChanRecv pb.ChanSend pb.Name m</span>
<span class="s">                                                          }</span>
<span class="s">                                           let sendTask = Async.AwaitTask &lt;| Async.StartAsTask sendAsync</span>
<span class="s">                                           let recvTask = Async.AwaitTask &lt;| Async.StartAsTask recvAsync</span>
<span class="s">                                           Async.RunSynchronously sendTask</span>
<span class="s">                                           Async.RunSynchronously recvTask</span>
<span class="s">            | pa::pb::[]                -&gt; let recvAsync1 = async {</span>
<span class="s">                                                            createRecvProcess pa.ChanRecv pa.ChanSend pa.Name m</span>
<span class="s">                                                          }</span>
<span class="s">                                           let recvAsync2 = async {</span>
<span class="s">                                                            createRecvProcess pb.ChanRecv pb.ChanSend pb.Name m</span>
<span class="s">                                                          }</span>
<span class="s">                                           let recvTask1 = Async.AwaitTask &lt;| Async.StartAsTask recvAsync1</span>
<span class="s">                                           let recvTask2 = Async.AwaitTask &lt;| Async.StartAsTask recvAsync2</span>
<span class="s">                                           Async.RunSynchronously recvTask1</span>
<span class="s">                                           Async.RunSynchronously recvTask2</span>
<span class="s">            | p::ps when index = 0      -&gt; let sendAsync = async {</span>
<span class="s">                                                             createSendProcess p.ChanSend p.ChanRecv 0 p.Name m</span>
<span class="s">                                                           }</span>
<span class="s">                                           let sendTask = Async.AwaitTask &lt;| Async.StartAsTask sendAsync</span>
<span class="s">                                           createProcessRing ps (index + 1) m</span>
<span class="s">                                           Async.RunSynchronously sendTask</span>
<span class="s">            | p::ps                     -&gt; let recvAsync = async {</span>
<span class="s">                                                                 createRecvProcess p.ChanRecv p.ChanSend p.Name m</span>
<span class="s">                                                              }</span>
<span class="s">                                           let sendTask = Async.AwaitTask &lt;| Async.StartAsTask recvAsync</span>
<span class="s">                                           createProcessRing ps (index + 1) m</span>
<span class="s">                                           Async.RunSynchronously sendTask</span>
<span class="s">            | _                         -&gt; failwith $&quot;</span><span class="id">createProcessRing</span> <span class="id">failed!</span> <span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="id">m</span> <span class="o">=</span> <span class="o">%</span><span class="id">A</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs11', 34)" onmouseover="showTip(event, 'fs11', 34)" class="id">m</span><span class="pn">}</span><span class="s">&quot;</span>

<span class="s">        let chans = [for _ in 1..processCount -&gt; Channel&lt;int&gt;()]</span>

<span class="s">        let processes = createProcesses chans chans 0 []</span>

<span class="s">        createProcessRing processes 0 roundCount</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Process.Name: string</div>
<div class="tip" id="fs2">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = System.String</div>
<div class="tip" id="fs3">Process.ChanSend: obj</div>
<div class="tip" id="fs4">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs5">Process.ChanRecv: obj</div>
<div class="tip" id="fs6">val private createSendProcess : chanSend:&#39;a -&gt; chanRecv:&#39;b -&gt; value:&#39;c -&gt; name:&#39;d -&gt; m:&#39;e -&gt; &#39;f</div>
<div class="tip" id="fs7">val chanSend : &#39;a</div>
<div class="tip" id="fs8">val chanRecv : &#39;b</div>
<div class="tip" id="fs9">val value : &#39;c</div>
<div class="tip" id="fs10">val name : &#39;d</div>
<div class="tip" id="fs11">val m : &#39;e</div>
<div class="tip" id="fs12">val create : (int -&gt; unit)</div>
<div class="tip" id="fs13">val n : int</div>
<div class="tip" id="fs14">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>

