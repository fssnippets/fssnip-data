<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">System</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="rt">Stack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="rt">Collections</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="id">Generic</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">Queue</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="if">IDisposable</span><span class="pn">&gt;</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="d">Scope</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="id">value</span><span class="pn">:</span><span class="ta">&#39;</span><span class="id">a</span><span class="pn">)</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="id">stack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="rt">Stack</span><span class="pn">(</span><span class="pn">)</span>
    <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="prop">Value</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="id">value</span>
    <span class="k">member</span> <span class="k">internal</span> <span class="id">_</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="prop">Stack</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="id">stack</span>
    <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Close</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
        <span class="k">for</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="id">i</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="id">stack</span> <span class="k">do</span>
        <span class="k">try</span>
            <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="fn">i</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="id">Dispose</span><span class="pn">(</span><span class="pn">)</span>
        <span class="k">with</span> 
            <span class="id">_</span> <span class="k">-&gt;</span> <span class="pn">(</span><span class="pn">)</span>    
    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs6', 18)" onmouseover="showTip(event, 'fs6', 18)" class="if">IDisposable</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="id">this</span><span class="pn">.</span><span class="fn">Dispose</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="fn">this</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="id">Close</span><span class="pn">(</span><span class="pn">)</span>

<span class="k">module</span> <span class="m">Internals</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="fn">getStack</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="id">x</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs7', 24)" onmouseover="showTip(event, 'fs7', 24)" class="d">Scope</span><span class="pn">&lt;</span><span class="id">_</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="id">x</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 26)" onmouseover="showTip(event, 'fs11', 26)" class="id">Stack</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs15', 27)" onmouseover="showTip(event, 'fs15', 27)" class="rt">ScopeBuilder</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
    <span class="k">member</span> <span class="id">_</span><span class="pn">.</span> <span class="fn">Return</span> <span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="id">x</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs7', 29)" onmouseover="showTip(event, 'fs7', 29)" class="d">Scope</span><span class="pn">&lt;</span><span class="id">_</span><span class="pn">&gt;</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs16', 30)" onmouseover="showTip(event, 'fs16', 30)" class="id">x</span><span class="pn">)</span>
    
    <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Using</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="id">res</span> <span class="pn">,</span><span onmouseout="hideTip(event, 'fs18', 32)" onmouseover="showTip(event, 'fs18', 32)" class="fn">body</span><span class="pn">)</span> <span class="o">=</span>
        <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="mv">disposeNow</span> <span class="o">=</span> <span class="k">true</span>
        <span class="k">try</span>
            <span class="k">let</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="id">x</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs7', 35)" onmouseover="showTip(event, 'fs7', 35)" class="d">Scope</span><span class="pn">&lt;</span><span class="id">_</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="fn">body</span> <span onmouseout="hideTip(event, 'fs17', 37)" onmouseover="showTip(event, 'fs17', 37)" class="id">res</span>
            <span onmouseout="hideTip(event, 'fs19', 38)" onmouseover="showTip(event, 'fs19', 38)" class="mv">disposeNow</span> <span class="k">&lt;-</span> <span class="k">false</span>
            <span onmouseout="hideTip(event, 'fs20', 39)" onmouseover="showTip(event, 'fs20', 39)" class="fn">x</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 40)" onmouseover="showTip(event, 'fs11', 40)" class="id">Stack</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 41)" onmouseover="showTip(event, 'fs11', 41)" class="id">Enqueue</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="id">res</span>
            <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="id">x</span>
        <span class="k">finally</span>
            <span class="k">if</span>  <span onmouseout="hideTip(event, 'fs19', 44)" onmouseover="showTip(event, 'fs19', 44)" class="mv">disposeNow</span> <span class="k">then</span> <span class="fn">(</span><span onmouseout="hideTip(event, 'fs17', 45)" onmouseover="showTip(event, 'fs17', 45)" class="id">res</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs6', 46)" onmouseover="showTip(event, 'fs6', 46)" class="if">IDisposable</span><span class="pn">)</span><span class="pn">.</span><span class="id">Dispose</span><span class="pn">(</span><span class="pn">)</span>  

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 47)" onmouseover="showTip(event, 'fs21', 47)" class="id">scope</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 48)" onmouseover="showTip(event, 'fs15', 48)" class="rt">ScopeBuilder</span> <span class="pn">(</span><span class="pn">)</span> 

<span class="c">// example</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 49)" onmouseover="showTip(event, 'fs1', 49)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs22', 50)" onmouseover="showTip(event, 'fs22', 50)" class="id">IO</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 51)" onmouseover="showTip(event, 'fs23', 51)" class="id">somescope</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs21', 52)" onmouseover="showTip(event, 'fs21', 52)" class="k">scope</span> <span class="pn">{</span>
        <span class="k">use</span> <span onmouseout="hideTip(event, 'fs24', 53)" onmouseover="showTip(event, 'fs24', 53)" class="id">ms</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs25', 54)" onmouseover="showTip(event, 'fs25', 54)" class="d">MemoryStream</span><span class="pn">(</span><span class="pn">)</span> 
        <span class="k">use</span> <span onmouseout="hideTip(event, 'fs26', 55)" onmouseover="showTip(event, 'fs26', 55)" class="id">sw</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs27', 56)" onmouseover="showTip(event, 'fs27', 56)" class="d">StreamWriter</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs24', 57)" onmouseover="showTip(event, 'fs24', 57)" class="id">ms</span><span class="pn">)</span>        
        <span onmouseout="hideTip(event, 'fs26', 58)" onmouseover="showTip(event, 'fs26', 58)" class="fn">sw</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 59)" onmouseover="showTip(event, 'fs11', 59)" class="id">Write</span> <span class="s">&quot;this</span>
<span class="s">is</span>
<span class="s">multiline</span>
<span class="s">text&quot;</span>
        <span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="fn">sw</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 61)" onmouseover="showTip(event, 'fs11', 61)" class="id">Flush</span><span class="pn">(</span><span class="pn">)</span>
        <span onmouseout="hideTip(event, 'fs24', 62)" onmouseover="showTip(event, 'fs24', 62)" class="fn">ms</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 63)" onmouseover="showTip(event, 'fs11', 63)" class="id">Seek</span> <span class="pn">(</span><span class="n">0L</span><span class="pn">,</span><span onmouseout="hideTip(event, 'fs28', 64)" onmouseover="showTip(event, 'fs28', 64)" class="vt">SeekOrigin</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs29', 65)" onmouseover="showTip(event, 'fs29', 65)" class="id">Begin</span><span class="pn">)</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs30', 66)" onmouseover="showTip(event, 'fs30', 66)" class="fn">ignore</span>
        <span class="k">use</span> <span onmouseout="hideTip(event, 'fs31', 67)" onmouseover="showTip(event, 'fs31', 67)" class="id">sr</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs32', 68)" onmouseover="showTip(event, 'fs32', 68)" class="d">StreamReader</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs24', 69)" onmouseover="showTip(event, 'fs24', 69)" class="id">ms</span><span class="pn">)</span>
        <span class="k">return</span> 
            <span class="pn">{|</span>
                <span class="id">Next</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs31', 70)" onmouseover="showTip(event, 'fs31', 70)" class="fn">sr</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 71)" onmouseover="showTip(event, 'fs11', 71)" class="id">ReadLine</span> 
            <span class="pn">|}</span>

    <span class="pn">}</span>

<span onmouseout="hideTip(event, 'fs23', 72)" onmouseover="showTip(event, 'fs23', 72)" class="id">somescope</span> <span class="pn">.</span><span class="id">Value</span><span class="pn">.</span><span class="id">Next</span><span class="pn">(</span><span class="pn">)</span>  <span class="c">// reads text line by line</span>

<span onmouseout="hideTip(event, 'fs23', 73)" onmouseover="showTip(event, 'fs23', 73)" class="fn">somescope</span> <span class="pn">.</span><span class="id">Close</span><span class="pn">(</span><span class="pn">)</span> <span class="c">// try execute above command now - you&#39;ll get an error</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">type Stack = Collections.Generic.Queue&lt;IDisposable&gt;</div>
<div class="tip" id="fs3">Multiple items<br />namespace System.Collections<br /><br />--------------------<br />namespace Microsoft.FSharp.Collections</div>
<div class="tip" id="fs4">namespace System.Collections.Generic</div>
<div class="tip" id="fs5">Multiple items<br />type Queue&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; Queue&lt;&#39;T&gt; + 2 overloads<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Contains : item:&#39;T -&gt; bool<br />&#160;&#160;member CopyTo : array:&#39;T[] * arrayIndex:int -&gt; unit<br />&#160;&#160;member Count : int<br />&#160;&#160;member Dequeue : unit -&gt; &#39;T<br />&#160;&#160;member Enqueue : item:&#39;T -&gt; unit<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;T&gt;<br />&#160;&#160;member Peek : unit -&gt; &#39;T<br />&#160;&#160;member ToArray : unit -&gt; &#39;T[]<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br /><br />--------------------<br />Collections.Generic.Queue() : Collections.Generic.Queue&lt;&#39;T&gt;<br />Collections.Generic.Queue(capacity: int) : Collections.Generic.Queue&lt;&#39;T&gt;<br />Collections.Generic.Queue(collection: Collections.Generic.IEnumerable&lt;&#39;T&gt;) : Collections.Generic.Queue&lt;&#39;T&gt;</div>
<div class="tip" id="fs6">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit</div>
<div class="tip" id="fs7">Multiple items<br />type Scope&lt;&#39;a&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;new : value:&#39;a -&gt; Scope&lt;&#39;a&gt;<br />&#160;&#160;member Close : unit -&gt; unit<br />&#160;&#160;member internal Stack : Stack<br />&#160;&#160;member Value : &#39;a<br /><br />--------------------<br />new : value:&#39;a -&gt; Scope&lt;&#39;a&gt;</div>
<div class="tip" id="fs8">val value : &#39;a</div>
<div class="tip" id="fs9">val stack : Stack</div>
<div class="tip" id="fs10">val i : IDisposable</div>
<div class="tip" id="fs11"></div>
<div class="tip" id="fs12">val this : Scope&lt;&#39;a&gt;</div>
<div class="tip" id="fs13">val getStack : x:Scope&lt;&#39;a&gt; -&gt; Stack</div>
<div class="tip" id="fs14">val x : Scope&lt;&#39;a&gt;</div>
<div class="tip" id="fs15">Multiple items<br />type ScopeBuilder =<br />&#160;&#160;new : unit -&gt; ScopeBuilder<br />&#160;&#160;member Return : x:&#39;c -&gt; Scope&lt;&#39;c&gt;<br />&#160;&#160;member Using : res:&#39;a * body:(&#39;a -&gt; Scope&lt;&#39;b&gt;) -&gt; Scope&lt;&#39;b&gt; (requires &#39;a :&gt; IDisposable)<br /><br />--------------------<br />new : unit -&gt; ScopeBuilder</div>
<div class="tip" id="fs16">val x : &#39;c</div>
<div class="tip" id="fs17">val res : #IDisposable</div>
<div class="tip" id="fs18">val body : (#IDisposable -&gt; Scope&lt;&#39;b&gt;)</div>
<div class="tip" id="fs19">val mutable disposeNow : bool</div>
<div class="tip" id="fs20">val x : Scope&lt;&#39;b&gt;</div>
<div class="tip" id="fs21">val scope : ScopeBuilder</div>
<div class="tip" id="fs22">namespace System.IO</div>
<div class="tip" id="fs23">val somescope : Scope&lt;{| Next: (unit -&gt; string) |}&gt;</div>
<div class="tip" id="fs24">val ms : MemoryStream</div>
<div class="tip" id="fs25">Multiple items<br />type MemoryStream =<br />&#160;&#160;inherit Stream<br />&#160;&#160;new : unit -&gt; MemoryStream + 6 overloads<br />&#160;&#160;member CanRead : bool<br />&#160;&#160;member CanSeek : bool<br />&#160;&#160;member CanWrite : bool<br />&#160;&#160;member Capacity : int with get, set<br />&#160;&#160;member CopyTo : destination:Stream * bufferSize:int -&gt; unit<br />&#160;&#160;member CopyToAsync : destination:Stream * bufferSize:int * cancellationToken:CancellationToken -&gt; Task<br />&#160;&#160;member Flush : unit -&gt; unit<br />&#160;&#160;member FlushAsync : cancellationToken:CancellationToken -&gt; Task<br />&#160;&#160;member GetBuffer : unit -&gt; byte[]<br />&#160;&#160;...<br /><br />--------------------<br />MemoryStream() : MemoryStream<br />MemoryStream(capacity: int) : MemoryStream<br />MemoryStream(buffer: byte []) : MemoryStream<br />MemoryStream(buffer: byte [], writable: bool) : MemoryStream<br />MemoryStream(buffer: byte [], index: int, count: int) : MemoryStream<br />MemoryStream(buffer: byte [], index: int, count: int, writable: bool) : MemoryStream<br />MemoryStream(buffer: byte [], index: int, count: int, writable: bool, publiclyVisible: bool) : MemoryStream</div>
<div class="tip" id="fs26">val sw : StreamWriter</div>
<div class="tip" id="fs27">Multiple items<br />type StreamWriter =<br />&#160;&#160;inherit TextWriter<br />&#160;&#160;new : stream:Stream -&gt; StreamWriter + 7 overloads<br />&#160;&#160;member AutoFlush : bool with get, set<br />&#160;&#160;member BaseStream : Stream<br />&#160;&#160;member Close : unit -&gt; unit<br />&#160;&#160;member DisposeAsync : unit -&gt; ValueTask<br />&#160;&#160;member Encoding : Encoding<br />&#160;&#160;member Flush : unit -&gt; unit<br />&#160;&#160;member FlushAsync : unit -&gt; Task<br />&#160;&#160;member Write : value:char -&gt; unit + 8 overloads<br />&#160;&#160;member WriteAsync : value:char -&gt; Task + 3 overloads<br />&#160;&#160;...<br /><br />--------------------<br />StreamWriter(stream: Stream) : StreamWriter<br />StreamWriter(path: string) : StreamWriter<br />StreamWriter(stream: Stream, encoding: Text.Encoding) : StreamWriter<br />StreamWriter(path: string, append: bool) : StreamWriter<br />StreamWriter(stream: Stream, encoding: Text.Encoding, bufferSize: int) : StreamWriter<br />StreamWriter(path: string, append: bool, encoding: Text.Encoding) : StreamWriter<br />StreamWriter(stream: Stream,?encoding: Text.Encoding,?bufferSize: int,?leaveOpen: bool) : StreamWriter<br />StreamWriter(path: string, append: bool, encoding: Text.Encoding, bufferSize: int) : StreamWriter</div>
<div class="tip" id="fs28">type SeekOrigin =<br />&#160;&#160;| Begin = 0<br />&#160;&#160;| Current = 1<br />&#160;&#160;| End = 2</div>
<div class="tip" id="fs29">field SeekOrigin.Begin: SeekOrigin = 0</div>
<div class="tip" id="fs30">val ignore : value:&#39;T -&gt; unit</div>
<div class="tip" id="fs31">val sr : StreamReader</div>
<div class="tip" id="fs32">Multiple items<br />type StreamReader =<br />&#160;&#160;inherit TextReader<br />&#160;&#160;new : stream:Stream -&gt; StreamReader + 10 overloads<br />&#160;&#160;member BaseStream : Stream<br />&#160;&#160;member Close : unit -&gt; unit<br />&#160;&#160;member CurrentEncoding : Encoding<br />&#160;&#160;member DiscardBufferedData : unit -&gt; unit<br />&#160;&#160;member EndOfStream : bool<br />&#160;&#160;member Peek : unit -&gt; int<br />&#160;&#160;member Read : unit -&gt; int + 2 overloads<br />&#160;&#160;member ReadAsync : buffer:Memory&lt;char&gt; * ?cancellationToken:CancellationToken -&gt; ValueTask&lt;int&gt; + 1 overload<br />&#160;&#160;member ReadBlock : buffer:Span&lt;char&gt; -&gt; int + 1 overload<br />&#160;&#160;...<br /><br />--------------------<br />StreamReader(stream: Stream) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(path: string) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(stream: Stream, detectEncodingFromByteOrderMarks: bool) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(stream: Stream, encoding: Text.Encoding) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(path: string, detectEncodingFromByteOrderMarks: bool) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(path: string, encoding: Text.Encoding) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(stream: Stream, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(path: string, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(stream: Stream, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, bufferSize: int) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />StreamReader(path: string, encoding: Text.Encoding, detectEncodingFromByteOrderMarks: bool, bufferSize: int) : StreamReader<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>

