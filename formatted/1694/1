<h2><a name="Sample-sudoku-board" class="anchor" href="#Sample-sudoku-board">Sample sudoku board</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">problem</span> <span class="o">=</span>
  <span class="s">&quot;&quot;&quot; .  .  4 | 8  .  . | .  1  7  </span>
<span class="s">              |         |          </span>
<span class="s">      6  7  . | 9  .  . | .  .  .  </span>
<span class="s">              |         |          </span>
<span class="s">      5  .  8 | .  3  . | .  .  4  </span>
<span class="s">      --------+---------+--------  </span>
<span class="s">      3  .  . | 7  4  . | 1  .  .  </span>
<span class="s">              |         |          </span>
<span class="s">      .  6  9 | .  .  . | 7  8  .  </span>
<span class="s">              |         |          </span>
<span class="s">      .  .  1 | .  6  9 | .  .  5  </span>
<span class="s">      --------+---------+--------  </span>
<span class="s">      1  .  . | .  8  . | 3  .  6  </span>
<span class="s">              |         |          </span>
<span class="s">      .  .  . | .  .  6 | .  9  1  </span>
<span class="s">              |         |          </span>
<span class="s">      2  4  . | .  .  1 | 5  .  .  </span>
<span class="s">  &quot;&quot;&quot;</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Parsing-sudoku-board-and-helpers" class="anchor" href="#Parsing-sudoku-board-and-helpers">Parsing sudoku board and helpers</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Returns all possible positions on a Sudoku board</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="id">positions</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="k">seq</span> <span class="pn">{</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="id">x</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">do</span>
          <span class="k">for</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="id">y</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">do</span> 
            <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="id">y</span> <span class="pn">}</span>

<span class="c">/// Set of numbers that can appear in a place</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="id">numbers</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="fn">set</span> <span class="pn">[</span> <span class="n">1</span> <span class="o">..</span> <span class="n">9</span> <span class="pn">]</span>

<span class="c">/// Create 2D array containing &#39;None&#39; for every blank space and</span>
<span class="c">/// &#39;Some n&#39; for every assigned number. We do this by iterating</span>
<span class="c">/// over lines &amp; over characters and skipping everything that is</span>
<span class="c">/// not &#39;.&#39; or a valid number</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="id">task</span> <span class="o">=</span>
  <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="id">line</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs1', 12)" onmouseover="showTip(event, 'fs1', 12)" class="fn">problem</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="id">Split</span><span class="pn">(</span><span class="s">&#39;\n&#39;</span><span class="pn">)</span> <span class="k">do</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="id">parsed</span> <span class="o">=</span>
        <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="id">c</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="id">line</span> <span class="k">do</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="id">c</span> <span class="o">=</span> <span class="s">&#39;.&#39;</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="uc">None</span>
            <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="id">c</span> <span class="o">&gt;</span><span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="id">c</span> <span class="o">&lt;=</span> <span class="s">&#39;9&#39;</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="uc">Some</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="fn">int</span> <span onmouseout="hideTip(event, 'fs12', 23)" onmouseover="showTip(event, 'fs12', 23)" class="id">c</span> <span class="o">-</span> <span class="n">48</span><span class="pn">)</span> <span class="pn">]</span> 
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs11', 24)" onmouseover="showTip(event, 'fs11', 24)" class="id">parsed</span> <span class="o">&lt;&gt;</span> <span class="pn">[</span><span class="pn">]</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs11', 25)" onmouseover="showTip(event, 'fs11', 25)" class="id">parsed</span> <span class="pn">]</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="fn">array2D</span>

<span class="c">/// We represent the state of the board as a map from indices</span>
<span class="c">/// (this lets us do recursive backtracking nicely)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs17', 27)" onmouseover="showTip(event, 'fs17', 27)" class="rt">Sudoku</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="rt">Map</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="vt">int</span> <span class="pn">*</span> <span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="vt">int</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs15', 31)" onmouseover="showTip(event, 'fs15', 31)" class="vt">int</span><span class="pn">&gt;</span>

<span class="c">/// Turn the 2D array into a &#39;Sudoku&#39; value</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 32)" onmouseover="showTip(event, 'fs19', 32)" class="id">state</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="rt">Sudoku</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs2', 34)" onmouseover="showTip(event, 'fs2', 34)" class="id">positions</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 35)" onmouseover="showTip(event, 'fs20', 35)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 36)" onmouseover="showTip(event, 'fs21', 36)" class="id">choose</span> <span class="pn">(</span><span class="k">fun</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs4', 37)" onmouseover="showTip(event, 'fs4', 37)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 38)" onmouseover="showTip(event, 'fs5', 38)" class="id">y</span><span class="pn">)</span> <span class="k">-&gt;</span> 
    <span onmouseout="hideTip(event, 'fs8', 39)" onmouseover="showTip(event, 'fs8', 39)" class="id">task</span><span class="m">.</span><span class="pn">[</span><span onmouseout="hideTip(event, 'fs4', 40)" onmouseover="showTip(event, 'fs4', 40)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 41)" onmouseover="showTip(event, 'fs5', 41)" class="id">y</span><span class="pn">]</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 42)" onmouseover="showTip(event, 'fs22', 42)" class="m">Option</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs23', 43)" onmouseover="showTip(event, 'fs23', 43)" class="id">map</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="id">v</span> <span class="k">-&gt;</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs4', 45)" onmouseover="showTip(event, 'fs4', 45)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 46)" onmouseover="showTip(event, 'fs5', 46)" class="id">y</span><span class="pn">)</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs24', 47)" onmouseover="showTip(event, 'fs24', 47)" class="id">v</span><span class="pn">)</span><span class="pn">)</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 48)" onmouseover="showTip(event, 'fs18', 48)" class="m">Map</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs25', 49)" onmouseover="showTip(event, 'fs25', 49)" class="id">ofSeq</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Sudoku-solver" class="anchor" href="#Sudoku-solver">Sudoku solver</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Returns the first empty position in the game</span>
<span class="c">/// (or &#39;None&#39; when all the positions are filled)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 50)" onmouseover="showTip(event, 'fs26', 50)" class="fn">findEmpty</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 51)" onmouseover="showTip(event, 'fs27', 51)" class="id">state</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs17', 52)" onmouseover="showTip(event, 'fs17', 52)" class="rt">Sudoku</span><span class="pn">)</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs2', 53)" onmouseover="showTip(event, 'fs2', 53)" class="id">positions</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 54)" onmouseover="showTip(event, 'fs20', 54)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs28', 55)" onmouseover="showTip(event, 'fs28', 55)" class="id">tryFind</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 56)" onmouseover="showTip(event, 'fs27', 56)" class="fn">state</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs29', 57)" onmouseover="showTip(event, 'fs29', 57)" class="id">ContainsKey</span> <span class="o">&gt;</span><span class="pn">&gt;</span> <span onmouseout="hideTip(event, 'fs30', 58)" onmouseover="showTip(event, 'fs30', 58)" class="fn">not</span><span class="pn">)</span>

<span class="c">/// Returns a list with 3 lists that contain positions </span>
<span class="c">/// on the board that have to be unique (that is, horizontal</span>
<span class="c">/// line, vertical line and the small square)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 59)" onmouseover="showTip(event, 'fs31', 59)" class="fn">findLines</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs4', 60)" onmouseover="showTip(event, 'fs4', 60)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 61)" onmouseover="showTip(event, 'fs5', 61)" class="id">y</span><span class="pn">)</span> <span class="o">=</span> 
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 62)" onmouseover="showTip(event, 'fs32', 62)" class="id">xs</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs33', 63)" onmouseover="showTip(event, 'fs33', 63)" class="id">ys</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 64)" onmouseover="showTip(event, 'fs4', 64)" class="id">x</span><span class="o">/</span><span class="n">3</span><span class="o">*</span><span class="n">3</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 65)" onmouseover="showTip(event, 'fs5', 65)" class="id">y</span><span class="o">/</span><span class="n">3</span><span class="o">*</span><span class="n">3</span>
  <span class="pn">[</span> <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs5', 66)" onmouseover="showTip(event, 'fs5', 66)" class="id">y</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 67)" onmouseover="showTip(event, 'fs4', 67)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 68)" onmouseover="showTip(event, 'fs5', 68)" class="id">y</span> <span class="pn">]</span>
    <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs4', 69)" onmouseover="showTip(event, 'fs4', 69)" class="id">x</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 70)" onmouseover="showTip(event, 'fs4', 70)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs5', 71)" onmouseover="showTip(event, 'fs5', 71)" class="id">y</span> <span class="pn">]</span>
    <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs4', 72)" onmouseover="showTip(event, 'fs4', 72)" class="id">x</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">2</span> <span class="k">do</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs5', 73)" onmouseover="showTip(event, 'fs5', 73)" class="id">y</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">2</span> <span class="k">do</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs32', 74)" onmouseover="showTip(event, 'fs32', 74)" class="id">xs</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs4', 75)" onmouseover="showTip(event, 'fs4', 75)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs33', 76)" onmouseover="showTip(event, 'fs33', 76)" class="id">ys</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs5', 77)" onmouseover="showTip(event, 'fs5', 77)" class="id">y</span> <span class="pn">]</span> <span class="pn">]</span>

<span class="c">/// Find numbers that are not used on a &#39;line&#39;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 78)" onmouseover="showTip(event, 'fs34', 78)" class="fn">getUnusedOnLine</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 79)" onmouseover="showTip(event, 'fs27', 79)" class="id">state</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs17', 80)" onmouseover="showTip(event, 'fs17', 80)" class="rt">Sudoku</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs35', 81)" onmouseover="showTip(event, 'fs35', 81)" class="id">line</span> <span class="o">=</span>   
  <span onmouseout="hideTip(event, 'fs6', 82)" onmouseover="showTip(event, 'fs6', 82)" class="id">numbers</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs7', 83)" onmouseover="showTip(event, 'fs7', 83)" class="fn">set</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="id">line</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 85)" onmouseover="showTip(event, 'fs20', 85)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 86)" onmouseover="showTip(event, 'fs21', 86)" class="id">choose</span> <span onmouseout="hideTip(event, 'fs27', 87)" onmouseover="showTip(event, 'fs27', 87)" class="fn">state</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs36', 88)" onmouseover="showTip(event, 'fs36', 88)" class="id">TryFind</span><span class="pn">)</span>

<span class="c">/// Recursive sudoku solver. Keeps the current state</span>
<span class="c">/// in an immutable map to make backtracking easy</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs37', 89)" onmouseover="showTip(event, 'fs37', 89)" class="fn">solve</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 90)" onmouseover="showTip(event, 'fs27', 90)" class="id">state</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs17', 91)" onmouseover="showTip(event, 'fs17', 91)" class="rt">Sudoku</span><span class="pn">)</span> <span class="o">=</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs26', 92)" onmouseover="showTip(event, 'fs26', 92)" class="fn">findEmpty</span> <span onmouseout="hideTip(event, 'fs27', 93)" onmouseover="showTip(event, 'fs27', 93)" class="id">state</span> <span class="k">with</span>
  <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs14', 94)" onmouseover="showTip(event, 'fs14', 94)" class="uc">Some</span> <span onmouseout="hideTip(event, 'fs38', 95)" onmouseover="showTip(event, 'fs38', 95)" class="id">pos</span> <span class="k">-&gt;</span> 
      <span class="c">// If there is an empty place, find all numbers that we can put there</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 96)" onmouseover="showTip(event, 'fs39', 96)" class="id">alternatives</span> <span class="o">=</span> 
        <span onmouseout="hideTip(event, 'fs31', 97)" onmouseover="showTip(event, 'fs31', 97)" class="fn">findLines</span> <span onmouseout="hideTip(event, 'fs38', 98)" onmouseover="showTip(event, 'fs38', 98)" class="id">pos</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 99)" onmouseover="showTip(event, 'fs20', 99)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs40', 100)" onmouseover="showTip(event, 'fs40', 100)" class="id">map</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs34', 101)" onmouseover="showTip(event, 'fs34', 101)" class="fn">getUnusedOnLine</span> <span onmouseout="hideTip(event, 'fs27', 102)" onmouseover="showTip(event, 'fs27', 102)" class="id">state</span><span class="pn">)</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs41', 103)" onmouseover="showTip(event, 'fs41', 103)" class="m">Set</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs42', 104)" onmouseover="showTip(event, 'fs42', 104)" class="id">intersectMany</span>
      <span class="c">// Iterate over alternatives, add the number to the current &#39;pos&#39;</span>
      <span class="c">// and try calling &#39;solve&#39; recursively for the rest of the board</span>
      <span onmouseout="hideTip(event, 'fs39', 105)" onmouseover="showTip(event, 'fs39', 105)" class="id">alternatives</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 106)" onmouseover="showTip(event, 'fs20', 106)" class="m">Seq</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs43', 107)" onmouseover="showTip(event, 'fs43', 107)" class="id">tryPick</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs24', 108)" onmouseover="showTip(event, 'fs24', 108)" class="id">v</span> <span class="k">-&gt;</span>
        <span onmouseout="hideTip(event, 'fs37', 109)" onmouseover="showTip(event, 'fs37', 109)" class="fn">solve</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 110)" onmouseover="showTip(event, 'fs18', 110)" class="m">Map</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs44', 111)" onmouseover="showTip(event, 'fs44', 111)" class="id">add</span> <span onmouseout="hideTip(event, 'fs38', 112)" onmouseover="showTip(event, 'fs38', 112)" class="id">pos</span> <span onmouseout="hideTip(event, 'fs24', 113)" onmouseover="showTip(event, 'fs24', 113)" class="id">v</span> <span onmouseout="hideTip(event, 'fs27', 114)" onmouseover="showTip(event, 'fs27', 114)" class="id">state</span><span class="pn">)</span><span class="pn">)</span>
  <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs13', 115)" onmouseover="showTip(event, 'fs13', 115)" class="uc">None</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs14', 116)" onmouseover="showTip(event, 'fs14', 116)" class="uc">Some</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 117)" onmouseover="showTip(event, 'fs27', 117)" class="id">state</span><span class="pn">)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Printing-the-result" class="anchor" href="#Printing-the-result">Printing the result</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Nicely format sudoku board that we get from the solver</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 118)" onmouseover="showTip(event, 'fs45', 118)" class="fn">printState</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs27', 119)" onmouseover="showTip(event, 'fs27', 119)" class="id">state</span><span class="pn">:</span><span onmouseout="hideTip(event, 'fs17', 120)" onmouseover="showTip(event, 'fs17', 120)" class="rt">Sudoku</span><span class="pn">)</span> <span class="o">=</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 121)" onmouseover="showTip(event, 'fs46', 121)" class="fn">newBlock</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
    <span class="pn">[</span> <span class="k">for</span> <span onmouseout="hideTip(event, 'fs47', 122)" onmouseover="showTip(event, 'fs47', 122)" class="id">i</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">2</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs48', 123)" onmouseover="showTip(event, 'fs48', 123)" class="m">String</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs49', 124)" onmouseover="showTip(event, 'fs49', 124)" class="id">replicate</span> <span class="n">9</span> <span class="s">&quot;-&quot;</span> <span class="pn">]</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs48', 125)" onmouseover="showTip(event, 'fs48', 125)" class="m">String</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs50', 126)" onmouseover="showTip(event, 'fs50', 126)" class="id">concat</span> <span class="s">&quot;+&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs51', 127)" onmouseover="showTip(event, 'fs51', 127)" class="fn">printfn</span> <span class="s">&quot;+</span><span class="pf">%s</span><span class="s">+&quot;</span>
  <span onmouseout="hideTip(event, 'fs46', 128)" onmouseover="showTip(event, 'fs46', 128)" class="fn">newBlock</span> <span class="pn">(</span><span class="pn">)</span>
  <span class="k">for</span> <span onmouseout="hideTip(event, 'fs52', 129)" onmouseover="showTip(event, 'fs52', 129)" class="id">x</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">do</span> 
    <span onmouseout="hideTip(event, 'fs53', 130)" onmouseover="showTip(event, 'fs53', 130)" class="fn">printf</span> <span class="s">&quot;|&quot;</span>
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs54', 131)" onmouseover="showTip(event, 'fs54', 131)" class="id">y</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">8</span> <span class="k">do</span>
      <span class="k">match</span> <span onmouseout="hideTip(event, 'fs27', 132)" onmouseover="showTip(event, 'fs27', 132)" class="fn">state</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs36', 133)" onmouseover="showTip(event, 'fs36', 133)" class="id">TryFind</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs52', 134)" onmouseover="showTip(event, 'fs52', 134)" class="id">x</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs54', 135)" onmouseover="showTip(event, 'fs54', 135)" class="id">y</span><span class="pn">)</span> <span class="k">with</span>
      <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs14', 136)" onmouseover="showTip(event, 'fs14', 136)" class="uc">Some</span> <span onmouseout="hideTip(event, 'fs24', 137)" onmouseover="showTip(event, 'fs24', 137)" class="id">v</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs53', 138)" onmouseover="showTip(event, 'fs53', 138)" class="fn">printf</span> <span class="s">&quot; </span><span class="pf">%d</span><span class="s"> &quot;</span> <span onmouseout="hideTip(event, 'fs24', 139)" onmouseover="showTip(event, 'fs24', 139)" class="id">v</span>
      <span class="pn">|</span> <span class="id">_</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs53', 140)" onmouseover="showTip(event, 'fs53', 140)" class="fn">printf</span> <span class="s">&quot;. &quot;</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs54', 141)" onmouseover="showTip(event, 'fs54', 141)" class="id">y</span> <span class="o">%</span> <span class="n">3</span> <span class="o">=</span> <span class="n">2</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs53', 142)" onmouseover="showTip(event, 'fs53', 142)" class="fn">printf</span> <span class="s">&quot;|&quot;</span>
    <span onmouseout="hideTip(event, 'fs51', 143)" onmouseover="showTip(event, 'fs51', 143)" class="fn">printfn</span> <span class="s">&quot;&quot;</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs52', 144)" onmouseover="showTip(event, 'fs52', 144)" class="id">x</span> <span class="o">%</span> <span class="n">3</span> <span class="o">=</span> <span class="n">2</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs46', 145)" onmouseover="showTip(event, 'fs46', 145)" class="fn">newBlock</span><span class="pn">(</span><span class="pn">)</span>
    
<span class="c">// Run the solver and print the result!</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 146)" onmouseover="showTip(event, 'fs55', 146)" class="id">solved</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 147)" onmouseover="showTip(event, 'fs37', 147)" class="fn">solve</span> <span onmouseout="hideTip(event, 'fs19', 148)" onmouseover="showTip(event, 'fs19', 148)" class="id">state</span>
<span onmouseout="hideTip(event, 'fs45', 149)" onmouseover="showTip(event, 'fs45', 149)" class="fn">printState</span> <span onmouseout="hideTip(event, 'fs55', 150)" onmouseover="showTip(event, 'fs55', 150)" class="id">solved</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs56', 151)" onmouseover="showTip(event, 'fs56', 151)" class="id">Value</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Result-for-the-sample-board" class="anchor" href="#Result-for-the-sample-board">Result for the sample board</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// +---------+---------+---------+</span>
<span class="c">// | 9  3  4 | 8  2  5 | 6  1  7 |</span>
<span class="c">// | 6  7  2 | 9  1  4 | 8  5  3 |</span>
<span class="c">// | 5  1  8 | 6  3  7 | 9  2  4 |</span>
<span class="c">// +---------+---------+---------+</span>
<span class="c">// | 3  2  5 | 7  4  8 | 1  6  9 |</span>
<span class="c">// | 4  6  9 | 1  5  3 | 7  8  2 |</span>
<span class="c">// | 7  8  1 | 2  6  9 | 4  3  5 |</span>
<span class="c">// +---------+---------+---------+</span>
<span class="c">// | 1  9  7 | 5  8  2 | 3  4  6 |</span>
<span class="c">// | 8  5  3 | 4  7  6 | 2  9  1 |</span>
<span class="c">// | 2  4  6 | 3  9  1 | 5  7  8 |</span>
<span class="c">// +---------+---------+---------+</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val problem : string</div>
<div class="tip" id="fs2">val positions : seq&lt;int * int&gt;<br /><em><br /><br />&#160;Returns all possible positions on a Sudoku board</em></div>
<div class="tip" id="fs3">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;</div>
<div class="tip" id="fs4">val x : int</div>
<div class="tip" id="fs5">val y : int</div>
<div class="tip" id="fs6">val numbers : Set&lt;int&gt;<br /><em><br /><br />&#160;Set of numbers that can appear in a place</em></div>
<div class="tip" id="fs7">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)</div>
<div class="tip" id="fs8">val task : int option [,]<br /><em><br /><br />&#160;Create 2D array containing &#39;None&#39; for every blank space and<br />&#160;&#39;Some n&#39; for every assigned number. We do this by iterating<br />&#160;over lines &amp; over characters and skipping everything that is<br />&#160;not &#39;.&#39; or a valid number</em></div>
<div class="tip" id="fs9">val line : string</div>
<div class="tip" id="fs10">System.String.Split([&lt;System.ParamArray&gt;] separator: char []) : string []<br />System.String.Split(separator: string [], options: System.StringSplitOptions) : string []<br />System.String.Split(separator: string,?options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], count: int) : string []<br />System.String.Split(separator: char,?options: System.StringSplitOptions) : string []<br />System.String.Split(separator: string [], count: int, options: System.StringSplitOptions) : string []<br />System.String.Split(separator: string, count: int,?options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], count: int, options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char, count: int,?options: System.StringSplitOptions) : string []</div>
<div class="tip" id="fs11">val parsed : int option list</div>
<div class="tip" id="fs12">val c : char</div>
<div class="tip" id="fs13">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs14">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs15">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs16">val array2D : rows:seq&lt;#seq&lt;&#39;T&gt;&gt; -&gt; &#39;T [,]</div>
<div class="tip" id="fs17">type Sudoku = Map&lt;(int * int),int&gt;<br /><em><br /><br />&#160;We represent the state of the board as a map from indices<br />&#160;(this lets us do recursive backtracking nicely)</em></div>
<div class="tip" id="fs18">Multiple items<br />module Map<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Map&lt;&#39;Key,&#39;Value (requires comparison)&gt; =<br />&#160;&#160;interface IReadOnlyDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;interface IReadOnlyCollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface ICollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member ContainsKey : key:&#39;Key -&gt; bool<br />&#160;&#160;...<br /><br />--------------------<br />new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs19">val state : Sudoku<br /><em><br /><br />&#160;Turn the 2D array into a &#39;Sudoku&#39; value</em></div>
<div class="tip" id="fs20">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs21">val choose : chooser:(&#39;T -&gt; &#39;U option) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;</div>
<div class="tip" id="fs22">module Option<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs23">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; option:&#39;T option -&gt; &#39;U option</div>
<div class="tip" id="fs24">val v : int</div>
<div class="tip" id="fs25">val ofSeq : elements:seq&lt;&#39;Key * &#39;T&gt; -&gt; Map&lt;&#39;Key,&#39;T&gt; (requires comparison)</div>
<div class="tip" id="fs26">val findEmpty : state:Sudoku -&gt; (int * int) option<br /><em><br /><br />&#160;Returns the first empty position in the game<br />&#160;(or &#39;None&#39; when all the positions are filled)</em></div>
<div class="tip" id="fs27">val state : Sudoku</div>
<div class="tip" id="fs28">val tryFind : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;T option</div>
<div class="tip" id="fs29">member Map.ContainsKey : key:&#39;Key -&gt; bool</div>
<div class="tip" id="fs30">val not : value:bool -&gt; bool</div>
<div class="tip" id="fs31">val findLines : x:int * y:int -&gt; (int * int) list list<br /><em><br /><br />&#160;Returns a list with 3 lists that contain positions <br />&#160;on the board that have to be unique (that is, horizontal<br />&#160;line, vertical line and the small square)</em></div>
<div class="tip" id="fs32">val xs : int</div>
<div class="tip" id="fs33">val ys : int</div>
<div class="tip" id="fs34">val getUnusedOnLine : state:Sudoku -&gt; line:seq&lt;int * int&gt; -&gt; Set&lt;int&gt;<br /><em><br /><br />&#160;Find numbers that are not used on a &#39;line&#39;</em></div>
<div class="tip" id="fs35">val line : seq&lt;int * int&gt;</div>
<div class="tip" id="fs36">member Map.TryFind : key:&#39;Key -&gt; &#39;Value option</div>
<div class="tip" id="fs37">val solve : state:Sudoku -&gt; Sudoku option<br /><em><br /><br />&#160;Recursive sudoku solver. Keeps the current state<br />&#160;in an immutable map to make backtracking easy</em></div>
<div class="tip" id="fs38">val pos : int * int</div>
<div class="tip" id="fs39">val alternatives : Set&lt;int&gt;</div>
<div class="tip" id="fs40">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;</div>
<div class="tip" id="fs41">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IReadOnlyCollection&lt;&#39;T&gt;<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs42">val intersectMany : sets:seq&lt;Set&lt;&#39;T&gt;&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)</div>
<div class="tip" id="fs43">val tryPick : chooser:(&#39;T -&gt; &#39;U option) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;U option</div>
<div class="tip" id="fs44">val add : key:&#39;Key -&gt; value:&#39;T -&gt; table:Map&lt;&#39;Key,&#39;T&gt; -&gt; Map&lt;&#39;Key,&#39;T&gt; (requires comparison)</div>
<div class="tip" id="fs45">val printState : state:Sudoku -&gt; unit<br /><em><br /><br />&#160;Nicely format sudoku board that we get from the solver</em></div>
<div class="tip" id="fs46">val newBlock : (unit -&gt; unit)</div>
<div class="tip" id="fs47">val i : int</div>
<div class="tip" id="fs48">module String<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs49">val replicate : count:int -&gt; str:string -&gt; string</div>
<div class="tip" id="fs50">val concat : sep:string -&gt; strings:seq&lt;string&gt; -&gt; string</div>
<div class="tip" id="fs51">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs52">val x : int32</div>
<div class="tip" id="fs53">val printf : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs54">val y : int32</div>
<div class="tip" id="fs55">val solved : Sudoku option</div>
<div class="tip" id="fs56">property Option.Value: Sudoku with get</div>

