<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="id">System</span><span class="pn">;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="id">IO</span><span class="pn">;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="id">Linq</span><span class="pn">;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="id">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="id">Reflection</span><span class="pn">;</span>
<span class="pp">#if</span> <span class="id">NETCOREAPP2_0</span>
<span class="inactive">open</span><span class="inactive"> </span><span class="inactive">System.Runtime.Loader;</span>
<span class="pp">#endif</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="id">Microsoft</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="id">Build</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="id">Framework</span><span class="pn">;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs5', 11)" onmouseover="showTip(event, 'fs5', 11)" class="id">Microsoft</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="id">Build</span><span class="pn">.</span><span class="id">Utilities</span><span class="pn">;</span>

<span class="pn">[&lt;</span><span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="rt">AbstractClass</span><span class="pn">&gt;]</span>
<span class="k">type</span> <span class="k">public</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="rt">ContextAwareTask</span> <span class="pn">(</span><span class="pn">)</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="mv">cat</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="id">Task</span><span class="pn">(</span><span class="pn">)</span>

    <span class="k">let</span> <span class="id">``type``</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="id">cat</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="id">GetType</span><span class="pn">(</span><span class="pn">)</span>
    <span class="k">let</span> <span class="id">typeInfo</span> <span class="o">=</span> <span class="id">``type``</span><span class="pn">.</span><span class="id">GetTypeInfo</span><span class="pn">(</span><span class="pn">)</span>

    <span class="k">abstract</span> <span class="prop">ManagedDllDirectory</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="rt">string</span> <span class="k">with</span> <span class="id">get</span>
    <span class="k">default</span> <span class="id">_</span><span class="pn">.</span><span class="prop">ManagedDllDirectory</span>
        <span class="k">with</span> <span class="prop">get</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
            <span class="k">let</span> <span class="id">codeBase</span> <span class="o">=</span> <span class="id">typeInfo</span><span class="pn">.</span><span class="id">Assembly</span><span class="pn">.</span><span class="id">CodeBase</span>
            <span class="k">let</span> <span class="id">uri</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="id">Uri</span><span class="pn">(</span><span class="id">codeBase</span><span class="pn">)</span>
            <span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="id">Path</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs15', 21)" onmouseover="showTip(event, 'fs15', 21)" class="id">GetDirectoryName</span><span class="pn">(</span><span class="id">uri</span><span class="pn">.</span><span class="id">LocalPath</span><span class="pn">)</span>

    <span class="k">abstract</span> <span class="prop">UnmanagedDllDirectory</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="rt">string</span> <span class="k">with</span> <span class="id">get</span>
    <span class="k">default</span> <span class="id">_</span><span class="pn">.</span><span class="prop">UnmanagedDllDirectory</span> <span class="k">with</span> <span class="prop">get</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span> <span class="k">null</span>

    <span class="k">abstract</span> <span class="k">member</span> <span class="fn">ExecuteInner</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="rt">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 24)" onmouseover="showTip(event, 'fs17', 24)" class="vt">bool</span>

    <span class="k">override</span> <span class="id">this</span><span class="pn">.</span><span class="fn">Execute</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
<span class="pp">#if</span> <span class="id">NETCOREAPP2_0</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">taskAssemblyPath</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">Uri(typeInfo.Assembly.CodeBase).LocalPath</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">ctxt</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">CustomAssemblyLoader(this)</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">inContextAssembly</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">ctxt.LoadFromAssemblyPath(taskAssemblyPath)</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">innerTaskType</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">inContextAssembly.GetType(``type``.FullName)</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">innerTask</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">Activator.CreateInstance(innerTaskType)</span>

<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">outerProperties</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">``type``.GetRuntimeProperties().ToDictionary(fun</span><span class="inactive"> </span><span class="inactive">i</span><span class="inactive"> </span><span class="inactive">-&gt;</span><span class="inactive"> </span><span class="inactive">i.Name);</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">innerProperties</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">innerTaskType.GetRuntimeProperties().ToDictionary(fun</span><span class="inactive"> </span><span class="inactive">i</span><span class="inactive"> </span><span class="inactive">-&gt;</span><span class="inactive"> </span><span class="inactive">i.Name);</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">propertiesDiscovery</span><span class="inactive"> </span><span class="inactive">=</span>
<span class="inactive">            </span><span class="inactive">outerProperties.Values</span>
<span class="inactive">            </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.filter</span><span class="inactive"> </span><span class="inactive">(fun</span><span class="inactive"> </span><span class="inactive">outerProperty</span><span class="inactive"> </span><span class="inactive">-&gt;</span><span class="inactive"> </span><span class="inactive">outerProperty.SetMethod</span><span class="inactive"> </span><span class="inactive">!=</span><span class="inactive"> </span><span class="inactive">null</span><span class="inactive"> </span><span class="inactive">&amp;&amp;</span><span class="inactive"> </span><span class="inactive">outerProperty.GetMethod</span><span class="inactive"> </span><span class="inactive">!=</span><span class="inactive"> </span><span class="inactive">null)</span>
<span class="inactive">            </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.map</span>
<span class="inactive">                </span><span class="inactive">(fun</span><span class="inactive"> </span><span class="inactive">outerProperty</span><span class="inactive"> </span><span class="inactive">-&gt;</span>
<span class="inactive">                    </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">innerProperty</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">innerProperties.[outerProperty.Name]</span>
<span class="inactive">                    </span><span class="inactive">(outerProperty,</span><span class="inactive"> </span><span class="inactive">innerProperty))</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">propertiesMap</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">propertiesDiscovery</span><span class="inactive"> </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.toArray</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">outputPropertiesMap</span><span class="inactive"> </span><span class="inactive">=</span>
<span class="inactive">            </span><span class="inactive">propertiesDiscovery</span>
<span class="inactive">            </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.filter</span><span class="inactive"> </span><span class="inactive">(fun</span><span class="inactive"> </span><span class="inactive">(outerProperty,</span><span class="inactive"> </span><span class="inactive">_)</span><span class="inactive"> </span><span class="inactive">-&gt;</span><span class="inactive"> </span><span class="inactive">outerProperty.GetCustomAttribute&lt;OutputAttribute&gt;()</span><span class="inactive"> </span><span class="inactive">!=</span><span class="inactive"> </span><span class="inactive">null)</span>

<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">propertiesMap</span><span class="inactive"> </span><span class="inactive">=</span>
<span class="inactive">            </span><span class="inactive">propertiesMap</span>
<span class="inactive">            </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.map</span>
<span class="inactive">                </span><span class="inactive">(fun</span><span class="inactive"> </span><span class="inactive">pair</span><span class="inactive"> </span><span class="inactive">-&gt;</span>
<span class="inactive">                    </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">outerPropertyValue</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">(fst</span><span class="inactive"> </span><span class="inactive">pair).GetValue(this)</span>
<span class="inactive">                    </span><span class="inactive">(snd</span><span class="inactive"> </span><span class="inactive">pair).SetValue(innerTask,</span><span class="inactive"> </span><span class="inactive">outerPropertyValue)</span>
<span class="inactive">                    </span><span class="inactive">pair)</span>

<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">executeInnerMethod</span><span class="inactive"> </span><span class="inactive">=</span>
<span class="inactive">            </span><span class="inactive">innerTaskType.GetMethod(nameof(this.ExecuteInner),</span><span class="inactive"> </span><span class="inactive">(BindingFlags.Instance</span><span class="inactive"> </span><span class="inactive">|||</span><span class="inactive"> </span><span class="inactive">BindingFlags.NonPublic))</span>
<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">result</span><span class="inactive"> </span><span class="inactive">=</span><span class="inactive"> </span><span class="inactive">executeInnerMethod.Invoke(innerTask,</span><span class="inactive"> </span><span class="inactive">Array.empty)</span><span class="inactive"> </span><span class="inactive">:?&gt;</span><span class="inactive"> </span><span class="inactive">bool</span>

<span class="inactive">        </span><span class="inactive">let</span><span class="inactive"> </span><span class="inactive">outputPropertiesMap</span><span class="inactive"> </span><span class="inactive">=</span>
<span class="inactive">            </span><span class="inactive">outputPropertiesMap</span>
<span class="inactive">            </span><span class="inactive">|&gt;</span><span class="inactive"> </span><span class="inactive">Seq.map</span>
<span class="inactive">                </span><span class="inactive">(fun</span><span class="inactive"> </span><span class="inactive">pair</span><span class="inactive"> </span><span class="inactive">-&gt;</span>
<span class="inactive">                    </span><span class="inactive">(fst</span><span class="inactive"> </span><span class="inactive">pair).SetValue(this,</span><span class="inactive"> </span><span class="inactive">(snd</span><span class="inactive"> </span><span class="inactive">pair).GetValue(innerTask)))</span>

<span class="inactive">        </span><span class="inactive">result</span>
<span class="pp">#else</span>
        <span class="c">// On .NET Framework (on Windows), we find native binaries by adding them to our PATH.</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs18', 25)" onmouseover="showTip(event, 'fs18', 25)" class="id">not</span> <span class="pn">(</span><span class="id">this</span><span class="pn">.</span><span class="id">UnmanagedDllDirectory</span> <span class="o">=</span> <span class="k">null</span><span class="pn">)</span> <span class="k">then</span>
            <span class="k">let</span> <span class="id">pathEnvVar</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 26)" onmouseover="showTip(event, 'fs19', 26)" class="id">Environment</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs20', 27)" onmouseover="showTip(event, 'fs20', 27)" class="id">GetEnvironmentVariable</span><span class="pn">(</span><span class="s">&quot;PATH&quot;</span><span class="pn">)</span>
            <span class="k">let</span> <span class="id">searchPaths</span> <span class="o">=</span> <span class="id">pathEnvVar</span><span class="pn">.</span><span class="id">Split</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs14', 28)" onmouseover="showTip(event, 'fs14', 28)" class="id">Path</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 29)" onmouseover="showTip(event, 'fs21', 29)" class="id">PathSeparator</span><span class="pn">)</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs18', 30)" onmouseover="showTip(event, 'fs18', 30)" class="id">not</span> <span class="pn">(</span><span class="id">searchPaths</span><span class="pn">.</span><span class="id">Contains</span><span class="pn">(</span><span class="id">this</span><span class="pn">.</span><span class="id">UnmanagedDllDirectory</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs22', 31)" onmouseover="showTip(event, 'fs22', 31)" class="id">StringComparer</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs23', 32)" onmouseover="showTip(event, 'fs23', 32)" class="id">OrdinalIgnoreCase</span><span class="pn">)</span><span class="pn">)</span> <span class="k">then</span>
                <span class="k">let</span> <span class="id">pathEnvVar</span> <span class="o">=</span> $&quot;<span class="pn">{</span><span class="id">pathEnvVar</span><span class="pn">}</span><span class="pn">{</span><span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="id">Path</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 34)" onmouseover="showTip(event, 'fs21', 34)" class="id">PathSeparator</span><span class="pn">}</span><span class="pn">{</span><span class="id">this</span><span class="pn">.</span><span class="id">UnmanagedDllDirectory</span><span class="pn">}</span><span class="s">&quot;</span>
<span class="s">                Environment.SetEnvironmentVariable(&quot;</span><span class="id">PATH</span><span class="s">&quot;, pathEnvVar)</span>

<span class="s">        this.ExecuteInner()</span>
<span class="s">#endif</span>

<span class="s">#if NETCOREAPP2_0</span>
<span class="s">type private CustomAssemblyLoader(loaderTask: ContextAwareTask) =</span>
<span class="s">    inherit AssemblyLoadContext</span>

<span class="s">    let loaderTask = loaderTask</span>

<span class="s">    override this.Load(assemblyName: AssemblyName) : Assembly =</span>
<span class="s">        let assemblyPath = Path.Combine(this.loaderTask.ManagedDllDirectory, assemblyName.Name) + &quot;</span><span class="pn">.</span><span class="id">dll</span><span class="s">&quot;</span>
<span class="s">        if File.Exists(assemblyPath) then</span>
<span class="s">            LoadFromAssemblyPath(assemblyPath)</span>
<span class="s">        Default.LoadFromAssemblyName(assemblyName)</span>

<span class="s">    override LoadUnmanagedDll(unmanagedDllName: string) : IntPtr =</span>
<span class="s">        let unmanagedDllPath =</span>
<span class="s">             Directory.EnumerateFiles(</span>
<span class="s">                this.loaderTask.UnmanagedDllDirectory,</span>
<span class="s">                $&quot;</span><span class="pn">{</span><span class="id">unmanagedDllName</span><span class="pn">}</span><span class="pn">.</span><span class="o">*</span><span class="s">&quot;).Concat(</span>
<span class="s">                    Directory.EnumerateFiles(</span>
<span class="s">                        this.loaderTask.UnmanagedDllDirectory,</span>
<span class="s">                        $&quot;</span><span class="id">lib</span><span class="pn">{</span><span class="id">unmanagedDllName</span><span class="pn">}</span><span class="pn">.</span><span class="o">*</span><span class="s">&quot;))</span>
<span class="s">                .FirstOrDefault()</span>

<span class="s">        if unmanagedDllPath != null then</span>
<span class="s">            this.LoadUnmanagedDllFromPath(unmanagedDllPath)</span>

<span class="s">        base.LoadUnmanagedDll(unmanagedDllName)</span>
<span class="s">#endif</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.IO</div>
<div class="tip" id="fs3">namespace System.Linq</div>
<div class="tip" id="fs4">namespace System.Reflection</div>
<div class="tip" id="fs5">namespace Microsoft</div>
<div class="tip" id="fs6">namespace Microsoft.Build</div>
<div class="tip" id="fs7">namespace Microsoft.Build.Framework</div>
<div class="tip" id="fs8">Multiple items<br />type AbstractClassAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AbstractClassAttribute<br /><br />--------------------<br />new : unit -&gt; AbstractClassAttribute</div>
<div class="tip" id="fs9">Multiple items<br />type ContextAwareTask =<br />&#160;&#160;inherit obj<br />&#160;&#160;new : unit -&gt; ContextAwareTask<br />&#160;&#160;abstract member ExecuteInner : unit -&gt; bool<br />&#160;&#160;abstract member ManagedDllDirectory : string<br />&#160;&#160;abstract member UnmanagedDllDirectory : string<br />&#160;&#160;override Execute : unit -&gt; &#39;a<br />&#160;&#160;override ManagedDllDirectory : string<br />&#160;&#160;override UnmanagedDllDirectory : string<br /><br />--------------------<br />new : unit -&gt; ContextAwareTask</div>
<div class="tip" id="fs10">val cat : ContextAwareTask</div>
<div class="tip" id="fs11"></div>
<div class="tip" id="fs12">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = String</div>
<div class="tip" id="fs13">Multiple items<br />type Uri =<br />&#160;&#160;new : uriString:string -&gt; Uri + 5 overloads<br />&#160;&#160;member AbsolutePath : string<br />&#160;&#160;member AbsoluteUri : string<br />&#160;&#160;member Authority : string<br />&#160;&#160;member DnsSafeHost : string<br />&#160;&#160;member Equals : comparand:obj -&gt; bool<br />&#160;&#160;member Fragment : string<br />&#160;&#160;member GetComponents : components:UriComponents * format:UriFormat -&gt; string<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetLeftPart : part:UriPartial -&gt; string<br />&#160;&#160;...<br /><br />--------------------<br />Uri(uriString: string) : Uri<br />Uri(uriString: string, uriKind: UriKind) : Uri<br />Uri(baseUri: Uri, relativeUri: string) : Uri<br />Uri(baseUri: Uri, relativeUri: Uri) : Uri</div>
<div class="tip" id="fs14">type Path =<br />&#160;&#160;static val DirectorySeparatorChar : char<br />&#160;&#160;static val AltDirectorySeparatorChar : char<br />&#160;&#160;static val VolumeSeparatorChar : char<br />&#160;&#160;static val PathSeparator : char<br />&#160;&#160;static val InvalidPathChars : char[]<br />&#160;&#160;static member ChangeExtension : path:string * extension:string -&gt; string<br />&#160;&#160;static member Combine : [&lt;ParamArray&gt;] paths:string[] -&gt; string + 3 overloads<br />&#160;&#160;static member EndsInDirectorySeparator : path:ReadOnlySpan&lt;char&gt; -&gt; bool + 1 overload<br />&#160;&#160;static member GetDirectoryName : path:string -&gt; string + 1 overload<br />&#160;&#160;static member GetExtension : path:string -&gt; string + 1 overload<br />&#160;&#160;...</div>
<div class="tip" id="fs15">Path.GetDirectoryName(path: ReadOnlySpan&lt;char&gt;) : ReadOnlySpan&lt;char&gt;<br />Path.GetDirectoryName(path: string) : string</div>
<div class="tip" id="fs16">type unit = Unit</div>
<div class="tip" id="fs17">type bool = Boolean</div>
<div class="tip" id="fs18">val not : value:bool -&gt; bool</div>
<div class="tip" id="fs19">type Environment =<br />&#160;&#160;static member CommandLine : string<br />&#160;&#160;static member CurrentDirectory : string with get, set<br />&#160;&#160;static member CurrentManagedThreadId : int<br />&#160;&#160;static member Exit : exitCode:int -&gt; unit<br />&#160;&#160;static member ExitCode : int with get, set<br />&#160;&#160;static member ExpandEnvironmentVariables : name:string -&gt; string<br />&#160;&#160;static member FailFast : message:string -&gt; unit + 2 overloads<br />&#160;&#160;static member GetCommandLineArgs : unit -&gt; string[]<br />&#160;&#160;static member GetEnvironmentVariable : variable:string -&gt; string + 1 overload<br />&#160;&#160;static member GetEnvironmentVariables : unit -&gt; IDictionary + 1 overload<br />&#160;&#160;...<br />&#160;&#160;nested type SpecialFolder<br />&#160;&#160;nested type SpecialFolderOption</div>
<div class="tip" id="fs20">Environment.GetEnvironmentVariable(variable: string) : string<br />Environment.GetEnvironmentVariable(variable: string, target: EnvironmentVariableTarget) : string</div>
<div class="tip" id="fs21">field Path.PathSeparator: char</div>
<div class="tip" id="fs22">type StringComparer =<br />&#160;&#160;member Compare : x:obj * y:obj -&gt; int + 1 overload<br />&#160;&#160;member Equals : x:obj * y:obj -&gt; bool + 1 overload<br />&#160;&#160;member GetHashCode : obj:obj -&gt; int + 1 overload<br />&#160;&#160;static member Create : culture:CultureInfo * ignoreCase:bool -&gt; StringComparer + 1 overload<br />&#160;&#160;static member CurrentCulture : StringComparer<br />&#160;&#160;static member CurrentCultureIgnoreCase : StringComparer<br />&#160;&#160;static member FromComparison : comparisonType:StringComparison -&gt; StringComparer<br />&#160;&#160;static member InvariantCulture : StringComparer<br />&#160;&#160;static member InvariantCultureIgnoreCase : StringComparer<br />&#160;&#160;static member Ordinal : StringComparer<br />&#160;&#160;...</div>
<div class="tip" id="fs23">property StringComparer.OrdinalIgnoreCase: StringComparer with get</div>

