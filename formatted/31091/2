<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
<span class="l">245: </span>
<span class="l">246: </span>
<span class="l">247: </span>
<span class="l">248: </span>
<span class="l">249: </span>
<span class="l">250: </span>
<span class="l">251: </span>
<span class="l">252: </span>
<span class="l">253: </span>
<span class="l">254: </span>
<span class="l">255: </span>
<span class="l">256: </span>
<span class="l">257: </span>
<span class="l">258: </span>
<span class="l">259: </span>
<span class="l">260: </span>
<span class="l">261: </span>
<span class="l">262: </span>
<span class="l">263: </span>
<span class="l">264: </span>
<span class="l">265: </span>
<span class="l">266: </span>
<span class="l">267: </span>
<span class="l">268: </span>
<span class="l">269: </span>
<span class="l">270: </span>
<span class="l">271: </span>
<span class="l">272: </span>
<span class="l">273: </span>
<span class="l">274: </span>
<span class="l">275: </span>
<span class="l">276: </span>
<span class="l">277: </span>
<span class="l">278: </span>
<span class="l">279: </span>
<span class="l">280: </span>
<span class="l">281: </span>
<span class="l">282: </span>
<span class="l">283: </span>
<span class="l">284: </span>
<span class="l">285: </span>
<span class="l">286: </span>
<span class="l">287: </span>
<span class="l">288: </span>
<span class="l">289: </span>
<span class="l">290: </span>
<span class="l">291: </span>
<span class="l">292: </span>
<span class="l">293: </span>
<span class="l">294: </span>
<span class="l">295: </span>
<span class="l">296: </span>
<span class="l">297: </span>
<span class="l">298: </span>
<span class="l">299: </span>
<span class="l">300: </span>
<span class="l">301: </span>
<span class="l">302: </span>
<span class="l">303: </span>
<span class="l">304: </span>
<span class="l">305: </span>
<span class="l">306: </span>
<span class="l">307: </span>
<span class="l">308: </span>
<span class="l">309: </span>
<span class="l">310: </span>
<span class="l">311: </span>
<span class="l">312: </span>
<span class="l">313: </span>
<span class="l">314: </span>
<span class="l">315: </span>
<span class="l">316: </span>
<span class="l">317: </span>
<span class="l">318: </span>
<span class="l">319: </span>
<span class="l">320: </span>
<span class="l">321: </span>
<span class="l">322: </span>
<span class="l">323: </span>
<span class="l">324: </span>
<span class="l">325: </span>
<span class="l">326: </span>
<span class="l">327: </span>
<span class="l">328: </span>
<span class="l">329: </span>
<span class="l">330: </span>
<span class="l">331: </span>
<span class="l">332: </span>
<span class="l">333: </span>
<span class="l">334: </span>
<span class="l">335: </span>
<span class="l">336: </span>
<span class="l">337: </span>
<span class="l">338: </span>
<span class="l">339: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Computations with extensible environment, error handling, and asynchronicity</span>

<span class="c">// I recently reviewed some F# code that turned out to be using</span>
<span class="c">//</span>
<span class="c">//   Dependency Interpretation</span>
<span class="c">//   https://fsharpforfunandprofit.com/posts/dependencies-4/</span>
<span class="c">//</span>
<span class="c">// and got thinking about whether one could construct a usable Zio like monad</span>
<span class="c">//</span>
<span class="c">//   https://zio.dev/</span>
<span class="c">//</span>
<span class="c">// in F# with an extensible environment, error handling, and asynchronicity.</span>

<span class="c">// The way I might put it, a primary motivation for using such a thing is that</span>
<span class="c">// it allows parts of application code to be parameterized with respect to</span>
<span class="c">// contextual dependencies, such as database connections or logging facilities,</span>
<span class="c">// in a relatively convenient manner.  This parameterization then makes it easy</span>
<span class="c">// to run parts of the application code in various contexts such as actual</span>
<span class="c">// production and under e.g. a unit testing environment.</span>

<span class="c">// Of course, it has already been known for a long time that we can achieve this</span>
<span class="c">// kind of extensibility in F# by using type constraints on type variables.</span>
<span class="c">// Scott Wlaschin explains the technique in</span>
<span class="c">//</span>
<span class="c">//   Dependency injection using the Reader monad</span>
<span class="c">//   https://fsharpforfunandprofit.com/posts/dependencies-3/</span>
<span class="c">//</span>
<span class="c">// and there are advanced libraries for F# using (in part) similar techniques</span>
<span class="c">// such as</span>
<span class="c">//</span>
<span class="c">//   Eff</span>
<span class="c">//   https://github.com/palladin/Eff</span>
<span class="c">//</span>
<span class="c">// by Nick Palladinos.</span>

<span class="c">// So, the technicality I&#39;m particular interested in is in how one might make</span>
<span class="c">// the error handling mechanism extensible.  More specifically, it should be</span>
<span class="c">// easy to introduce new error types, raise errors of such types, and handle</span>
<span class="c">// errors.  Furthermore, it would be nice to have the combination of errors</span>
<span class="c">// potentially raised be inferred by the compiler and it would be nice that</span>
<span class="c">// errors could be handled and removed from the combination.  Essentially a kind</span>
<span class="c">// of checked exceptions.  Of course, as argued by Eirik Tsarpalis,</span>
<span class="c">//</span>
<span class="c">//   You’re better off using Exceptions</span>
<span class="c">//   https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/</span>
<span class="c">//</span>
<span class="c">// in most cases, but curiosity got the better of me.</span>

<span class="c">// Without further ado, let&#39;s sketch such a Zio style monad!</span>

<span class="c">// First let&#39;s the define the `Zio&lt;&#39;r, &#39;h, &#39;a&gt;` type:</span>

<span class="k">type</span> <span class="rt">Zio</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span> <span class="o">=</span>
  <span class="pn">{</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="fn">go</span><span class="pn">:</span> <span class="ta">&#39;</span><span class="id">r</span> <span class="k">-&gt;</span> <span class="ta">&#39;</span><span class="id">h</span> <span class="k">-&gt;</span> <span class="pn">(</span><span class="ta">&#39;</span><span class="id">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="rt">unit</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="rt">unit</span> <span class="pn">}</span>

<span class="c">// If you are familiar with Zio, then you might have noticed that I named the</span>
<span class="c">// second type parameter `&#39;h`, for &quot;handler&quot;, rather than `&#39;e`, for &quot;error&quot;.</span>
<span class="c">// That choice of word is the key to the extensible error mechanism.</span>

<span class="c">// So, basically, a value of the `Zio&lt;&#39;r, &#39;h, &#39;a&gt;` type is a computation that</span>
<span class="c">// requires an environment of type `&#39;r` and may either produce a value, or</span>
<span class="c">// answer, of type `&#39;a` or raise an error that needs a handler of type `&#39;h`.</span>

<span class="c">// The concrete implementation is essentially a function that takes the</span>
<span class="c">// environment, handler, and a continuation as parameters.  The record wrapper,</span>
<span class="c">// `{ go: ... }`, is there just to make the inferred types more readable.</span>

<span class="c">// Below is the straightforward computation expression builder definition `zio`:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="rt">ZioBuilder</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
  <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Delay</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="fn">f</span><span class="pn">)</span> <span class="o">=</span> <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="id">r</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="id">h</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="fn">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 9)" onmouseover="showTip(event, 'fs4', 9)" class="fn">f</span><span class="pn">(</span><span class="pn">)</span><span class="pn">.</span><span class="id">go</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="id">r</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="id">h</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="fn">k</span> <span class="pn">}</span>
  <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">ReturnFrom</span> <span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="id">xZ</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="id">xZ</span>
  <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Return</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="id">x</span> <span class="o">=</span> <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span class="id">_</span> <span class="id">_</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="fn">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="fn">k</span> <span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="id">x</span> <span class="pn">}</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="id">this</span><span class="pn">.</span><span class="fn">Zero</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 20)" onmouseover="showTip(event, 'fs11', 20)" class="fn">this</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs12', 21)" onmouseover="showTip(event, 'fs12', 21)" class="id">Return</span><span class="pn">(</span><span class="pn">)</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs11', 22)" onmouseover="showTip(event, 'fs11', 22)" class="id">this</span><span class="pn">.</span><span class="fn">Combine</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="id">lZ</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="id">rZ</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 25)" onmouseover="showTip(event, 'fs11', 25)" class="fn">this</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="id">Bind</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs13', 27)" onmouseover="showTip(event, 'fs13', 27)" class="id">lZ</span><span class="pn">,</span> <span class="pn">(</span><span class="k">fun</span> <span class="id">_</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs14', 28)" onmouseover="showTip(event, 'fs14', 28)" class="id">rZ</span><span class="pn">)</span><span class="pn">)</span>

  <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Bind</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs16', 29)" onmouseover="showTip(event, 'fs16', 29)" class="id">xZ</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="fn">xyZ</span><span class="pn">)</span> <span class="o">=</span>
    <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs18', 31)" onmouseover="showTip(event, 'fs18', 31)" class="id">r</span> <span onmouseout="hideTip(event, 'fs19', 32)" onmouseover="showTip(event, 'fs19', 32)" class="id">h</span> <span onmouseout="hideTip(event, 'fs20', 33)" onmouseover="showTip(event, 'fs20', 33)" class="fn">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs16', 34)" onmouseover="showTip(event, 'fs16', 34)" class="fn">xZ</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs21', 35)" onmouseover="showTip(event, 'fs21', 35)" class="id">go</span> <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="id">r</span> <span onmouseout="hideTip(event, 'fs19', 37)" onmouseover="showTip(event, 'fs19', 37)" class="id">h</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs22', 38)" onmouseover="showTip(event, 'fs22', 38)" class="id">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 39)" onmouseover="showTip(event, 'fs17', 39)" class="fn">xyZ</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs22', 40)" onmouseover="showTip(event, 'fs22', 40)" class="id">x</span><span class="pn">)</span><span class="pn">.</span><span class="id">go</span> <span onmouseout="hideTip(event, 'fs18', 41)" onmouseover="showTip(event, 'fs18', 41)" class="id">r</span> <span onmouseout="hideTip(event, 'fs19', 42)" onmouseover="showTip(event, 'fs19', 42)" class="id">h</span> <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="fn">k</span><span class="pn">)</span> <span class="pn">}</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 44)" onmouseover="showTip(event, 'fs23', 44)" class="id">zio</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 45)" onmouseover="showTip(event, 'fs3', 45)" class="rt">ZioBuilder</span><span class="pn">(</span><span class="pn">)</span>

<span class="c">// We also need a primitive operation for accessing the environment `ask`:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="id">ask</span> <span class="o">=</span> <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs18', 47)" onmouseover="showTip(event, 'fs18', 47)" class="id">r</span> <span class="id">_</span> <span onmouseout="hideTip(event, 'fs25', 48)" onmouseover="showTip(event, 'fs25', 48)" class="fn">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs25', 49)" onmouseover="showTip(event, 'fs25', 49)" class="fn">k</span> <span onmouseout="hideTip(event, 'fs18', 50)" onmouseover="showTip(event, 'fs18', 50)" class="id">r</span> <span class="pn">}</span>

<span class="c">// And, for convenience, let&#39;s define a helper for `call`ing methods of services</span>
<span class="c">// passed through the environment:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 51)" onmouseover="showTip(event, 'fs26', 51)" class="fn">call</span> <span onmouseout="hideTip(event, 'fs27', 52)" onmouseover="showTip(event, 'fs27', 52)" class="fn">fn</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 53)" onmouseover="showTip(event, 'fs23', 53)" class="fn">zio</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs15', 54)" onmouseover="showTip(event, 'fs15', 54)" class="id">Bind</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs24', 55)" onmouseover="showTip(event, 'fs24', 55)" class="id">ask</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs27', 56)" onmouseover="showTip(event, 'fs27', 56)" class="fn">fn</span><span class="pn">)</span>

<span class="c">// So, with the above we can already write application code that is</span>
<span class="c">// parameterized with respect to their dependencies.</span>

<span class="c">// For example, we could define a service for reading lines of input</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs28', 57)" onmouseover="showTip(event, 'fs28', 57)" class="if">IReadLn</span> <span class="o">=</span>
  <span class="k">abstract</span> <span class="fn">ReadLn</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs2', 58)" onmouseover="showTip(event, 'fs2', 58)" class="rt">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs29', 59)" onmouseover="showTip(event, 'fs29', 59)" class="rt">Zio</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs30', 60)" onmouseover="showTip(event, 'fs30', 60)" class="rt">option</span><span class="pn">&lt;</span><span onmouseout="hideTip(event, 'fs31', 61)" onmouseover="showTip(event, 'fs31', 61)" class="rt">string</span><span class="pn">&gt;</span><span class="pn">&gt;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 62)" onmouseover="showTip(event, 'fs32', 62)" class="fn">readLn</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 63)" onmouseover="showTip(event, 'fs26', 63)" class="fn">call</span> <span class="pn">(</span><span class="k">fun</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs33', 64)" onmouseover="showTip(event, 'fs33', 64)" class="id">s</span><span class="pn">:</span> <span class="pn">#</span><span onmouseout="hideTip(event, 'fs28', 65)" onmouseover="showTip(event, 'fs28', 65)" class="if">IReadLn</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs33', 66)" onmouseover="showTip(event, 'fs33', 66)" class="fn">s</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs34', 67)" onmouseover="showTip(event, 'fs34', 67)" class="id">ReadLn</span><span class="pn">(</span><span class="pn">)</span><span class="pn">)</span>

<span class="c">// and a service for writing lines of output</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs35', 68)" onmouseover="showTip(event, 'fs35', 68)" class="if">IWriteLn</span> <span class="o">=</span>
  <span class="k">abstract</span> <span class="fn">WriteLn</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs31', 69)" onmouseover="showTip(event, 'fs31', 69)" class="rt">string</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs29', 70)" onmouseover="showTip(event, 'fs29', 70)" class="rt">Zio</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs2', 71)" onmouseover="showTip(event, 'fs2', 71)" class="rt">unit</span><span class="pn">&gt;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 72)" onmouseover="showTip(event, 'fs36', 72)" class="fn">writeLn</span> <span onmouseout="hideTip(event, 'fs37', 73)" onmouseover="showTip(event, 'fs37', 73)" class="id">t</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs26', 74)" onmouseover="showTip(event, 'fs26', 74)" class="fn">call</span> <span class="pn">(</span><span class="k">fun</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs38', 75)" onmouseover="showTip(event, 'fs38', 75)" class="id">s</span><span class="pn">:</span> <span class="pn">#</span><span onmouseout="hideTip(event, 'fs35', 76)" onmouseover="showTip(event, 'fs35', 76)" class="if">IWriteLn</span><span class="pn">)</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 77)" onmouseover="showTip(event, 'fs38', 77)" class="fn">s</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs39', 78)" onmouseover="showTip(event, 'fs39', 78)" class="id">WriteLn</span> <span onmouseout="hideTip(event, 'fs37', 79)" onmouseover="showTip(event, 'fs37', 79)" class="id">t</span><span class="pn">)</span>

<span class="c">// An essential detail above is the use of flexibly typed parameters `s:</span>
<span class="c">// #IReadLn` and `s: #IWriteLn`.  It is a key to make the type inference for the</span>
<span class="c">// usages work out nicely.</span>

<span class="c">// As an example, we could now write a computation that copies all lines from</span>
<span class="c">// input to the output:</span>

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs40', 80)" onmouseover="showTip(event, 'fs40', 80)" class="fn">copyAll</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs23', 81)" onmouseover="showTip(event, 'fs23', 81)" class="k">zio</span> <span class="pn">{</span>
    <span class="k">match!</span> <span onmouseout="hideTip(event, 'fs32', 82)" onmouseover="showTip(event, 'fs32', 82)" class="fn">readLn</span> <span class="pn">(</span><span class="pn">)</span> <span class="k">with</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs41', 83)" onmouseover="showTip(event, 'fs41', 83)" class="uc">None</span> <span class="k">-&gt;</span> <span class="k">return</span> <span class="pn">(</span><span class="pn">)</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs42', 84)" onmouseover="showTip(event, 'fs42', 84)" class="uc">Some</span> <span onmouseout="hideTip(event, 'fs43', 85)" onmouseover="showTip(event, 'fs43', 85)" class="id">line</span> <span class="k">-&gt;</span>
      <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs36', 86)" onmouseover="showTip(event, 'fs36', 86)" class="fn">writeLn</span> <span onmouseout="hideTip(event, 'fs43', 87)" onmouseover="showTip(event, 'fs43', 87)" class="id">line</span>
      <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs40', 88)" onmouseover="showTip(event, 'fs40', 88)" class="fn">copyAll</span> <span class="pn">(</span><span class="pn">)</span>
  <span class="pn">}</span>

<span class="c">// The signature conveniently inferred for the `copyAll` computation</span>
<span class="c">//</span>
<span class="c">//   val copyAll:</span>
<span class="c">//     unit -&gt; Zio&lt;&#39;r, &#39;h, unit&gt; when &#39;r :&gt; IWriteLn and &#39;r :&gt; IReadLn</span>
<span class="c">//</span>
<span class="c">// shows that `copyAll` requires the environment `&#39;r` to provide both the</span>
<span class="c">// `IWriteLn` and `IReadLn` interfaces.</span>
<span class="c">//</span>
<span class="c">// Note that the handler type `&#39;h` remains unconstrained.  This means that the</span>
<span class="c">// `copyAll` computation does not raise errors.</span>

<span class="c">// Of course, things are rarely this simple.  In the above we essentially</span>
<span class="c">// assumed that neither the `ReadLn` nor the `WriteLn` computation can fail.</span>
<span class="c">// That is rarely a valid assumption and there are situations where we&#39;d like to</span>
<span class="c">// write code that is guaranteed to handle some failure conditions at some</span>
<span class="c">// point.</span>

<span class="c">// Did you react to the wording &quot;handle some failure conditions at some point&quot;?</span>
<span class="c">// Perhaps it sounds rather vague.  However, the wording is intentional.  Some</span>
<span class="c">// errors in a program are such that you never want to handle them.  You just</span>
<span class="c">// let the program crash with a stack trace.  Other &quot;errors&quot; are such that you</span>
<span class="c">// don&#39;t only want to handle them, but they are best expressed as an ordinary</span>
<span class="c">// case of the result of an operation.  And then there are errors that you&#39;d</span>
<span class="c">// rather not handle after every operation, but you still want your program to</span>
<span class="c">// handle them at some point.  Say, when performing a sequence of operations,</span>
<span class="c">// you just want to make sure that any error from any step of the sequence will</span>
<span class="c">// stop the sequence and will be handled e.g. by giving a suitable message to</span>
<span class="c">// the user.  It is the last of these three cases that is of interest here.</span>

<span class="c">// First we introduce a primitive operation to `throw` errors:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs44', 89)" onmouseover="showTip(event, 'fs44', 89)" class="fn">throw</span> <span onmouseout="hideTip(event, 'fs45', 90)" onmouseover="showTip(event, 'fs45', 90)" class="fn">e</span> <span class="o">=</span> <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span class="id">_</span> <span onmouseout="hideTip(event, 'fs46', 91)" onmouseover="showTip(event, 'fs46', 91)" class="id">h</span> <span class="fn">_</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs45', 92)" onmouseover="showTip(event, 'fs45', 92)" class="fn">e</span> <span onmouseout="hideTip(event, 'fs46', 93)" onmouseover="showTip(event, 'fs46', 93)" class="id">h</span> <span class="pn">}</span>

<span class="c">// This is the first point where we make use of the `h` or handler.  The handler</span>
<span class="c">// `h` is passed to the error `e`.</span>

<span class="c">// We also need an operation to `catch` errors:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs47', 94)" onmouseover="showTip(event, 'fs47', 94)" class="rt">ZioRunner</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs48', 95)" onmouseover="showTip(event, 'fs48', 95)" class="id">r</span><span class="pn">:</span> <span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs49', 96)" onmouseover="showTip(event, 'fs49', 96)" class="id">h</span><span class="pn">:</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs25', 97)" onmouseover="showTip(event, 'fs25', 97)" class="fn">k</span><span class="pn">:</span> <span class="ta">&#39;</span><span class="id">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 98)" onmouseover="showTip(event, 'fs2', 98)" class="rt">unit</span><span class="pn">)</span> <span class="o">=</span>
  <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs3', 99)" onmouseover="showTip(event, 'fs3', 99)" class="rt">ZioBuilder</span><span class="pn">(</span><span class="pn">)</span>
  <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">Run</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs50', 100)" onmouseover="showTip(event, 'fs50', 100)" class="id">xZ</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs29', 101)" onmouseover="showTip(event, 'fs29', 101)" class="rt">Zio</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">h</span><span class="pn">,</span> <span class="ta">&#39;</span><span class="id">a</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs50', 102)" onmouseover="showTip(event, 'fs50', 102)" class="fn">xZ</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs1', 103)" onmouseover="showTip(event, 'fs1', 103)" class="id">go</span> <span onmouseout="hideTip(event, 'fs48', 104)" onmouseover="showTip(event, 'fs48', 104)" class="id">r</span> <span onmouseout="hideTip(event, 'fs49', 105)" onmouseover="showTip(event, 'fs49', 105)" class="id">h</span> <span onmouseout="hideTip(event, 'fs25', 106)" onmouseover="showTip(event, 'fs25', 106)" class="fn">k</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 107)" onmouseover="showTip(event, 'fs51', 107)" class="fn">catch</span> <span onmouseout="hideTip(event, 'fs52', 108)" onmouseover="showTip(event, 'fs52', 108)" class="fn">h&#39;</span> <span onmouseout="hideTip(event, 'fs53', 109)" onmouseover="showTip(event, 'fs53', 109)" class="id">xZ</span> <span class="o">=</span>
  <span class="pn">{</span> <span class="fn">go</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs18', 110)" onmouseover="showTip(event, 'fs18', 110)" class="id">r</span> <span onmouseout="hideTip(event, 'fs19', 111)" onmouseover="showTip(event, 'fs19', 111)" class="id">h</span> <span onmouseout="hideTip(event, 'fs54', 112)" onmouseover="showTip(event, 'fs54', 112)" class="fn">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs53', 113)" onmouseover="showTip(event, 'fs53', 113)" class="fn">xZ</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs55', 114)" onmouseover="showTip(event, 'fs55', 114)" class="id">go</span> <span onmouseout="hideTip(event, 'fs18', 115)" onmouseover="showTip(event, 'fs18', 115)" class="id">r</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs52', 116)" onmouseover="showTip(event, 'fs52', 116)" class="fn">h&#39;</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs47', 117)" onmouseover="showTip(event, 'fs47', 117)" class="rt">ZioRunner</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs18', 118)" onmouseover="showTip(event, 'fs18', 118)" class="id">r</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs19', 119)" onmouseover="showTip(event, 'fs19', 119)" class="id">h</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs54', 120)" onmouseover="showTip(event, 'fs54', 120)" class="fn">k</span><span class="pn">)</span><span class="pn">)</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs54', 121)" onmouseover="showTip(event, 'fs54', 121)" class="fn">k</span> <span class="pn">}</span>

<span class="c">// The implementation here is a bit more tricky.  We want to allow error</span>
<span class="c">// handlers to also perform arbitrary computations in the same monad.  As our</span>
<span class="c">// monad uses continuation passing we can keep the types simple by passing in a</span>
<span class="c">// special computation builder when constructing handlers.</span>

<span class="c">// So, how does one use this error mechanism then?</span>

<span class="c">// Well, to define a new error, one defines an interface for the handler of such</span>
<span class="c">// errors.  As an example, let&#39;s define an error for unexpected end of input:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs56', 122)" onmouseover="showTip(event, 'fs56', 122)" class="if">IUnexpectedEndOfInput</span> <span class="o">=</span>
  <span class="k">abstract</span> <span class="fn">UnexpectedEndOfInput</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs2', 123)" onmouseover="showTip(event, 'fs2', 123)" class="rt">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 124)" onmouseover="showTip(event, 'fs2', 124)" class="rt">unit</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 125)" onmouseover="showTip(event, 'fs57', 125)" class="fn">UnexpectedEndOfInput</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs58', 126)" onmouseover="showTip(event, 'fs58', 126)" class="id">h</span><span class="pn">:</span> <span class="pn">#</span><span onmouseout="hideTip(event, 'fs56', 127)" onmouseover="showTip(event, 'fs56', 127)" class="if">IUnexpectedEndOfInput</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs58', 128)" onmouseover="showTip(event, 'fs58', 128)" class="fn">h</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs59', 129)" onmouseover="showTip(event, 'fs59', 129)" class="id">UnexpectedEndOfInput</span><span class="pn">(</span><span class="pn">)</span>

<span class="c">// The function `UnexpectedEndOfInput` is helper we use with `throw`.  Its usage</span>
<span class="c">// looks like an error constructor.  Note again the use of a flexible type for</span>
<span class="c">// the handler parameter.</span>

<span class="c">// As an example, we could now define a `copy1` operation that copies a line</span>
<span class="c">// of input to output or throws the error:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 130)" onmouseover="showTip(event, 'fs60', 130)" class="fn">copy1</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs23', 131)" onmouseover="showTip(event, 'fs23', 131)" class="k">zio</span> <span class="pn">{</span>
    <span class="k">match!</span> <span onmouseout="hideTip(event, 'fs32', 132)" onmouseover="showTip(event, 'fs32', 132)" class="fn">readLn</span> <span class="pn">(</span><span class="pn">)</span> <span class="k">with</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs41', 133)" onmouseover="showTip(event, 'fs41', 133)" class="uc">None</span> <span class="k">-&gt;</span> <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs44', 134)" onmouseover="showTip(event, 'fs44', 134)" class="fn">throw</span> <span onmouseout="hideTip(event, 'fs57', 135)" onmouseover="showTip(event, 'fs57', 135)" class="fn">UnexpectedEndOfInput</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs42', 136)" onmouseover="showTip(event, 'fs42', 136)" class="uc">Some</span> <span onmouseout="hideTip(event, 'fs43', 137)" onmouseover="showTip(event, 'fs43', 137)" class="id">line</span> <span class="k">-&gt;</span> <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs36', 138)" onmouseover="showTip(event, 'fs36', 138)" class="fn">writeLn</span> <span onmouseout="hideTip(event, 'fs43', 139)" onmouseover="showTip(event, 'fs43', 139)" class="id">line</span>
  <span class="pn">}</span>

<span class="c">// The signature</span>
<span class="c">//</span>
<span class="c">//   val copy1:</span>
<span class="c">//     unit -&gt; Zio&lt;&#39;r, #IUnexpectedEndOfInput, unit&gt;</span>
<span class="c">//       when &#39;r :&gt; IWriteLn and &#39;r :&gt; IReadLn</span>
<span class="c">//</span>
<span class="c">// reflects both the environment and error handling requirements of the</span>
<span class="c">// operation.</span>

<span class="c">// Let&#39;s then define another error for too long lines</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs61', 140)" onmouseover="showTip(event, 'fs61', 140)" class="if">ILineTooLong</span> <span class="o">=</span>
  <span class="k">abstract</span> <span class="fn">LineTooLong</span> <span class="pn">:</span> <span onmouseout="hideTip(event, 'fs62', 141)" onmouseover="showTip(event, 'fs62', 141)" class="id">max</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs63', 142)" onmouseover="showTip(event, 'fs63', 142)" class="vt">int</span> <span class="pn">*</span> <span class="id">actual</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs63', 143)" onmouseover="showTip(event, 'fs63', 143)" class="vt">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 144)" onmouseover="showTip(event, 'fs2', 144)" class="rt">unit</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 145)" onmouseover="showTip(event, 'fs64', 145)" class="fn">LineTooLong</span> <span onmouseout="hideTip(event, 'fs65', 146)" onmouseover="showTip(event, 'fs65', 146)" class="id">e</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs66', 147)" onmouseover="showTip(event, 'fs66', 147)" class="id">h</span><span class="pn">:</span> <span class="pn">#</span><span onmouseout="hideTip(event, 'fs61', 148)" onmouseover="showTip(event, 'fs61', 148)" class="if">ILineTooLong</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs66', 149)" onmouseover="showTip(event, 'fs66', 149)" class="fn">h</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs67', 150)" onmouseover="showTip(event, 'fs67', 150)" class="id">LineTooLong</span> <span onmouseout="hideTip(event, 'fs65', 151)" onmouseover="showTip(event, 'fs65', 151)" class="id">e</span>

<span class="c">// and another operation for copying a line of given maximum length</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs68', 152)" onmouseover="showTip(event, 'fs68', 152)" class="fn">copy1Of</span> <span onmouseout="hideTip(event, 'fs69', 153)" onmouseover="showTip(event, 'fs69', 153)" class="id">max</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs23', 154)" onmouseover="showTip(event, 'fs23', 154)" class="k">zio</span> <span class="pn">{</span>
    <span class="k">match!</span> <span onmouseout="hideTip(event, 'fs32', 155)" onmouseover="showTip(event, 'fs32', 155)" class="fn">readLn</span> <span class="pn">(</span><span class="pn">)</span> <span class="k">with</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs41', 156)" onmouseover="showTip(event, 'fs41', 156)" class="uc">None</span> <span class="k">-&gt;</span> <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs44', 157)" onmouseover="showTip(event, 'fs44', 157)" class="fn">throw</span> <span onmouseout="hideTip(event, 'fs57', 158)" onmouseover="showTip(event, 'fs57', 158)" class="fn">UnexpectedEndOfInput</span>
    <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs42', 159)" onmouseover="showTip(event, 'fs42', 159)" class="uc">Some</span> <span onmouseout="hideTip(event, 'fs43', 160)" onmouseover="showTip(event, 'fs43', 160)" class="id">line</span> <span class="k">-&gt;</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs69', 161)" onmouseover="showTip(event, 'fs69', 161)" class="id">max</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs43', 162)" onmouseover="showTip(event, 'fs43', 162)" class="id">line</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs70', 163)" onmouseover="showTip(event, 'fs70', 163)" class="id">Length</span> <span class="k">then</span>
        <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs44', 164)" onmouseover="showTip(event, 'fs44', 164)" class="fn">throw</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs64', 165)" onmouseover="showTip(event, 'fs64', 165)" class="fn">LineTooLong</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs69', 166)" onmouseover="showTip(event, 'fs69', 166)" class="id">max</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs43', 167)" onmouseover="showTip(event, 'fs43', 167)" class="id">line</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs70', 168)" onmouseover="showTip(event, 'fs70', 168)" class="id">Length</span><span class="pn">)</span><span class="pn">)</span>

      <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs36', 169)" onmouseover="showTip(event, 'fs36', 169)" class="fn">writeLn</span> <span onmouseout="hideTip(event, 'fs43', 170)" onmouseover="showTip(event, 'fs43', 170)" class="id">line</span>
  <span class="pn">}</span>

<span class="c">// Again, the inferred signature</span>
<span class="c">//</span>
<span class="c">//   val copy1Of:</span>
<span class="c">//     max: int -&gt; Zio&lt;&#39;r, &#39;h, unit&gt;</span>
<span class="c">//       when &#39;r :&gt; IWriteLn and &#39;r :&gt; IReadLn</span>
<span class="c">//        and &#39;h :&gt; ILineTooLong and &#39;h :&gt; IUnexpectedEndOfInput</span>
<span class="c">//</span>
<span class="c">// reflects both the environment and error handling requirements.</span>

<span class="c">// Let&#39;s put together the happy path of a little interaction:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 171)" onmouseover="showTip(event, 'fs71', 171)" class="fn">interaction</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs23', 172)" onmouseover="showTip(event, 'fs23', 172)" class="k">zio</span> <span class="pn">{</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs36', 173)" onmouseover="showTip(event, 'fs36', 173)" class="fn">writeLn</span> <span class="s">&quot;Type me max 10 characters:&quot;</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs68', 174)" onmouseover="showTip(event, 'fs68', 174)" class="fn">copy1Of</span> <span class="n">10</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs36', 175)" onmouseover="showTip(event, 'fs36', 175)" class="fn">writeLn</span> <span class="s">&quot;Thank you for your co-operation!&quot;</span>
  <span class="pn">}</span>

<span class="c">// Can you guess the signature of `interaction`?</span>

<span class="c">// Alright, let&#39;s then figure out how we can actually run these kinds of</span>
<span class="c">// computations.  For that purpose let&#39;s first define a primitive `startIn`</span>
<span class="c">// operation:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 176)" onmouseover="showTip(event, 'fs72', 176)" class="fn">startIn</span> <span onmouseout="hideTip(event, 'fs48', 177)" onmouseover="showTip(event, 'fs48', 177)" class="id">r</span> <span class="pn">(</span><span onmouseout="hideTip(event, 'fs73', 178)" onmouseover="showTip(event, 'fs73', 178)" class="id">uZ</span><span class="pn">:</span> <span onmouseout="hideTip(event, 'fs29', 179)" onmouseover="showTip(event, 'fs29', 179)" class="rt">Zio</span><span class="pn">&lt;</span><span class="ta">&#39;</span><span class="id">r</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs2', 180)" onmouseover="showTip(event, 'fs2', 180)" class="rt">unit</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs2', 181)" onmouseover="showTip(event, 'fs2', 181)" class="rt">unit</span><span class="pn">&gt;</span><span class="pn">)</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs73', 182)" onmouseover="showTip(event, 'fs73', 182)" class="fn">uZ</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs74', 183)" onmouseover="showTip(event, 'fs74', 183)" class="id">go</span> <span onmouseout="hideTip(event, 'fs48', 184)" onmouseover="showTip(event, 'fs48', 184)" class="id">r</span> <span class="pn">(</span><span class="pn">)</span> <span onmouseout="hideTip(event, 'fs75', 185)" onmouseover="showTip(event, 'fs75', 185)" class="fn">id</span>

<span class="c">// Notice that while the environment is allowed to be of any type, the handler</span>
<span class="c">// (and the answer type) are required to be of type `unit`.  The effect of that</span>
<span class="c">// is to ensure that no errors can be left unhandled and no (interesting) result</span>
<span class="c">// may be ignored implicitly.</span>

<span class="c">// How do we handle the errors?  First we need to define an interface that</span>
<span class="c">// inherits all the handlers that our program requires.</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs76', 186)" onmouseover="showTip(event, 'fs76', 186)" class="if">IHandler</span> <span class="o">=</span>
  <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs56', 187)" onmouseover="showTip(event, 'fs56', 187)" class="if">IUnexpectedEndOfInput</span>
  <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs61', 188)" onmouseover="showTip(event, 'fs61', 188)" class="if">ILineTooLong</span>

<span class="c">// Now we can define a `program` that performs the `interaction` and also</span>
<span class="c">// catches the errors:</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 189)" onmouseover="showTip(event, 'fs77', 189)" class="fn">program</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs71', 190)" onmouseover="showTip(event, 'fs71', 190)" class="fn">interaction</span> <span class="pn">(</span><span class="pn">)</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs51', 191)" onmouseover="showTip(event, 'fs51', 191)" class="fn">catch</span> <span class="pn">(</span><span class="k">fun</span> <span onmouseout="hideTip(event, 'fs78', 192)" onmouseover="showTip(event, 'fs78', 192)" class="id">zio</span> <span class="k">-&gt;</span>
    <span class="pn">{</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs76', 193)" onmouseover="showTip(event, 'fs76', 193)" class="if">IHandler</span> <span class="k">with</span>
        <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs57', 194)" onmouseover="showTip(event, 'fs57', 194)" class="fn">UnexpectedEndOfInput</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
          <span onmouseout="hideTip(event, 'fs78', 195)" onmouseover="showTip(event, 'fs78', 195)" class="k">zio</span> <span class="pn">{</span> <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs36', 196)" onmouseover="showTip(event, 'fs36', 196)" class="fn">writeLn</span> <span class="s">&quot;You gave me nothing!&quot;</span> <span class="pn">}</span>

        <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs64', 197)" onmouseover="showTip(event, 'fs64', 197)" class="fn">LineTooLong</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs69', 198)" onmouseover="showTip(event, 'fs69', 198)" class="id">max</span><span class="pn">,</span> <span onmouseout="hideTip(event, 'fs79', 199)" onmouseover="showTip(event, 'fs79', 199)" class="id">actual</span><span class="pn">)</span> <span class="o">=</span>
          <span onmouseout="hideTip(event, 'fs78', 200)" onmouseover="showTip(event, 'fs78', 200)" class="k">zio</span> <span class="pn">{</span>
            <span class="k">return!</span>
              <span onmouseout="hideTip(event, 'fs36', 201)" onmouseover="showTip(event, 'fs36', 201)" class="fn">writeLn</span> <span class="pn">(</span>
                <span onmouseout="hideTip(event, 'fs80', 202)" onmouseover="showTip(event, 'fs80', 202)" class="fn">sprintf</span>
                  <span class="s">&quot;You gave me </span><span class="pf">%d</span><span class="s"> characters more than I asked!&quot;</span>
                  <span class="pn">(</span><span onmouseout="hideTip(event, 'fs79', 203)" onmouseover="showTip(event, 'fs79', 203)" class="id">actual</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs69', 204)" onmouseover="showTip(event, 'fs69', 204)" class="id">max</span><span class="pn">)</span>
              <span class="pn">)</span>
          <span class="pn">}</span> <span class="pn">}</span><span class="pn">)</span>

<span class="c">// What is the signature of `program`?</span>
<span class="c">//</span>
<span class="c">// Using `catch` allows handler constraints to be changed.  The old constraints</span>
<span class="c">// are dropped and the new constraints are based on the error handling</span>
<span class="c">// requirements of the handlers and following computation.  In this case the</span>
<span class="c">// following computation has no further error handling requirements and the</span>
<span class="c">// signature of `program`</span>
<span class="c">//</span>
<span class="c">//   val program:</span>
<span class="c">//     unit -&gt; Zio&lt;&#39;r, &#39;h, unit&gt; when &#39;r :&gt; IWriteLn and &#39;r :&gt; IReadLn</span>
<span class="c">//</span>
<span class="c">// shows that.</span>

<span class="c">// The next thing we need is to implement the environment.  We similarly need to</span>
<span class="c">// define the combined environment signature:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs81', 205)" onmouseover="showTip(event, 'fs81', 205)" class="if">IEnv</span> <span class="o">=</span>
  <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs28', 206)" onmouseover="showTip(event, 'fs28', 206)" class="if">IReadLn</span>
  <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs35', 207)" onmouseover="showTip(event, 'fs35', 207)" class="if">IWriteLn</span>

<span class="c">// And finally we can implement the environment</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs82', 208)" onmouseover="showTip(event, 'fs82', 208)" class="id">env</span> <span class="o">=</span>
  <span class="pn">{</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs81', 209)" onmouseover="showTip(event, 'fs81', 209)" class="if">IEnv</span> <span class="k">with</span>
      <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">ReadLn</span><span class="pn">(</span><span class="pn">)</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs23', 210)" onmouseover="showTip(event, 'fs23', 210)" class="k">zio</span> <span class="pn">{</span>
          <span class="k">match</span> <span onmouseout="hideTip(event, 'fs83', 211)" onmouseover="showTip(event, 'fs83', 211)" class="fn">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs84', 212)" onmouseover="showTip(event, 'fs84', 212)" class="rt">Console</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs85', 213)" onmouseover="showTip(event, 'fs85', 213)" class="id">ReadLine</span><span class="pn">(</span><span class="pn">)</span> <span class="k">with</span>
          <span class="pn">|</span> <span class="k">null</span> <span class="k">-&gt;</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs41', 214)" onmouseover="showTip(event, 'fs41', 214)" class="uc">None</span>
          <span class="pn">|</span> <span onmouseout="hideTip(event, 'fs43', 215)" onmouseover="showTip(event, 'fs43', 215)" class="id">line</span> <span class="k">-&gt;</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs42', 216)" onmouseover="showTip(event, 'fs42', 216)" class="uc">Some</span><span class="pn">(</span><span onmouseout="hideTip(event, 'fs43', 217)" onmouseover="showTip(event, 'fs43', 217)" class="id">line</span><span class="pn">)</span>
        <span class="pn">}</span>

      <span class="k">member</span> <span class="id">_</span><span class="pn">.</span><span class="fn">WriteLn</span> <span onmouseout="hideTip(event, 'fs43', 218)" onmouseover="showTip(event, 'fs43', 218)" class="id">line</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 219)" onmouseover="showTip(event, 'fs23', 219)" class="k">zio</span> <span class="pn">{</span> <span onmouseout="hideTip(event, 'fs83', 220)" onmouseover="showTip(event, 'fs83', 220)" class="fn">System</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs84', 221)" onmouseover="showTip(event, 'fs84', 221)" class="rt">Console</span><span class="pn">.</span><span onmouseout="hideTip(event, 'fs86', 222)" onmouseover="showTip(event, 'fs86', 222)" class="id">WriteLine</span> <span onmouseout="hideTip(event, 'fs43', 223)" onmouseover="showTip(event, 'fs43', 223)" class="id">line</span> <span class="pn">}</span> <span class="pn">}</span>

<span class="c">// and start our program</span>

<span class="k">do</span> <span onmouseout="hideTip(event, 'fs77', 224)" onmouseover="showTip(event, 'fs77', 224)" class="fn">program</span> <span class="pn">(</span><span class="pn">)</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs72', 225)" onmouseover="showTip(event, 'fs72', 225)" class="fn">startIn</span> <span onmouseout="hideTip(event, 'fs82', 226)" onmouseover="showTip(event, 'fs82', 226)" class="id">env</span>

<span class="c">// So, what do you think?</span>
<span class="c">//</span>
<span class="c">// What I like about this is that it is all rather simple and straightforward.</span>
<span class="c">// There is no need for any major workarounds for type system deficiencies.  The</span>
<span class="c">// type constraints for the environment and handlers are nicely inferred and are</span>
<span class="c">// arguably quite readable.</span>
<span class="c">//</span>
<span class="c">// This sketch doesn&#39;t include anything asynchronous, but due to the use of</span>
<span class="c">// continuation passing style and an extensible environment, async computations</span>
<span class="c">// are easily subsumed and interoperated with.</span>
<span class="c">//</span>
<span class="c">// This sketch also doesn&#39;t do anything with or about exceptions.  In a real</span>
<span class="c">// library you should think about and provide appropriate support for exception</span>
<span class="c">// handling.</span>
<span class="c">//</span>
<span class="c">// This is, of course, just a sketch and a toy program, but, who knows, maybe</span>
<span class="c">// you found some inspiration from this.</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Zio.go: &#39;r -&gt; &#39;h -&gt; (&#39;a -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs2">type unit = Unit</div>
<div class="tip" id="fs3">Multiple items<br />type ZioBuilder =<br />&#160;&#160;new : unit -&gt; ZioBuilder<br />&#160;&#160;member Bind : xZ:Zio&lt;&#39;a,&#39;b,&#39;c&gt; * xyZ:(&#39;c -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;) -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;<br />&#160;&#160;member Combine : lZ:Zio&lt;&#39;a,&#39;b,&#39;c&gt; * rZ:Zio&lt;&#39;a,&#39;b,&#39;d&gt; -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;<br />&#160;&#160;member Delay : f:(unit -&gt; Zio&lt;&#39;k,&#39;l,&#39;m&gt;) -&gt; Zio&lt;&#39;k,&#39;l,&#39;m&gt;<br />&#160;&#160;member Return : x:&#39;g -&gt; Zio&lt;&#39;h,&#39;i,&#39;g&gt;<br />&#160;&#160;member ReturnFrom : xZ:&#39;j -&gt; &#39;j<br />&#160;&#160;member Zero : unit -&gt; Zio&lt;&#39;e,&#39;f,unit&gt;<br /><br />--------------------<br />new : unit -&gt; ZioBuilder</div>
<div class="tip" id="fs4">val f : (unit -&gt; Zio&lt;&#39;k,&#39;l,&#39;m&gt;)</div>
<div class="tip" id="fs5">val r : &#39;k</div>
<div class="tip" id="fs6">val h : &#39;l</div>
<div class="tip" id="fs7">val k : (&#39;m -&gt; unit)</div>
<div class="tip" id="fs8">val xZ : &#39;j</div>
<div class="tip" id="fs9">val x : &#39;g</div>
<div class="tip" id="fs10">val k : (&#39;g -&gt; unit)</div>
<div class="tip" id="fs11">val this : ZioBuilder</div>
<div class="tip" id="fs12">member ZioBuilder.Return : x:&#39;g -&gt; Zio&lt;&#39;h,&#39;i,&#39;g&gt;</div>
<div class="tip" id="fs13">val lZ : Zio&lt;&#39;a,&#39;b,&#39;c&gt;</div>
<div class="tip" id="fs14">val rZ : Zio&lt;&#39;a,&#39;b,&#39;d&gt;</div>
<div class="tip" id="fs15">member ZioBuilder.Bind : xZ:Zio&lt;&#39;a,&#39;b,&#39;c&gt; * xyZ:(&#39;c -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;) -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;</div>
<div class="tip" id="fs16">val xZ : Zio&lt;&#39;a,&#39;b,&#39;c&gt;</div>
<div class="tip" id="fs17">val xyZ : (&#39;c -&gt; Zio&lt;&#39;a,&#39;b,&#39;d&gt;)</div>
<div class="tip" id="fs18">val r : &#39;a</div>
<div class="tip" id="fs19">val h : &#39;b</div>
<div class="tip" id="fs20">val k : (&#39;d -&gt; unit)</div>
<div class="tip" id="fs21">Zio.go: &#39;a -&gt; &#39;b -&gt; (&#39;c -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs22">val x : &#39;c</div>
<div class="tip" id="fs23">val zio : ZioBuilder</div>
<div class="tip" id="fs24">val ask : Zio&lt;&#39;a,&#39;b,&#39;a&gt;</div>
<div class="tip" id="fs25">val k : (&#39;a -&gt; unit)</div>
<div class="tip" id="fs26">val call : fn:(&#39;a -&gt; Zio&lt;&#39;a,&#39;b,&#39;c&gt;) -&gt; Zio&lt;&#39;a,&#39;b,&#39;c&gt;</div>
<div class="tip" id="fs27">val fn : (&#39;a -&gt; Zio&lt;&#39;a,&#39;b,&#39;c&gt;)</div>
<div class="tip" id="fs28">type IReadLn =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member ReadLn : unit -&gt; Zio&lt;&#39;r,&#39;h,string option&gt;<br />&#160;&#160;end</div>
<div class="tip" id="fs29">type Zio&lt;&#39;r,&#39;h,&#39;a&gt; =<br />&#160;&#160;{ go: &#39;r -&gt; &#39;h -&gt; (&#39;a -&gt; unit) -&gt; unit }</div>
<div class="tip" id="fs30">type &#39;T option = Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs31">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />--------------------<br />type string = System.String</div>
<div class="tip" id="fs32">val readLn : unit -&gt; Zio&lt;#IReadLn,&#39;b,string option&gt;</div>
<div class="tip" id="fs33">val s : #IReadLn</div>
<div class="tip" id="fs34">abstract member IReadLn.ReadLn : unit -&gt; Zio&lt;&#39;r,&#39;h,string option&gt;</div>
<div class="tip" id="fs35">type IWriteLn =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member WriteLn : string -&gt; Zio&lt;&#39;r,&#39;h,unit&gt;<br />&#160;&#160;end</div>
<div class="tip" id="fs36">val writeLn : t:string -&gt; Zio&lt;#IWriteLn,&#39;b,unit&gt;</div>
<div class="tip" id="fs37">val t : string</div>
<div class="tip" id="fs38">val s : #IWriteLn</div>
<div class="tip" id="fs39">abstract member IWriteLn.WriteLn : string -&gt; Zio&lt;&#39;r,&#39;h,unit&gt;</div>
<div class="tip" id="fs40">val copyAll : unit -&gt; Zio&lt;&#39;a,&#39;b,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn)</div>
<div class="tip" id="fs41">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs42">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs43">val line : string</div>
<div class="tip" id="fs44">val throw : e:(&#39;a -&gt; unit) -&gt; Zio&lt;&#39;b,&#39;a,&#39;c&gt;</div>
<div class="tip" id="fs45">val e : (&#39;a -&gt; unit)</div>
<div class="tip" id="fs46">val h : &#39;a</div>
<div class="tip" id="fs47">Multiple items<br />type ZioRunner&lt;&#39;r,&#39;h,&#39;a&gt; =<br />&#160;&#160;inherit ZioBuilder<br />&#160;&#160;new : r:&#39;r * h:&#39;h * k:(&#39;a -&gt; unit) -&gt; ZioRunner&lt;&#39;r,&#39;h,&#39;a&gt;<br />&#160;&#160;member Run : xZ:Zio&lt;&#39;r,&#39;h,&#39;a&gt; -&gt; unit<br /><br />--------------------<br />new : r:&#39;r * h:&#39;h * k:(&#39;a -&gt; unit) -&gt; ZioRunner&lt;&#39;r,&#39;h,&#39;a&gt;</div>
<div class="tip" id="fs48">val r : &#39;r</div>
<div class="tip" id="fs49">val h : &#39;h</div>
<div class="tip" id="fs50">val xZ : Zio&lt;&#39;r,&#39;h,&#39;a&gt;</div>
<div class="tip" id="fs51">val catch : h&#39;:(ZioRunner&lt;&#39;a,&#39;b,&#39;c&gt; -&gt; &#39;d) -&gt; xZ:Zio&lt;&#39;a,&#39;d,&#39;c&gt; -&gt; Zio&lt;&#39;a,&#39;b,&#39;c&gt;</div>
<div class="tip" id="fs52">val h&#39; : (ZioRunner&lt;&#39;a,&#39;b,&#39;c&gt; -&gt; &#39;d)</div>
<div class="tip" id="fs53">val xZ : Zio&lt;&#39;a,&#39;d,&#39;c&gt;</div>
<div class="tip" id="fs54">val k : (&#39;c -&gt; unit)</div>
<div class="tip" id="fs55">Zio.go: &#39;a -&gt; &#39;d -&gt; (&#39;c -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs56">type IUnexpectedEndOfInput =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member UnexpectedEndOfInput : unit -&gt; unit<br />&#160;&#160;end</div>
<div class="tip" id="fs57">val UnexpectedEndOfInput : h:#IUnexpectedEndOfInput -&gt; unit</div>
<div class="tip" id="fs58">val h : #IUnexpectedEndOfInput</div>
<div class="tip" id="fs59">abstract member IUnexpectedEndOfInput.UnexpectedEndOfInput : unit -&gt; unit</div>
<div class="tip" id="fs60">val copy1 : unit -&gt; Zio&lt;&#39;a,#IUnexpectedEndOfInput,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn)</div>
<div class="tip" id="fs61">type ILineTooLong =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member LineTooLong : max:int * actual:int -&gt; unit<br />&#160;&#160;end</div>
<div class="tip" id="fs62">val max : e1:&#39;T -&gt; e2:&#39;T -&gt; &#39;T (requires comparison)</div>
<div class="tip" id="fs63">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />--------------------<br />type int = int32<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int</div>
<div class="tip" id="fs64">val LineTooLong : int * int -&gt; h:#ILineTooLong -&gt; unit</div>
<div class="tip" id="fs65">val e : int * int</div>
<div class="tip" id="fs66">val h : #ILineTooLong</div>
<div class="tip" id="fs67">abstract member ILineTooLong.LineTooLong : max:int * actual:int -&gt; unit</div>
<div class="tip" id="fs68">val copy1Of : max:int -&gt; Zio&lt;&#39;a,&#39;b,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn and &#39;b :&gt; ILineTooLong and &#39;b :&gt; IUnexpectedEndOfInput)</div>
<div class="tip" id="fs69">val max : int</div>
<div class="tip" id="fs70">property System.String.Length: int with get</div>
<div class="tip" id="fs71">val interaction : unit -&gt; Zio&lt;&#39;a,&#39;b,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn and &#39;b :&gt; ILineTooLong and &#39;b :&gt; IUnexpectedEndOfInput)</div>
<div class="tip" id="fs72">val startIn : r:&#39;r -&gt; uZ:Zio&lt;&#39;r,unit,unit&gt; -&gt; unit</div>
<div class="tip" id="fs73">val uZ : Zio&lt;&#39;r,unit,unit&gt;</div>
<div class="tip" id="fs74">Zio.go: &#39;r -&gt; unit -&gt; (unit -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs75">val id : x:&#39;T -&gt; &#39;T</div>
<div class="tip" id="fs76">type IHandler =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;inherit ILineTooLong<br />&#160;&#160;&#160;&#160;inherit IUnexpectedEndOfInput<br />&#160;&#160;end</div>
<div class="tip" id="fs77">val program : unit -&gt; Zio&lt;&#39;a,&#39;b,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn)</div>
<div class="tip" id="fs78">val zio : ZioRunner&lt;&#39;a,&#39;b,unit&gt; (requires &#39;a :&gt; IWriteLn and &#39;a :&gt; IReadLn)</div>
<div class="tip" id="fs79">val actual : int</div>
<div class="tip" id="fs80">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T</div>
<div class="tip" id="fs81">type IEnv =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;inherit IWriteLn<br />&#160;&#160;&#160;&#160;inherit IReadLn<br />&#160;&#160;end</div>
<div class="tip" id="fs82">val env : IEnv</div>
<div class="tip" id="fs83">namespace System</div>
<div class="tip" id="fs84">type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...</div>
<div class="tip" id="fs85">System.Console.ReadLine() : string</div>
<div class="tip" id="fs86">System.Console.WriteLine() : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: string) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: obj) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: uint64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: int64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: uint32) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: int) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: float32) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: float) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Console.WriteLine(value: decimal) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>

